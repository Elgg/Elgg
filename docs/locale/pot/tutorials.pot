# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, Various
# This file is distributed under the same license as the Elgg package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Elgg 1.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-10 19:59-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../tutorials/blog.rst:2
# f0b0ed237fe04790a80abc06d8fc4dd5
msgid "Building a Blog Plugin"
msgstr ""

#: ../../tutorials/blog.rst:4
# 7a041ebabc624cc397616e92863b3510
msgid "Build a simple blogging plugin using Elgg."
msgstr ""

#: ../../tutorials/blog.rst:6
# 24f49a1d5d194ee491e7e36bc6cc8e94
msgid "This duplicates features in the bundled blog plugin, so be sure to disable that while working on your own version."
msgstr ""

#: ../../tutorials/blog.rst:10
# 51033b39ecb44d19b552c95853deda09
msgid "Create the plugin skeleton"
msgstr ""

#: ../../tutorials/blog.rst:12
# b8a5fb3f2e4a4e6b97840a9f8e6e647e
msgid "The name of the directory under \"mod\" becomes the id of your plugin::"
msgstr ""

#: ../../tutorials/blog.rst:18
# 9f3053264a7a4fa08411746c1f41623f
msgid "You'll need to add a manifest file in ``/mod/my_blog/manifest.xml``. This file stores basic information about the plugin. See :doc:`/guides/plugins` for the template. You can also just copy the manifest file from another plugin and then change the values to fit your new plugin. Be sure to change the author and website, and remove the “bundled” category!"
msgstr ""

#: ../../tutorials/blog.rst:24
# 20027b1dbbf14216b2ff10718396b0bf
msgid "Create a page for composing the blogs"
msgstr ""

#: ../../tutorials/blog.rst:26
# d6f948d76771490c98e037552289faa1
msgid "Create the file ``add.php`` in ``/mod/my_blog/pages/my_blog/``."
msgstr ""

#: ../../tutorials/blog.rst:57
# 0824d73997584b5f9a16352d5b249df2
msgid "Create the form for creating a new my\\_blog post"
msgstr ""

#: ../../tutorials/blog.rst:59
# 502c123df3424fb688e5aa5790a6dfc9
msgid "Create a file at ``/mod/my_blog/views/default/forms/my_blog/save.php`` that contains the form body. This corresponds to view that is called above: ``elgg_view_form(\"my_blog/save\")``."
msgstr ""

#: ../../tutorials/blog.rst:63
# 2caec7ff51f049fa9fb6b1973b0eb00a
msgid "The form should have input fields for the title, body and tags. Because you used ``elgg_view_form()``, you do not need to include form tag markup. The view will be automatically wrapped with:"
msgstr ""

#: ../../tutorials/blog.rst:67
# 7d1bcf2c941448188493318948b2b892
msgid "a ``<form>`` tag and the necessary attributes"
msgstr ""

#: ../../tutorials/blog.rst:68
# 7a9d72a92976451dbd04e6e297b1c04d
msgid "anti-csrf tokens"
msgstr ""

#: ../../tutorials/blog.rst:70
# ea2a8a8bdb4346488242e8ed0b519947
msgid "The form's action will be ``\"<?php echo elgg_get_site_url() ?>action/my_blog/save\"``, which we will create in a moment. Here is the content of ``/mod/my_blog/views/default/forms/my_blog/save.php``:"
msgstr ""

#: ../../tutorials/blog.rst:96
# dab1e707b94e439a84cc504721ed5da2
msgid "Notice how the form is calling input views like ``input/longtext``. These are built into elgg and make it easy to add form components. You can see a complete list of input views in the ``/views/default/input/`` directory."
msgstr ""

#: ../../tutorials/blog.rst:102
# d8f0758c13bb4b7dba45b7979c225278
msgid "The above code is not accessibility-friendly."
msgstr ""

#: ../../tutorials/blog.rst:105
# 19fc6c2187a748cabe7348c992baae46
msgid "The action file"
msgstr ""

#: ../../tutorials/blog.rst:107
# da3d620065354756a3541ff432af5bfe
msgid "Create the file ``/mod/my_blog/actions/my_blog/save.php``. This will save the blog post to the database."
msgstr ""

#: ../../tutorials/blog.rst:146
# b879a2dd256044e885645bc65ef80528
msgid "A few fields are built into Elgg objects. Title and description are two of these. It makes sense to use description to contain the my\\_blog text. Every entity can have a subtype and in this we are using ``\"my_blog\"``. The tags are stored as metadata."
msgstr ""

#: ../../tutorials/blog.rst:151
# d0497ce9750c455b99c29657708ed16b
msgid "Every object in Elgg has a built-in URL automatically, although you can override this if you wish. The ``getURL()`` method is called to get that unique URL."
msgstr ""

#: ../../tutorials/blog.rst:156
# 3d614e2f2ac749d6ae94d807ba2ef278
msgid "The object view"
msgstr ""

#: ../../tutorials/blog.rst:158
# e14073003a6b4b8db11069edeecb1869
msgid "Elgg will automatically call the ``object/my_blog`` view to view the my\\_blog post so we need to create the object view."
msgstr ""

#: ../../tutorials/blog.rst:161
# 1c4684e0ab6c4b6f9ac08ab1a71475c5
msgid "Objects in Elgg are a subclass of something called an “entity”. Users, sites, and groups are also subclasses of entity. All entities can (and should) have a subtype, which allows granular control for listing and displaying. Here, we have used the subtype \"``my_blog``\\ \" to identify a my\\_blog post, but any alphanumeric string can be a valid subtype. When picking subtypes, be sure to pick ones that make sense for your plugin."
msgstr ""

#: ../../tutorials/blog.rst:169
# aa2624d019ca486eb793bd82805739f5
msgid "In ``/mod/my_blog/views/default/``, create a folder ``/object/`` and then create a file ``my_blog.php`` in it."
msgstr ""

#: ../../tutorials/blog.rst:172
# bd1ce6bcb1a2495b818db60553506b0b
msgid "Each my\\_blog post will be passed to this PHP file as ``$vars['entity']``. (``$vars`` is an array used in the views system to pass variables to a view.) The content of ``object/my_blog.php`` can just be something like:"
msgstr ""

#: ../../tutorials/blog.rst:185
# 6dda68dec6e94aa6b2a4de16ec09ae03
msgid "The last line takes the tags on the my\\_blog post and automatically displays them as a series of clickable links. Search is handled automatically."
msgstr ""

#: ../../tutorials/blog.rst:189
# 27d6a1dd89c04be9ba166185b45fd38f
msgid "(If you're wondering about the '``default``\\ ' in ``/views/default/``, you can create alternative views. RSS, OpenDD, FOAF, mobile and others are all valid view types.)"
msgstr ""

#: ../../tutorials/blog.rst:194
# c12451ccd5d44cbab7804ec073ec90e0
msgid "Plugin start.php"
msgstr ""

#: ../../tutorials/blog.rst:196
# cd056717d2bd4003a15383f877908cd6
msgid "Every plugin has a ``start.php`` that initializes it. For this example, we just need to register the action file we created earlier: Also see a related guide about :doc:`/guides/actions`."
msgstr ""

#: ../../tutorials/blog.rst:206
# 1c3187698bdf4138a8f1fe6f52459c28
msgid "The action will now be available as ``/action/my_blog/save``. By default, all actions are available only to logged in users. If you want to make an action available to only admins or open it up to unauthenticated users, you can pass 'admin' or 'public' as the third parameter of ``elgg_register_action()``, respectively."
msgstr ""

#: ../../tutorials/blog.rst:212
#: ../../tutorials/hello_world.rst:72
# 6a3890badc634f718b5b8f985bd9524a
# 284d16cffc834a79af8a9bc13ca249a5
msgid "Registering a page handler"
msgstr ""

#: ../../tutorials/blog.rst:214
# e688ae459834437b8afd564903c8c104
msgid "In order to be able to serve the page that generates the form, you'll need to register a page handler. Add the following to your start.php:"
msgstr ""

#: ../../tutorials/blog.rst:229
# a92cf9f5526b4322ba4fa1a585f25926
msgid "Page handling functions need to return ``true`` or ``false``. ``true`` means the page exists and has been handled by the page handler. ``false`` means that the page does not exist and the user will be forwarded to the site's 404 page (requested page does not exist or not found). In this particular example, the URL must contain ``/my_blog/add`` for the user to view a page with a form, otherwise the user will see a 404 page."
msgstr ""

#: ../../tutorials/blog.rst:238
# b3f7dbcbd57d4ca081f2a294a1055c13
msgid "Trying it out"
msgstr ""

#: ../../tutorials/blog.rst:240
# d85fda8a52414507beaaf7717cd91505
msgid "If you have not enabled the plugin yet, you will need to go to Administration => Configure => Plugins => Advanced. Scroll to the bottom until you see your plugin. Click the Enable button."
msgstr ""

#: ../../tutorials/blog.rst:244
# 37a140925ec74229b66281a68ae00a12
msgid "The page to create a new my\\_blog post is accessible at http://yoursite/my_blog/add. Try it out."
msgstr ""

#: ../../tutorials/blog.rst:248
# 1d30026ae5444d7b86801783f2cc51d7
msgid "Displaying list of my\\_blogs"
msgstr ""

#: ../../tutorials/blog.rst:250
# c889e7bb8689451cad675592ab58f16d
msgid "Let's also create a page that lists my\\_blog entries that have been created."
msgstr ""

#: ../../tutorials/blog.rst:252
# bfdf13a1b4974595af5d7a6d3415cd0a
msgid "Create ``/mod/my_blog/pages/my_blog/all.php``."
msgstr ""

#: ../../tutorials/blog.rst:254
# 0966f6d723434a0aaa5f62b13facdf06
msgid "To grab the latest my\\_blog posts, we'll use ``elgg_list_entities``. Note that this function returns only the posts that the user can see, so access restrictions are handled transparently:"
msgstr ""

#: ../../tutorials/blog.rst:265
# ce9430eb96e342479abd9fee2c728ece
msgid "The function \\`elgg\\_list\\_entities\\` (and its cousins) also transparently handle pagination, and even create an RSS feeds for your my\\_blogs if you have defined these views."
msgstr ""

#: ../../tutorials/blog.rst:269
# 48cfea773b8e4f3fad7f04b2b4d064cf
msgid "Finally, we'll draw the page:"
msgstr ""

#: ../../tutorials/blog.rst:277
# bf4345cfe3894971966067e93c5ba04b
msgid "We will then need to modify our my\\_blog page handler to grab the new page when the URL is set to ``/my_blog/all``. So, your new ``my_blog_page_handler()`` function in start.php should look like:"
msgstr ""

#: ../../tutorials/blog.rst:298
# 37b33acecde44218b7340d19b8c9b85d
msgid "Now, if the URL contains just ``/my_blog`` or ``/my_blog/all``, the user will see an \"All Site Blogs\" page."
msgstr ""

#: ../../tutorials/blog.rst:302
# 4e8c9235c3d04b18aeb4a0d07a31f8d3
msgid "A user's blog page"
msgstr ""

#: ../../tutorials/blog.rst:304
# aeaa2afc20cc4397a46829dc692e7e3d
msgid "If we grab the Global Unique IDentifier (GUID) of the logged in user, we can limit the my\\_blog posts to those posted by specifying the owner\\_guid argument in the list function above."
msgstr ""

#: ../../tutorials/blog.rst:318
# 4035dd438f374123aba59aec87be1474
msgid "The end"
msgstr ""

#: ../../tutorials/blog.rst:320
# 3780459610a046cabe0a32c4567f6314
msgid "There's much more that could be done for this plugin, but hopefully this gives you a good idea of how to get started with your own."
msgstr ""

#: ../../tutorials/hello_world.rst:2
# 152dcab11a10411880ce068d78756edf
msgid "Hello world"
msgstr ""

#: ../../tutorials/hello_world.rst:4
# bfa2ac91f2d14c35ae23ec9522b5dc56
msgid "This tutorial shows you how to build a simple plugin that adds a new page and prints the text \"Hello world\" on it."
msgstr ""

#: ../../tutorials/hello_world.rst:7
# cb38d03f766a4e9498810cd98203b884
msgid "In this tutorial we will use the address ``http://www.mysite.com/`` as an example. While developing the plugin you should use the address of your own site instead of the example address."
msgstr ""

#: ../../tutorials/hello_world.rst:12
# 3de92b7a376846d1ab302d5d6c522132
msgid "Required files"
msgstr ""

#: ../../tutorials/hello_world.rst:13
# c99ae6278ec94c8ea0a0d00acc73c6d9
msgid "First of all you need a directory that will hold all the files required by the plugin. Go to the ``mod`` directory of your Elgg site and create there a directory with the name ``hello_world``."
msgstr ""

#: ../../tutorials/hello_world.rst:19
# 18cda02dfac64c1daa7126eb01a5ca71
msgid "Go to the ``hello_world`` directory and create these two files inside it:"
msgstr ""

#: ../../tutorials/hello_world.rst:18
#: ../../tutorials/indexpage.rst:7
# 8a2d346869a445cba59d6d2a722b24ce
# 44e498ef414a4585bc16bfa5a5f0d040
msgid "start.php"
msgstr ""

#: ../../tutorials/hello_world.rst:19
# b9b9571732a045bb9b62710d0dd1f1f3
msgid "manifest.xml"
msgstr ""

#: ../../tutorials/hello_world.rst:21
# 99789314130048a1b81ee7d3bc7748d7
msgid "Copy this to the ``manifest.xml`` file:"
msgstr ""

#: ../../tutorials/hello_world.rst:39
# 183dd4259d3849a78a1b679a214063f8
msgid "Add your name to the ``<author></author>`` element."
msgstr ""

#: ../../tutorials/hello_world.rst:41
# 7ec296d5524e4475824889d046493311
msgid "The plugin has now the minimum requirements for your site to recognize it. Log in to your site as an administrator and access the plugins page at the administration panel. By default the plugin is at the bottom of the plugins list. Click the \"Activate\" button to start it."
msgstr ""

#: ../../tutorials/hello_world.rst:50
# 7c3391679aa541568745aec12a315a42
msgid "The Hello world plugin has appeared to the bottom of the plugin list"
msgstr ""

#: ../../tutorials/hello_world.rst:53
# e929906a830848d4b33516c115008236
msgid "Initializing the plugin"
msgstr ""

#: ../../tutorials/hello_world.rst:55
# 281d8cd25d8545c08105602e522e0d7a
msgid "The next step is to add some actual features. Open the ``start.php`` and copy this to it:"
msgstr ""

#: ../../tutorials/hello_world.rst:68
# 611cb436767a4554a5c5aff44fd87b5f
msgid "This piece of code tells Elgg that it should call the function ``hello_world_init()`` when the Elgg core system is initiated."
msgstr ""

#: ../../tutorials/hello_world.rst:74
# 3f0886fe17c24c1eaa3d4c5d6d0b6ba5
msgid "The next step is to register a page handler which has the purpose of handling request that users make to the URL http://www.mysite.com/hello/."
msgstr ""

#: ../../tutorials/hello_world.rst:77
# f8a3121f998c4eaf9cc2a3467c604f6f
msgid "Update the ``start.php`` to look like this:"
msgstr ""

#: ../../tutorials/hello_world.rst:101
# cec3b2b8917f4e93bec4891e911dd5ed
msgid "The call to ``elgg_register_page_handler()`` tells Elgg that it should call the function ``hello_world_page_handler()`` when user goes to your site and has \"hello\" at the end of the URL."
msgstr ""

#: ../../tutorials/hello_world.rst:105
# a51c1476c54f45b2a0df1f55ef55a477
msgid "The ``hello_world_page_handler()`` makes it possible for the users to access the actual page. Inside the function we first give an array of parameters to the ``elgg_view_layout()`` function."
msgstr ""

#: ../../tutorials/hello_world.rst:112
# ded2842ff0d94bdd87fca33f3b65fad5
msgid "The parameters include:"
msgstr ""

#: ../../tutorials/hello_world.rst:110
# 6b546eb4a7cc44c186260920e9222609
msgid "The title of the page"
msgstr ""

#: ../../tutorials/hello_world.rst:111
# 41a20ccdfd444b048d61bcdc6b98cc42
msgid "The contents of the page"
msgstr ""

#: ../../tutorials/hello_world.rst:112
# cfa6586044d14be98e0e36b8dce5fa68
msgid "Filter which is left empty because there's currently nothing to filter"
msgstr ""

#: ../../tutorials/hello_world.rst:114
# 92fd5fc282c1453aa77512b2b884ad40
msgid "This creates the basic layout for the page. The layout is then run through ``elgg_view_page()`` which assembles and outputs the full page."
msgstr ""

#: ../../tutorials/hello_world.rst:117
# 4b13440e737642f487f15d636b0bf011
msgid "You can now go to the address http://www.mysite.com/hello/ and you should see the page."
msgstr ""

#: ../../tutorials/hello_world.rst:123
# c157dffb72f6446091dea954137a9b4b
msgid "Elgg is now routing the URL http://www.mysite.com/hello/ to the page you created."
msgstr ""

#: ../../tutorials/index.rst:2
# 00b97082a87d479a8727b730cad534df
msgid "Plugin Tutorials"
msgstr ""

#: ../../tutorials/index.rst:4
# 9e2f52e9d2344b8485339737ec24a52b
msgid "Walk through all the required steps in order to create your own plugins."
msgstr ""

#: ../../tutorials/index.rst:6
# f42f4386b35647f08b7051796924280d
msgid "The instructions are detailed enough that you don't need much previous experience on plugin development."
msgstr ""

#: ../../tutorials/indexpage.rst:2
# 5f44f97d1ec14c50bbc45a787c5f4f38
msgid "Customizing the Home Page"
msgstr ""

#: ../../tutorials/indexpage.rst:4
# 34e612d19adb4646854ded0b08766dec
msgid "Overwrite the default index page on your Elgg install."
msgstr ""

#: ../../tutorials/indexpage.rst:9
# e19ddf11366f433fa69d49c7d80f5972
msgid "Register a function for the plugin hook called ``index, system`` that returns ``true``. This tells Elgg to assume that another front page has been drawn so it doesn't display the default page."
msgstr ""

#: ../../tutorials/indexpage.rst:12
# 2b811197f4474b62bf0cc9c1b14a9672
msgid "Inside start.php you will need something like the following:"
msgstr ""

#: ../../tutorials/indexpage.rst:31
# e495d82b595d4e208a30a8359802837c
msgid "pages/index.php"
msgstr ""

#: ../../tutorials/indexpage.rst:33
# b82a438048a448d8ba9b4d9846fe2cb0
msgid "Then implement the page handler script (/pluginname/pages/index.php) to generate the desired output. Anything output from this script will become your new home page."
msgstr ""

#: ../../tutorials/widget.rst:2
# f90c1b85b41f4138afb09a9a02f5daec
msgid "Basic Widget"
msgstr ""

#: ../../tutorials/widget.rst:4
# 98899a1205444dbaa0cf9671ae8d81b7
msgid "Create a widget that will display “Hello, World!” and optionally any text the user wants."
msgstr ""

#: ../../tutorials/widget.rst:6
# ac8702db4d1541cf8db36d69871b907d
msgid "In Elgg, widgets are those components that you can drag onto your profile or admin dashboard."
msgstr ""

#: ../../tutorials/widget.rst:8
# d9a76a7600324aadbe7ae3dd545ffad5
msgid "This tutorial assumes you are familiar with basic Elgg concepts such as:"
msgstr ""

#: ../../tutorials/widget.rst:10
# 139ef8cc96864a179a63cd678770fc54
msgid ":doc:`/guides/views`"
msgstr ""

#: ../../tutorials/widget.rst:11
# cbb8f1cf33f74298a1dd801b908a8fb5
msgid ":doc:`/admin/plugins`."
msgstr ""

#: ../../tutorials/widget.rst:13
# e219231b4b7542fca11dc9986c8bd990
msgid "You should review those if you get confused along the way."
msgstr ""

#: ../../tutorials/widget.rst:16
# 810e9f51c357474d800245035515159f
msgid "Registering your plugin"
msgstr ""

#: ../../tutorials/widget.rst:18
# f647fa69a339477b889b673b88adecd9
msgid "Plugins are always placed in the ``/mod`` directory. Create a subdirectory there called ``hello``. This will be the name of your plugin and will show up in the Plugins Administration section of Elgg by this name."
msgstr ""

#: ../../tutorials/widget.rst:23
# f3a852f8495a41beb7d9c8253017ba11
msgid "In ``/mod/hello``, create an empty file called ``start.php``. If this file exists, Elgg will load your plugin. Otherwise, you will see a misconfigured plugin error. Go to the admin section of your Elgg install and enable your plugin. Click on the “more info” link under your plugin name. You will notice that nothing happens."
msgstr ""

#: ../../tutorials/widget.rst:30
# 3312384f56864403a7dc77c646c7d5f1
msgid "Copy the manifest.xml file from one of the plugins in your elgg install into ``/mod/hello``. Update its values so you are listed as the author and change the description to describe this new plugin. Reload the Tools Administration page in your browser and check “more info” again. It will now display the information that you've entered."
msgstr ""

#: ../../tutorials/widget.rst:36
# c835b259547f4a8ebe43d9727136d300
msgid "Adding the widget view code"
msgstr ""

#: ../../tutorials/widget.rst:38
# 0bf2e8e8b1bb4b83b7eaa388480e2fde
msgid "Elgg automatically scans particular directories under plugins looking for particular files. :doc:`/guides/views` make it easy to add your display code or do other things like override default Elgg behavior. For now, we will just be adding the view code for your widget. Create a file at ``/mod/hello/views/default/widgets/helloworld/content.php``. “helloworld” will be the name of your widget within the hello plugin. In this file add the code:"
msgstr ""

#: ../../tutorials/widget.rst:51
# c702c14301444873b1ff2e98d283e87b
msgid "This will add these words to the widget canvas when it is drawn. Elgg takes care of loading the widget."
msgstr ""

#: ../../tutorials/widget.rst:55
# abb52032273e49ebb292bbeadfca8d9d
msgid "Registering your widget"
msgstr ""

#: ../../tutorials/widget.rst:57
# 1d4e1e0f9f3b4777b15700dc941fa5dd
msgid "Elgg needs to be told explicitly that the plugin contains a widget so that it will scan the widget views directory. This is done by calling the elgg\\_register\\_widget\\_type() function. Edit ``/mod/hello/start.php``. In it add these lines:"
msgstr ""

#: ../../tutorials/widget.rst:72
# d5837fadae7344a5ab0e5a70c4fdc61c
msgid "Now go to your profile page using a web browser and add the “hello, world” widget. It should display “Hello, world!”."
msgstr ""

#: ../../tutorials/widget.rst:77
# 5970f9f4520547ee9ac44754bd8c108e
msgid "For real widgets, it is always a good idea to support :doc:`/guides/i18n`."
msgstr ""

#: ../../tutorials/widget.rst:80
# 6a1bbf0c4540408e87746076644e1382
msgid "Allow user customization"
msgstr ""

#: ../../tutorials/widget.rst:82
# 17ac915bae884e3b831a3ff0ddb1bc74
msgid "Click on the edit link on the toolbar of the widget that you've created. You will notice that the only control it gives you by default is over access (over who can see the widget)."
msgstr ""

#: ../../tutorials/widget.rst:86
# 49ab5c8feee740c194e244d1a526d6d0
msgid "Suppose you want to allow the user to control what greeting is displayed in the widget. Just as Elgg automatically loads ``content.php`` when viewing a widget, it loads ``edit.php`` when a user attempts to edit a widget. In ``/mod/hello/views/default/widgets/helloworld/``, create a file named ``edit.php``. In this file, add the following code:"
msgstr ""

#: ../../tutorials/widget.rst:109
# 020e0191581e4d86911e596647e3456c
msgid "Notice the relationship between the values passed to the 'name' and the 'value' fields of input/text. The name of the input text box is ``params[message]`` because Elgg will automatically handle widget variables put in the array ``params``. The actual php variable name will be ``message``. If we wanted to use the field ``greeting`` instead of ``message`` we would pass the values ``params[greeting]`` and ``$widget->greeting`` respectively."
msgstr ""

#: ../../tutorials/widget.rst:117
# 81b7c5713eef40a997460c1253d4dd03
msgid "The reason we set the 'value' option of the array is so that the edit view remembers what the user typed in the previous time he changed the value of his message text."
msgstr ""

#: ../../tutorials/widget.rst:121
# f44d3155e7074f25a92c4cde86c9cf3c
msgid "Now to display the user's message we need to modify content.php to use this *message* variable. Edit content.php and change it to:"
msgstr ""

#: ../../tutorials/widget.rst:133
# 54e033859ff540cdb7883e721c940023
msgid "You should now be able to enter a message in the text box and see it appear in the widget."
msgstr ""

#: ../../tutorials/wysiwyg.rst:2
# c24bd8d44ac5489888662d3123c5018a
msgid "Integrating a Rich Text Editor"
msgstr ""

#: ../../tutorials/wysiwyg.rst:4
# a42ceecbd2cc454aa33ef7f97ef4115b
msgid "Build your own wysiwyg plugin."
msgstr ""

#: ../../tutorials/wysiwyg.rst:6
# c5310fff0546421ea9db169bd58c761b
msgid "Elgg is bundled with a plugin for CKEditor_, and previously shipped with TinyMCE_ support. However, if you have a wysiwyg that you prefer, you could use this tutorial to help you build your own."
msgstr ""

#: ../../tutorials/wysiwyg.rst:12
# 0127bab29a684f8bb5be6e1fdc645338
msgid "All forms in Elgg should try to use the provided input views located in ``views/default/input``. If these views are used, then it is simple for plugin authors to replace a view, in this case longtext.php, with their wysiwyg."
msgstr ""

#: ../../tutorials/wysiwyg.rst:17
# 1c46a51389c24dec818c4dc13393601d
msgid "Create your plugin skeleton"
msgstr ""

#: ../../tutorials/wysiwyg.rst:19
# b2b2e47e1ed5419a8e1cefb834392b12
msgid "You will need to create your plugin and give it a start.php file where the plugin gets initialized, as well as a manifest.xml file to tell the Elgg engine about your plugin."
msgstr ""

#: ../../tutorials/wysiwyg.rst:22
# b139c340ecaa49c09ebf2b0683254c02
msgid "Read more in the guide about :doc:`/guides/plugins`."
msgstr ""

#: ../../tutorials/wysiwyg.rst:25
# 348a262ec8454cf9a13f83fa3dc1a8b2
msgid "Add the WYSIWYG library code"
msgstr ""

#: ../../tutorials/wysiwyg.rst:27
# fcd27124c1b247b0af2333d95d6fa05d
msgid "Now you need to upload TinyMCE into a directory in your plugin. We strongly encourage you to put third party libraries in a “vendors” directory, as that is standard practice in Elgg plugins and will make your plugin much more approachable by other developers::"
msgstr ""

#: ../../tutorials/wysiwyg.rst:35
# 4f5fda23f9fa4b11a31e996e92c75ec7
msgid "Tell Elgg when and how to load TinyMCE"
msgstr ""

#: ../../tutorials/wysiwyg.rst:37
# 3a270320f6794efa87f91c2b9eb0444b
msgid "Now that you have:"
msgstr ""

#: ../../tutorials/wysiwyg.rst:39
# 55321e5f37764539a77ec1986c78d58b
msgid "created your start file"
msgstr ""

#: ../../tutorials/wysiwyg.rst:40
# 43cbe40a58be497d87e909bc7cbb7330
msgid "intialized the plugin"
msgstr ""

#: ../../tutorials/wysiwyg.rst:41
# d6228cae8fdd4c9c9d36e7d38827eab4
msgid "uploaded the wysiwyg code"
msgstr ""

#: ../../tutorials/wysiwyg.rst:43
# c8d874f825004ae5a0f9f7c839a6b9cb
msgid "It is time to tell Elgg how to apply TinyMCE to longtext fields."
msgstr ""

#: ../../tutorials/wysiwyg.rst:45
# 6839b37941f94bbfa379e120ecfb6f14
msgid "We're going to do that by extending the input/longtext view and including some javascript. Create a view tinymce/longtext and add the following code:"
msgstr ""

#: ../../tutorials/wysiwyg.rst:81
# 28d09c3ef83144828f72bb7698d15ebb
msgid "Then, in your plugin's init function, extend the input/longtext view"
msgstr ""

#: ../../tutorials/wysiwyg.rst:89
# bb597f72fbcb4c64b9b5f0334b739b2b
msgid "That's it! Now every time someone uses input/longtext, TinyMCE will be loaded and applied to that textarea."
msgstr ""

