# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, Various
# This file is distributed under the same license as the Elgg package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Elgg 1.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-10-20 01:11+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../tutorials/blog.rst:2
# e00f1e0aace64e31bf02d709ed0afebe
msgid "Building a Blog Plugin"
msgstr ""

#: ../../tutorials/blog.rst:4
# 590bf12e9faa43fbbcd9bd02276a68f1
msgid "Build a simple blogging plugin using Elgg."
msgstr ""

#: ../../tutorials/blog.rst:6
# 58abe113167f47f48b921e82ed5d4d9e
msgid "This duplicates features in the bundled blog plugin, so be sure to disable that while working on your own version."
msgstr ""

#: ../../tutorials/blog.rst:10
# 5d90367708394d5b91fd415536ebd7a2
msgid "Create the plugin skeleton"
msgstr ""

#: ../../tutorials/blog.rst:12
# 02607d0063d84c248575eabd9cf5431e
msgid "The name of the directory under \"mod\" becomes the id of your plugin::"
msgstr ""

#: ../../tutorials/blog.rst:18
# 4c5781e9afc04159ae1b56b2b432d843
msgid "You'll need to add a manifest file in ``/mod/my_blog/manifest.xml``. This file stores basic information about the plugin. See :doc:`/guides/plugins` for the template. You can also just copy the manifest file from another plugin and then change the values to fit your new plugin. Be sure to change the author and website, and remove the “bundled” category!"
msgstr ""

#: ../../tutorials/blog.rst:24
# ef5dbdfa7a614f92835ba3754c86478b
msgid "Create a page for composing the blogs"
msgstr ""

#: ../../tutorials/blog.rst:26
# 1e000cc3e5bd4bbe9466c7d5a6398f62
msgid "Create the file ``add.php`` in ``/mod/my_blog/pages/my_blog/``."
msgstr ""

#: ../../tutorials/blog.rst:57
# 91c318c8e1a748deab9661e6e0989684
msgid "Create the form for creating a new my\\_blog post"
msgstr ""

#: ../../tutorials/blog.rst:59
# ea265de3d3f24d19b663d48add9d24ff
msgid "Create a file at ``/mod/my_blog/views/default/forms/my_blog/save.php`` that contains the form body. This corresponds to view that is called above: ``elgg_view_form(\"my_blog/save\")``."
msgstr ""

#: ../../tutorials/blog.rst:63
# b649db45b95641e99c88aba9a222f884
msgid "The form should have input fields for the title, body and tags. Because you used ``elgg_view_form()``, you do not need to include form tag markup. The view will be automatically wrapped with:"
msgstr ""

#: ../../tutorials/blog.rst:67
# f76f357778304022b357a4cd1e7438c1
msgid "a ``<form>`` tag and the necessary attributes"
msgstr ""

#: ../../tutorials/blog.rst:68
# a4eadc876ae54a9da0c5fadba76356ea
msgid "anti-csrf tokens"
msgstr ""

#: ../../tutorials/blog.rst:70
# a3168a5726c8416186649471ee09857a
msgid "The form's action will be ``\"<?php echo elgg_get_site_url() ?>action/my_blog/save\"``, which we will create in a moment. Here is the content of ``/mod/my_blog/views/default/forms/my_blog/save.php``:"
msgstr ""

#: ../../tutorials/blog.rst:96
# 7ecc93f311834df0bf7abcf88552a444
msgid "Notice how the form is calling input views like ``input/longtext``. These are built into Elgg and make it easy to add form components. You can see a complete list of input views in the ``/views/default/input/`` directory."
msgstr ""

#: ../../tutorials/blog.rst:102
# d7ddbccdac5647f8940fdcffd2b3745d
msgid "The above code is not accessibility-friendly."
msgstr ""

#: ../../tutorials/blog.rst:105
# 879ee7fb261342ad8e507a4bb3501a9f
msgid "The action file"
msgstr ""

#: ../../tutorials/blog.rst:107
# bb93faa344f549ccace13635b7d99df6
msgid "Create the file ``/mod/my_blog/actions/my_blog/save.php``. This will save the blog post to the database."
msgstr ""

#: ../../tutorials/blog.rst:146
# 90c16506dd4f4706af7a4eb94b3b72c9
msgid "A few fields are built into Elgg objects. Title and description are two of these. It makes sense to use description to contain the my\\_blog text. Every entity can have a subtype and in this we are using ``\"my_blog\"``. The tags are stored as metadata."
msgstr ""

#: ../../tutorials/blog.rst:151
# f50c4adceb014b189435d091114e3a15
msgid "Every object in Elgg has a built-in URL automatically, although you can override this if you wish. The ``getURL()`` method is called to get that unique URL."
msgstr ""

#: ../../tutorials/blog.rst:156
# fe7c4757756f486ea176cd942cac029a
msgid "The object view"
msgstr ""

#: ../../tutorials/blog.rst:158
# d2b8a30715714c0fac2ad74c0ffd0de6
msgid "Elgg will automatically call the ``object/my_blog`` view to view the my\\_blog post so we need to create the object view."
msgstr ""

#: ../../tutorials/blog.rst:161
# 64c8c5f1ad6148fdaf6af464dcd60945
msgid "Objects in Elgg are a subclass of something called an “entity”. Users, sites, and groups are also subclasses of entity. All entities can (and should) have a subtype, which allows granular control for listing and displaying. Here, we have used the subtype \"``my_blog``\\ \" to identify a my\\_blog post, but any alphanumeric string can be a valid subtype. When picking subtypes, be sure to pick ones that make sense for your plugin."
msgstr ""

#: ../../tutorials/blog.rst:169
# e85e5080a90544f0bfc68fd48b71bef3
msgid "In ``/mod/my_blog/views/default/``, create a folder ``/object/`` and then create a file ``my_blog.php`` in it."
msgstr ""

#: ../../tutorials/blog.rst:172
# 3a9df330a5be46488a585f2182853d6a
msgid "Each my\\_blog post will be passed to this PHP file as ``$vars['entity']``. (``$vars`` is an array used in the views system to pass variables to a view.) The content of ``object/my_blog.php`` can just be something like:"
msgstr ""

#: ../../tutorials/blog.rst:185
# d8a6757c6d094c3ab350bf90f98206e4
msgid "The last line takes the tags on the my\\_blog post and automatically displays them as a series of clickable links. Search is handled automatically."
msgstr ""

#: ../../tutorials/blog.rst:189
# b51f73555a1a41d4b3798b0782aaf083
msgid "(If you're wondering about the '``default``\\ ' in ``/views/default/``, you can create alternative views. RSS, OpenDD, FOAF, mobile and others are all valid view types.)"
msgstr ""

#: ../../tutorials/blog.rst:194
# 81f97e2d551e41728b30bdc218cfaa0c
msgid "Plugin start.php"
msgstr ""

#: ../../tutorials/blog.rst:196
# 8271a9333e844ff19bfaf7cb11aa560d
msgid "Every plugin has a ``start.php`` that initializes it. For this example, we just need to register the action file we created earlier: Also see a related guide about :doc:`/guides/actions`."
msgstr ""

#: ../../tutorials/blog.rst:206
# 76bac26bc13a475c9feb480ada04696a
msgid "The action will now be available as ``/action/my_blog/save``. By default, all actions are available only to logged in users. If you want to make an action available to only admins or open it up to unauthenticated users, you can pass 'admin' or 'public' as the third parameter of ``elgg_register_action()``, respectively."
msgstr ""

#: ../../tutorials/blog.rst:212
#: ../../tutorials/hello_world.rst:72
# 56be5e7ca72e4f6396540a24ea366eb0
# 1987350d412644018001c7bcfd4fbc4f
msgid "Registering a page handler"
msgstr ""

#: ../../tutorials/blog.rst:214
# 446742b9031741a0812a5b239cde4377
msgid "In order to be able to serve the page that generates the form, you'll need to register a page handler. Add the following to your start.php:"
msgstr ""

#: ../../tutorials/blog.rst:229
# f2eef1c955c64f218497b503cf6206ca
msgid "Page handling functions need to return ``true`` or ``false``. ``true`` means the page exists and has been handled by the page handler. ``false`` means that the page does not exist and the user will be forwarded to the site's 404 page (requested page does not exist or not found). In this particular example, the URL must contain ``/my_blog/add`` for the user to view a page with a form, otherwise the user will see a 404 page."
msgstr ""

#: ../../tutorials/blog.rst:238
# b7a387a1e4804543b9d497830604d6ac
msgid "Trying it out"
msgstr ""

#: ../../tutorials/blog.rst:240
# 5a017eb65aa94115ada05df75cad8b56
msgid "If you have not enabled the plugin yet, you will need to go to Administration => Configure => Plugins => Advanced. Scroll to the bottom until you see your plugin. Click the Enable button."
msgstr ""

#: ../../tutorials/blog.rst:244
# 44169ce951654753a5d2b7743ceee703
msgid "The page to create a new my\\_blog post is accessible at http://yoursite/my_blog/add. Try it out."
msgstr ""

#: ../../tutorials/blog.rst:248
# 1192641b38b24a8392b5828009089d68
msgid "Displaying list of my\\_blogs"
msgstr ""

#: ../../tutorials/blog.rst:250
# 00d7709f45b44ff2b7c6d76212b3680c
msgid "Let's also create a page that lists my\\_blog entries that have been created."
msgstr ""

#: ../../tutorials/blog.rst:252
# ad09c255f1e84cc58361555d8d70a2ee
msgid "Create ``/mod/my_blog/pages/my_blog/all.php``."
msgstr ""

#: ../../tutorials/blog.rst:254
# 482c2de7b89d4555b89634a5318bcd78
msgid "To grab the latest my\\_blog posts, we'll use ``elgg_list_entities``. Note that this function returns only the posts that the user can see, so access restrictions are handled transparently:"
msgstr ""

#: ../../tutorials/blog.rst:265
# a14c8a13e663470895bf5a6446f14a54
msgid "The function \\`elgg\\_list\\_entities\\` (and its cousins) also transparently handle pagination, and even create an RSS feeds for your my\\_blogs if you have defined these views."
msgstr ""

#: ../../tutorials/blog.rst:269
# ed6d8d6d4a56477da8da0ca3338261a9
msgid "Finally, we'll draw the page:"
msgstr ""

#: ../../tutorials/blog.rst:277
# cf645aed78224310ab09500840e569b8
msgid "We will then need to modify our my\\_blog page handler to grab the new page when the URL is set to ``/my_blog/all``. So, your new ``my_blog_page_handler()`` function in start.php should look like:"
msgstr ""

#: ../../tutorials/blog.rst:298
# 0797f796f3c44ef98945c5014972d990
msgid "Now, if the URL contains just ``/my_blog`` or ``/my_blog/all``, the user will see an \"All Site Blogs\" page."
msgstr ""

#: ../../tutorials/blog.rst:302
# ad3625ce51254145a53e26a372d4b6a3
msgid "A user's blog page"
msgstr ""

#: ../../tutorials/blog.rst:304
# b90a63c4e16d4eef82b6ff90e5e8894a
msgid "If we grab the Global Unique IDentifier (GUID) of the logged in user, we can limit the my\\_blog posts to those posted by specifying the owner\\_guid argument in the list function above."
msgstr ""

#: ../../tutorials/blog.rst:318
# 0d13e58173574c1a8dfa62df4fcef73a
msgid "The end"
msgstr ""

#: ../../tutorials/blog.rst:320
# a4d4bfa77317498b96fcf9460c3a0d27
msgid "There's much more that could be done for this plugin, but hopefully this gives you a good idea of how to get started with your own."
msgstr ""

#: ../../tutorials/hello_world.rst:2
# bd8acf90271545a2a6644fb852dcb02a
msgid "Hello world"
msgstr ""

#: ../../tutorials/hello_world.rst:4
# 585cd972573d4762bc7f86e0ea35f0cf
msgid "This tutorial shows you how to build a simple plugin that adds a new page and prints the text \"Hello world\" on it."
msgstr ""

#: ../../tutorials/hello_world.rst:7
# b4a090160eba442f87ee5f73f9808db7
msgid "In this tutorial we will use the address ``http://www.mysite.com/`` as an example. While developing the plugin you should use the address of your own site instead of the example address."
msgstr ""

#: ../../tutorials/hello_world.rst:12
# 9c9b2e92c9974732a1fbb6ea7bc966b7
msgid "Required files"
msgstr ""

#: ../../tutorials/hello_world.rst:13
# 2bf498196b5c465e9886334a663c3961
msgid "First of all you need a directory that will hold all the files required by the plugin. Go to the ``mod`` directory of your Elgg site and create there a directory with the name ``hello_world``."
msgstr ""

#: ../../tutorials/hello_world.rst:18
# 7f313e9ad91747cfa1cac17cec287053
msgid "Go to the ``hello_world`` directory and create these two files inside it:"
msgstr ""

#: ../../tutorials/hello_world.rst:18
#: ../../tutorials/indexpage.rst:7
# 5566892cf2114bb3842d7a359c3b6ea2
# c3677047dfd04d88a31433ce76f01afb
msgid "start.php"
msgstr ""

#: ../../tutorials/hello_world.rst:19
# 203ec456fa1447a88288d398a83b5c29
msgid "manifest.xml"
msgstr ""

#: ../../tutorials/hello_world.rst:21
# 5737dbf914eb467d994bd6f17b27d846
msgid "Copy this to the ``manifest.xml`` file:"
msgstr ""

#: ../../tutorials/hello_world.rst:39
# 536dcf5b410e4fb39944d4934bb51bd1
msgid "Add your name to the ``<author></author>`` element."
msgstr ""

#: ../../tutorials/hello_world.rst:41
# 21b4fa1df06244e2ae17824686fe4ffa
msgid "The plugin has now the minimum requirements for your site to recognize it. Log in to your site as an administrator and access the plugins page at the administration panel. By default the plugin is at the bottom of the plugins list. Click the \"Activate\" button to start it."
msgstr ""

#: ../../tutorials/hello_world.rst:0
# dd25a1d776b14679b2c462561b49fdbb
msgid "The Hello world plugin has appeared to the bottom of the plugin list"
msgstr ""

#: ../../tutorials/hello_world.rst:53
# f7c738acdeb74c6a9a1c7548771e231f
msgid "Initializing the plugin"
msgstr ""

#: ../../tutorials/hello_world.rst:55
# 4b076762b8fa4ac98bd45ad59809d80d
msgid "The next step is to add some actual features. Open the ``start.php`` and copy this to it:"
msgstr ""

#: ../../tutorials/hello_world.rst:68
# 595b4f42482e40d887a70699dcbee4bf
msgid "This piece of code tells Elgg that it should call the function ``hello_world_init()`` when the Elgg core system is initiated."
msgstr ""

#: ../../tutorials/hello_world.rst:74
# 9cccb1480415409595871b3553d3f44a
msgid "The next step is to register a page handler which has the purpose of handling request that users make to the URL http://www.mysite.com/hello/."
msgstr ""

#: ../../tutorials/hello_world.rst:77
# 1f44b7e8273c40948ea5e927ac5fa896
msgid "Update the ``start.php`` to look like this:"
msgstr ""

#: ../../tutorials/hello_world.rst:101
# 4b9d4da409804fb2b3ed73c6e0ba68ae
msgid "The call to ``elgg_register_page_handler()`` tells Elgg that it should call the function ``hello_world_page_handler()`` when user goes to your site and has \"hello\" at the end of the URL."
msgstr ""

#: ../../tutorials/hello_world.rst:105
# b16a1ad0ab0249538e4d38086f2919ad
msgid "The ``hello_world_page_handler()`` makes it possible for the users to access the actual page. Inside the function we first give an array of parameters to the ``elgg_view_layout()`` function."
msgstr ""

#: ../../tutorials/hello_world.rst:111
# 4e29e817e5d14c08b154dd85c31abdb7
msgid "The parameters include:"
msgstr ""

#: ../../tutorials/hello_world.rst:110
# 67a73ccc83cc48ae88043dda26b986c0
msgid "The title of the page"
msgstr ""

#: ../../tutorials/hello_world.rst:111
# 36030f33e3f24cacaab96b7b4a33546f
msgid "The contents of the page"
msgstr ""

#: ../../tutorials/hello_world.rst:112
# d19d9c01e27c49a5a0fc0a4498f67c9d
msgid "Filter which is left empty because there's currently nothing to filter"
msgstr ""

#: ../../tutorials/hello_world.rst:114
# 0d2f5516adf84dc4b919cdc7b8712e25
msgid "This creates the basic layout for the page. The layout is then run through ``elgg_view_page()`` which assembles and outputs the full page."
msgstr ""

#: ../../tutorials/hello_world.rst:117
# fe322fd3ab234452b2e60f9dbea42b6f
msgid "You can now go to the address http://www.mysite.com/hello/ and you should see the page."
msgstr ""

#: ../../tutorials/hello_world.rst:0
# 137a523336bc4e81bdc523396f85c414
msgid "Elgg is now routing the URL http://www.mysite.com/hello/ to the page you created."
msgstr ""

#: ../../tutorials/index.rst:2
# 8817bbee6da34fc1b69043b1776b28c2
msgid "Plugin Tutorials"
msgstr ""

#: ../../tutorials/index.rst:4
# 9cd80bb652ea426c8641e419f688c3e4
msgid "Walk through all the required steps in order to create your own plugins."
msgstr ""

#: ../../tutorials/index.rst:6
# fdf5454ac5a0409798ee994dfcb82eb5
msgid "The instructions are detailed enough that you don't need much previous experience on plugin development."
msgstr ""

#: ../../tutorials/indexpage.rst:2
# 01463c40734f4deda8890e51f9f57656
msgid "Customizing the Home Page"
msgstr ""

#: ../../tutorials/indexpage.rst:4
# 4132794fd1f44b8380280386197bd5a9
msgid "Overwrite the default index page on your Elgg install."
msgstr ""

#: ../../tutorials/indexpage.rst:9
# d9e0598642a74605b9e15d62d952a9e8
msgid "Register a function for the plugin hook called ``index, system`` that returns ``true``. This tells Elgg to assume that another front page has been drawn so it doesn't display the default page."
msgstr ""

#: ../../tutorials/indexpage.rst:12
# 77c84b9a4fb44840a1d87909aace6173
msgid "Inside start.php you will need something like the following:"
msgstr ""

#: ../../tutorials/indexpage.rst:31
# eb6272ee5cfa4eafa0dc056ca03a3fe8
msgid "pages/index.php"
msgstr ""

#: ../../tutorials/indexpage.rst:33
# 5f1b30f79cfb4ab3926c883a85bf9909
msgid "Then implement the page handler script (/pluginname/pages/index.php) to generate the desired output. Anything output from this script will become your new home page."
msgstr ""

#: ../../tutorials/widget.rst:2
# 701b474192704192a5bf2fbdad460f93
msgid "Basic Widget"
msgstr ""

#: ../../tutorials/widget.rst:4
# 0dc56e834dad44888afb6c4cedb72347
msgid "Create a widget that will display “Hello, World!” and optionally any text the user wants."
msgstr ""

#: ../../tutorials/widget.rst:6
# 0858d0145d204346b7572671356c5d48
msgid "In Elgg, widgets are those components that you can drag onto your profile or admin dashboard."
msgstr ""

#: ../../tutorials/widget.rst:8
# 64439d9703134cfca78935a2cc526aa3
msgid "This tutorial assumes you are familiar with basic Elgg concepts such as:"
msgstr ""

#: ../../tutorials/widget.rst:10
# e082ee40893a403f90d18e8fa42773de
msgid ":doc:`/guides/views`"
msgstr ""

#: ../../tutorials/widget.rst:11
# 4c81dfacea2c4c09934612acf1f9ad92
msgid ":doc:`/admin/plugins`."
msgstr ""

#: ../../tutorials/widget.rst:13
# aa1a03f3dd364cdc994d3da6abe7c0a7
msgid "You should review those if you get confused along the way."
msgstr ""

#: ../../tutorials/widget.rst:16
# 8adf72420b8e4b7abd5832734bb490f2
msgid "Registering your plugin"
msgstr ""

#: ../../tutorials/widget.rst:18
# 56e82c745813408faf5b7d78978c2cf3
msgid "Plugins are always placed in the ``/mod`` directory. Create a subdirectory there called ``hello``. This will be the name of your plugin and will show up in the Plugins Administration section of Elgg by this name."
msgstr ""

#: ../../tutorials/widget.rst:23
# da54a6e4b54b453693641e3e6b03f986
msgid "In ``/mod/hello``, create an empty file called ``start.php``. If this file exists, Elgg will load your plugin. Otherwise, you will see a misconfigured plugin error. Go to the admin section of your Elgg install and enable your plugin. Click on the “more info” link under your plugin name. You will notice that nothing happens."
msgstr ""

#: ../../tutorials/widget.rst:30
# 2348db1e457c4672b9e0a260ba7f2739
msgid "Copy the ``manifest.xml`` file from one of the plugins in your elgg install into ``/mod/hello``."
msgstr ""

#: ../../tutorials/widget.rst:31
# d0844104498f428b85cdcd59927ee83a
msgid "Update its values so you are listed as the author and change the description to describe this new plugin."
msgstr ""

#: ../../tutorials/widget.rst:32
# d161ddbdb4084369a77bcf31b10c3930
msgid "Reload the Tools Administration page in your browser and check “more info” again."
msgstr ""

#: ../../tutorials/widget.rst:33
# f899fa62dfed43cabf7d242a5683084e
msgid "It will now display the information that you've entered."
msgstr ""

#: ../../tutorials/widget.rst:36
# 68e2cf66f51b44ee983893cf40670471
msgid "Adding the widget view code"
msgstr ""

#: ../../tutorials/widget.rst:38
# 99425961d08e4cd39131c5e039f2c0b2
msgid "Elgg automatically scans particular directories under plugins looking for particular files. :doc:`/guides/views` make it easy to add your display code or do other things like override default Elgg behavior. For now, we will just be adding the view code for your widget. Create a file at ``/mod/hello/views/default/widgets/helloworld/content.php``. “helloworld” will be the name of your widget within the hello plugin. In this file add the code:"
msgstr ""

#: ../../tutorials/widget.rst:51
# b1768d0409a6459ea65aca8c236e8969
msgid "This will add these words to the widget canvas when it is drawn. Elgg takes care of loading the widget."
msgstr ""

#: ../../tutorials/widget.rst:55
# e618157a1c664d96ab07cd5d49cade09
msgid "Registering your widget"
msgstr ""

#: ../../tutorials/widget.rst:57
# eb5103107b1c467ba80d35b8b36db45e
msgid "Elgg needs to be told explicitly that the plugin contains a widget so that it will scan the widget views directory. This is done by calling the elgg\\_register\\_widget\\_type() function. Edit ``/mod/hello/start.php``. In it add these lines:"
msgstr ""

#: ../../tutorials/widget.rst:72
# f8557a68e37749dd9b2dd9845d4392fb
msgid "Now go to your profile page using a web browser and add the “hello, world” widget. It should display “Hello, world!”."
msgstr ""

#: ../../tutorials/widget.rst:77
# ed2793fdd8a84ef488436746cddd682a
msgid "For real widgets, it is always a good idea to support :doc:`/guides/i18n`."
msgstr ""

#: ../../tutorials/widget.rst:80
# 77ec38e7f2874dde80b3aa9f3ed2e19b
msgid "Allow user customization"
msgstr ""

#: ../../tutorials/widget.rst:82
# 3770fa13ddb84233b5817c9a5123750e
msgid "Click on the edit link on the toolbar of the widget that you've created. You will notice that the only control it gives you by default is over access (over who can see the widget)."
msgstr ""

#: ../../tutorials/widget.rst:86
# a21b4808e0cd40f99966a8bf1aa2495e
msgid "Suppose you want to allow the user to control what greeting is displayed in the widget. Just as Elgg automatically loads ``content.php`` when viewing a widget, it loads ``edit.php`` when a user attempts to edit a widget. In ``/mod/hello/views/default/widgets/helloworld/``, create a file named ``edit.php``. In this file, add the following code:"
msgstr ""

#: ../../tutorials/widget.rst:109
# 4dab78ed305b4ebb9f732d12d6da294f
msgid "Notice the relationship between the values passed to the 'name' and the 'value' fields of input/text. The name of the input text box is ``params[message]`` because Elgg will automatically handle widget variables put in the array ``params``. The actual php variable name will be ``message``. If we wanted to use the field ``greeting`` instead of ``message`` we would pass the values ``params[greeting]`` and ``$widget->greeting`` respectively."
msgstr ""

#: ../../tutorials/widget.rst:117
# a7409b0408104e919c2e3b61c06cea41
msgid "The reason we set the 'value' option of the array is so that the edit view remembers what the user typed in the previous time he changed the value of his message text."
msgstr ""

#: ../../tutorials/widget.rst:121
# 0c3949f7570741249a4ce74c8e2d8021
msgid "Now to display the user's message we need to modify content.php to use this *message* variable. Edit content.php and change it to:"
msgstr ""

#: ../../tutorials/widget.rst:133
# 2c64d2703f8b4ec1bebb5ea1c01b9d28
msgid "You should now be able to enter a message in the text box and see it appear in the widget."
msgstr ""

#: ../../tutorials/wysiwyg.rst:2
# a98c044c213e4181ab2765ba78833e84
msgid "Integrating a Rich Text Editor"
msgstr ""

#: ../../tutorials/wysiwyg.rst:4
# b217e98bf4554135ba4071d361aabd3c
msgid "Build your own wysiwyg plugin."
msgstr ""

#: ../../tutorials/wysiwyg.rst:6
# 1a54dcb113f440529165b81079d94ec4
msgid "Elgg is bundled with a plugin for CKEditor_, and previously shipped with TinyMCE_ support. However, if you have a wysiwyg that you prefer, you could use this tutorial to help you build your own."
msgstr ""

#: ../../tutorials/wysiwyg.rst:12
# 30cf564e45b441cbaf0763d41887419e
msgid "All forms in Elgg should try to use the provided input views located in ``views/default/input``. If these views are used, then it is simple for plugin authors to replace a view, in this case longtext.php, with their wysiwyg."
msgstr ""

#: ../../tutorials/wysiwyg.rst:17
# 06bfee1b66314a7d80157b79c2441ca7
msgid "Create your plugin skeleton"
msgstr ""

#: ../../tutorials/wysiwyg.rst:19
# cb52684c513c44f8844d3391ea03adbb
msgid "You will need to create your plugin and give it a start.php file where the plugin gets initialized, as well as a manifest.xml file to tell the Elgg engine about your plugin."
msgstr ""

#: ../../tutorials/wysiwyg.rst:22
# 8678e60203084277aa5b47a40ac4b457
msgid "Read more in the guide about :doc:`/guides/plugins`."
msgstr ""

#: ../../tutorials/wysiwyg.rst:25
# b60a9c7d03a24ef481fb4f52d5863d54
msgid "Add the WYSIWYG library code"
msgstr ""

#: ../../tutorials/wysiwyg.rst:27
# 469882e190164a52b3258c33ff3a95ba
msgid "Now you need to upload TinyMCE into a directory in your plugin. We strongly encourage you to put third party libraries in a “vendors” directory, as that is standard practice in Elgg plugins and will make your plugin much more approachable by other developers::"
msgstr ""

#: ../../tutorials/wysiwyg.rst:35
# 4bb267ddd4fc489bb85dd9cc0a1a719d
msgid "Tell Elgg when and how to load TinyMCE"
msgstr ""

#: ../../tutorials/wysiwyg.rst:37
# ddece362ee844d7db4f5c3d64bbe84b9
msgid "Now that you have:"
msgstr ""

#: ../../tutorials/wysiwyg.rst:39
# 927e3bf7c0ba41df8bc0c5a5956dd5b5
msgid "created your start file"
msgstr ""

#: ../../tutorials/wysiwyg.rst:40
# e3228dee5385489cb513f88828b9fecd
msgid "intialized the plugin"
msgstr ""

#: ../../tutorials/wysiwyg.rst:41
# 92c11a1c26194c5bbccd49dee27ea438
msgid "uploaded the wysiwyg code"
msgstr ""

#: ../../tutorials/wysiwyg.rst:43
# 1ee7b578df3346bfb7a6d329b393dde8
msgid "It is time to tell Elgg how to apply TinyMCE to longtext fields."
msgstr ""

#: ../../tutorials/wysiwyg.rst:45
# 4e21822f3ff94272890ba8266e8b005e
msgid "We're going to do that by extending the input/longtext view and including some javascript. Create a view tinymce/longtext and add the following code:"
msgstr ""

#: ../../tutorials/wysiwyg.rst:81
# 5d8ded6c35234ae3bc61438daab4a9c6
msgid "Then, in your plugin's init function, extend the input/longtext view"
msgstr ""

#: ../../tutorials/wysiwyg.rst:89
# e5a43a5b3c9d4349bebd6e7190943057
msgid "That's it! Now every time someone uses input/longtext, TinyMCE will be loaded and applied to that textarea."
msgstr ""

