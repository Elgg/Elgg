# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, Various
# This file is distributed under the same license as the Elgg package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Elgg master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-27 15:35+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../guides/accessibility.rst:2
msgid "Accessibility"
msgstr ""

#: ../../guides/accessibility.rst:4
msgid "This page aims to list and document accessibility rules and best practices, to help core and plugins developpers to make Elgg the most accessible social engine framework that everyone dreams of."
msgstr ""

#: ../../guides/accessibility.rst:8
msgid "This is an ongoing work, please contribute on `Github <https://github.com/Elgg/Elgg>`_ if you have some skills in this field!"
msgstr ""

#: ../../guides/accessibility.rst:11
msgid "Resources + references"
msgstr ""

#: ../../guides/accessibility.rst:13
msgid "`Official WCAG Accessibility Guidelines Overview <http://www.w3.org/WAI/WCAG20/glance/>`_"
msgstr ""

#: ../../guides/accessibility.rst:14
msgid "`Official WCAG Accessibility Guidelines <http://www.w3.org/TR/WCAG/>`_"
msgstr ""

#: ../../guides/accessibility.rst:15
msgid "`Resources for planning and implementing for accessibility <http://www.w3.org/WAI/managing>`_"
msgstr ""

#: ../../guides/accessibility.rst:16
msgid "`Practical tips from the W3C for improving accessibility <http://www.w3.org/WAI/impl/improving>`_"
msgstr ""

#: ../../guides/accessibility.rst:17
msgid "`Preliminary review of websites for accessibility <http://www.w3.org/WAI/eval/preliminary.html>`_"
msgstr ""

#: ../../guides/accessibility.rst:18
msgid "`Tools for checking the accessibility of websites <http://www.w3.org/WAI/ER/tools/>`_"
msgstr ""

#: ../../guides/accessibility.rst:19
msgid "`List of practical techniques for implementing accessibility <http://www.w3.org/TR/WCAG20-TECHS/Overview.html#contents>`_ (It would be great if someone could go through this and filter out all the ones that are relevant to Elgg)"
msgstr ""

#: ../../guides/accessibility.rst:22
msgid "Tips for implementing accessibility"
msgstr ""

#: ../../guides/accessibility.rst:24
msgid "All accessibility-related tickets reported to trac should be tagged with \"a11y\", short for \"accessibility\""
msgstr ""

#: ../../guides/accessibility.rst:25
msgid "Use core views such as ``output/*``, and ``input/*`` to generate markup, since we can bake a11y concerns into these views"
msgstr ""

#: ../../guides/accessibility.rst:26
msgid "All images should have a descriptive ``alt`` attribute. Spacer or purely decorative graphics should have blank ``alt`` attributes"
msgstr ""

#: ../../guides/accessibility.rst:27
msgid "All ``<a>`` tags should have text or an accessible image inside. Otherwise screen readers will have to read the URL, which is a poor experience ``<a>`` tags should contain descriptive text, if possible, as opposed to generic text like \"Click here\""
msgstr ""

#: ../../guides/accessibility.rst:28
msgid "Markup should be valid"
msgstr ""

#: ../../guides/accessibility.rst:29
msgid "Themes should not reset \"outline\" to nothing. ``:focus`` deserves a special visual treatment so that handicapped users can know where they are"
msgstr ""

#: ../../guides/accessibility.rst:32
msgid "Tips for testing accessibility"
msgstr ""

#: ../../guides/accessibility.rst:34
msgid "Use the tools linked to from the resources section. `Example report for community.elgg.org on June 16, 2012 <http://try.powermapper.com/Reports/a6276098-0883-4d04-849e-8c05999812f2/report/map.htm>`_"
msgstr ""

#: ../../guides/accessibility.rst:35
msgid "Try different font-size/zoom settings in your browser and make sure the theme remains usable"
msgstr ""

#: ../../guides/accessibility.rst:36
msgid "Turn off css to make sure the sequential order of the page makes sense"
msgstr ""

#: ../../guides/accessibility.rst:39
msgid "Documentation objectives and principles"
msgstr ""

#: ../../guides/accessibility.rst:41
msgid "Main accessibility rules"
msgstr ""

#: ../../guides/accessibility.rst:42
msgid "collect and document best practices"
msgstr ""

#: ../../guides/accessibility.rst:43
msgid "Provide code examples"
msgstr ""

#: ../../guides/accessibility.rst:44
msgid "Keep the document simple and usable"
msgstr ""

#: ../../guides/accessibility.rst:45
msgid "Make it usable for both beginner developpers and experts (from most common and easiest changes to elaborate techniques)"
msgstr ""

#: ../../guides/actions.rst:2
msgid "Forms + Actions"
msgstr ""

#: ../../guides/actions.rst:4
msgid "Create, update, or delete content."
msgstr ""

#: ../../guides/actions.rst:6
msgid "Elgg forms submit to actions. Actions define the behavior for form submission."
msgstr ""

#: ../../guides/actions.rst:8
msgid "This guide assumes basic familiarity with:"
msgstr ""

#: ../../guides/actions.rst:10
#: ../../guides/themes.rst:9
msgid ":doc:`/admin/plugins`"
msgstr ""

#: ../../guides/actions.rst:11
#: ../../guides/themes.rst:10
msgid ":doc:`views`"
msgstr ""

#: ../../guides/actions.rst:12
msgid ":doc:`i18n`"
msgstr ""

#: ../../guides/actions.rst:0
#: ../../guides/ajax.rst:0
#: ../../guides/database.rst:0
#: ../../guides/events-list.rst:0
#: ../../guides/guidelines.rst:0
#: ../../guides/hooks-list.rst:0
#: ../../guides/javascript.rst:0
#: ../../guides/menus.rst:0
#: ../../guides/notifications.rst:0
#: ../../guides/plugins/dependencies.rst:0
#: ../../guides/themes.rst:0
#: ../../guides/upgrading.rst:0
#: ../../guides/views.rst:0
#: ../../guides/web-services.rst:0
#: ../../guides/widgets.rst:0
msgid "Contents"
msgstr ""

#: ../../guides/actions.rst:19
msgid "Registering actions"
msgstr ""

#: ../../guides/actions.rst:21
msgid "Actions must be registered before use. Use ``elgg_register_action`` for this:"
msgstr ""

#: ../../guides/actions.rst:27
msgid "The ``mod/example/actions/example.php`` script will now be run whenever a form is submitted to ``http://localhost/elgg/action/example``."
msgstr ""

#: ../../guides/actions.rst:29
msgid "A stumbling point for many new developers is the URL for actions. The URL always uses ``/action/`` (singular) and never ``/actions/`` (plural). However, action script files are usually saved under the directory ``/actions/`` (plural) and always have an extension."
msgstr ""

#: ../../guides/actions.rst:33
msgid "Permissions"
msgstr ""

#: ../../guides/actions.rst:34
msgid "By default, actions are only available to logged in users."
msgstr ""

#: ../../guides/actions.rst:36
msgid "To make an action available to logged out users, pass ``\"public\"`` as the third parameter:"
msgstr ""

#: ../../guides/actions.rst:42
msgid "To restrict an action to only administrators, pass ``\"admin\"`` for the last parameter:"
msgstr ""

#: ../../guides/actions.rst:50
msgid "Writing action files"
msgstr ""

#: ../../guides/actions.rst:52
msgid "Use the ``get_input`` function to get access to request parameters:"
msgstr ""

#: ../../guides/actions.rst:58
msgid "You can then use the :doc:`database` api to load entities and perform actions on them accordingly."
msgstr ""

#: ../../guides/actions.rst:60
msgid "To indicate a successful action, use ``elgg_ok_response()``. This function accepts data that you want to make available to the client for XHR calls (this data will be ignored for non-XHR calls)"
msgstr ""

#: ../../guides/actions.rst:78
msgid "To indicate an error, use ``elgg_error_response()``"
msgstr ""

#: ../../guides/actions.rst:97
msgid "Customizing actions"
msgstr ""

#: ../../guides/actions.rst:99
msgid "Before executing any action, Elgg triggers a hook:"
msgstr ""

#: ../../guides/actions.rst:105
msgid "Where ``$action`` is the action being called. If the hook returns ``false`` then the action will not be executed."
msgstr ""

#: ../../guides/actions.rst:108
msgid "Example: Captcha"
msgstr ""

#: ../../guides/actions.rst:110
msgid "The captcha module uses this to intercept the ``register`` and ``user/requestnewpassword`` actions and redirect them to a function which checks the captcha code. This check returns ``true`` if valid or ``false`` if not (which prevents the associated action from executing)."
msgstr ""

#: ../../guides/actions.rst:112
msgid "This is done as follows:"
msgstr ""

#: ../../guides/actions.rst:134
msgid "This lets a plugin extend an existing action without the need to replace the whole action. In the case of the captcha plugin it allows the plugin to provide captcha support in a very loosely coupled way."
msgstr ""

#: ../../guides/actions.rst:138
msgid "Actions available in core"
msgstr ""

#: ../../guides/actions.rst:141
msgid "``entity/delete``"
msgstr ""

#: ../../guides/actions.rst:143
msgid "If your plugin does not implement any custom logic when deleting an entity, you can use bundled delete action"
msgstr ""

#: ../../guides/actions.rst:157
msgid "You can customize the success message keys for your entity type and subtype, using ``\"entity:delete:$type:$subtype:success\"`` and ``\"entity:delete:$type:success\"`` keys."
msgstr ""

#: ../../guides/actions.rst:170
msgid "Forms"
msgstr ""

#: ../../guides/actions.rst:172
msgid "To output a form, use the elgg_view_form function like so:"
msgstr ""

#: ../../guides/actions.rst:178
msgid "Doing this generates something like the following markup:"
msgstr ""

#: ../../guides/actions.rst:189
msgid "Elgg does some things automatically for you when you generate forms this way:"
msgstr ""

#: ../../guides/actions.rst:191
msgid "It sets the action to the appropriate URL based on the name of the action you pass to it"
msgstr ""

#: ../../guides/actions.rst:192
msgid "It adds some anti-csrf tokens (``__elgg_ts`` and ``__elgg_token``) to help keep your actions secure"
msgstr ""

#: ../../guides/actions.rst:193
msgid "It automatically looks for the body of the form in the ``forms/example`` view."
msgstr ""

#: ../../guides/actions.rst:195
msgid "Put the content of your form in your plugin’s ``forms/example`` view:"
msgstr ""

#: ../../guides/actions.rst:206
msgid "Now when you call ``elgg_view_form('example')``, Elgg will produce:"
msgstr ""

#: ../../guides/actions.rst:224
msgid "Inputs"
msgstr ""

#: ../../guides/actions.rst:226
msgid "To render a form input, use one of the bundled input views, which cover all standard HTML input elements. See individual view files for a list of accepted parameters."
msgstr ""

#: ../../guides/actions.rst:243
msgid "The above example will render a dropdown select input:"
msgstr ""

#: ../../guides/actions.rst:252
msgid "To ensure consistency in field markup, use ``elgg_view_field()``, which accepts all the parameters of the input being rendered, as well as ``#label`` and ``#help`` parameters (both of which are optional and accept HTML or text)."
msgstr ""

#: ../../guides/actions.rst:271
msgid "The above will generate the following markup:"
msgstr ""

#: ../../guides/actions.rst:288
msgid "Input types"
msgstr ""

#: ../../guides/actions.rst:290
msgid "A list of bundled input types/views:"
msgstr ""

#: ../../guides/actions.rst:292
msgid "``input/text`` - renders a text input ``<input type=\"text\">``"
msgstr ""

#: ../../guides/actions.rst:293
msgid "``input/plaintext`` - renders a textarea ``<textarea></textarea>``"
msgstr ""

#: ../../guides/actions.rst:294
msgid "``input/longtext`` - renders a WYSIWYG text input"
msgstr ""

#: ../../guides/actions.rst:295
msgid "``input/url`` - renders a url input ``<input type=\"url\">``"
msgstr ""

#: ../../guides/actions.rst:296
msgid "``input/email`` - renders an email input ``<input type=\"email\">``"
msgstr ""

#: ../../guides/actions.rst:297
msgid "``input/checkbox`` - renders a single checkbox ``<input type=\"checkbox\">``"
msgstr ""

#: ../../guides/actions.rst:298
msgid "``input/checkboxes`` - renders a set of checkboxes with the same name"
msgstr ""

#: ../../guides/actions.rst:299
msgid "``input/radio`` - renders one or more radio buttons ``<input type=\"radio\">``"
msgstr ""

#: ../../guides/actions.rst:300
msgid "``input/submit`` - renders a submit button ``<input type=\"submit\">``"
msgstr ""

#: ../../guides/actions.rst:301
msgid "``input/button`` - renders a button ``<button></button>``"
msgstr ""

#: ../../guides/actions.rst:302
msgid "``input/file`` - renders a file input ``<input type=\"file\">``"
msgstr ""

#: ../../guides/actions.rst:303
msgid "``input/select`` - renders a select input ``<select></select>``"
msgstr ""

#: ../../guides/actions.rst:304
msgid "``input/hidden`` - renders a hidden input ``<input type=\"hidden\">``"
msgstr ""

#: ../../guides/actions.rst:305
msgid "``input/password`` - renders a password input ``<input type=\"password\">``"
msgstr ""

#: ../../guides/actions.rst:306
msgid "``input/number`` - renders a number input ``<input type=\"number\">``"
msgstr ""

#: ../../guides/actions.rst:307
msgid "``input/date`` - renders a jQuery datepicker"
msgstr ""

#: ../../guides/actions.rst:309
msgid "``input/access`` - renders an Elgg access level select"
msgstr ""

#: ../../guides/actions.rst:310
msgid "``input/tags`` - renders an Elgg tags input"
msgstr ""

#: ../../guides/actions.rst:311
msgid "``input/autocomplete`` - renders an Elgg entity autocomplete"
msgstr ""

#: ../../guides/actions.rst:312
msgid "``input/captcha`` - placeholder view for plugins to extend"
msgstr ""

#: ../../guides/actions.rst:313
msgid "``input/friendspicker`` - renders an Elgg friend picker"
msgstr ""

#: ../../guides/actions.rst:314
msgid "``input/userpicker`` - renders an Elgg user autocomplete"
msgstr ""

#: ../../guides/actions.rst:315
msgid "``input/location`` renders an Elgg location input"
msgstr ""

#: ../../guides/actions.rst:319
msgid "Files and images"
msgstr ""

#: ../../guides/actions.rst:321
msgid "Use the input/file view in your form’s content view."
msgstr ""

#: ../../guides/actions.rst:328
msgid "Set the enctype of the form to multipart/form-data:"
msgstr ""

#: ../../guides/actions.rst:336
msgid "In your action file, use the ``$_FILES`` global to access the uploaded file:"
msgstr ""

#: ../../guides/actions.rst:343
msgid "Sticky forms"
msgstr ""

#: ../../guides/actions.rst:345
msgid "Sticky forms are forms that retain user input if saving fails. They are \"sticky\" because the user's data \"sticks\" in the form after submitting, though it was never saved to the database. This greatly improves the user experience by minimizing data loss. Elgg 1.8 includes helper functions so you can make any form sticky."
msgstr ""

#: ../../guides/actions.rst:348
#: ../../guides/helpers.rst:2
msgid "Helper functions"
msgstr ""

#: ../../guides/actions.rst:350
msgid "Sticky forms are implemented in Elgg 1.8 by the following functions:"
msgstr ""

#: ../../guides/actions.rst:352
msgid "``elgg_make_sticky_form($name)`` Tells the engine to make all input on a form sticky."
msgstr ""

#: ../../guides/actions.rst:355
msgid "``elgg_clear_sticky_form($name)`` Tells the engine to discard all sticky input on a form."
msgstr ""

#: ../../guides/actions.rst:358
msgid "``elgg_is_sticky_form($name)`` Checks if $name is a valid sticky form."
msgstr ""

#: ../../guides/actions.rst:361
msgid "``elgg_get_sticky_values($name)`` Returns all sticky values saved for $name by elgg_make_sticky_form()."
msgstr ""

#: ../../guides/actions.rst:365
#: ../../guides/ajax.rst:13
#: ../../guides/i18n.rst:12
#: ../../guides/plugins/dependencies.rst:11
msgid "Overview"
msgstr ""

#: ../../guides/actions.rst:367
msgid "The basic flow of using sticky forms is: Call ``elgg_make_sticky_form($name)`` at the top of actions for forms you want to be sticky. Use ``elgg_is_sticky_form($name)`` and ``elgg_get_sticky_values($name)`` to get sticky values when rendering a form view. Call ``elgg_clear_sticky_form($name)`` after the action has completed successfully or after data has been loaded by ``elgg_get_sticky_values($name)``."
msgstr ""

#: ../../guides/actions.rst:373
msgid "Example: User registration"
msgstr ""

#: ../../guides/actions.rst:375
msgid "Simple sticky forms require little logic to determine the input values for the form. This logic is placed at the top of the form body view itself."
msgstr ""

#: ../../guides/actions.rst:377
msgid "The registration form view first sets default values for inputs, then checks if there are sticky values. If so, it loads the sticky values before clearing the sticky form:"
msgstr ""

#: ../../guides/actions.rst:392
msgid "The registration action sets creates the sticky form and clears it once the action is completed:"
msgstr ""

#: ../../guides/actions.rst:409
msgid "Example: Bookmarks"
msgstr ""

#: ../../guides/actions.rst:411
msgid "The bundled plugin Bookmarks' save form and action is an example of a complex sticky form."
msgstr ""

#: ../../guides/actions.rst:413
msgid "The form view for the save bookmark action uses ``elgg_extract()`` to pull values from the ``$vars`` array:"
msgstr ""

#: ../../guides/actions.rst:427
msgid "The page handler scripts prepares the form variables and calls ``elgg_view_form()`` passing the correct values:"
msgstr ""

#: ../../guides/actions.rst:435
msgid "Similarly, ``mod/bookmarks/pages/edit.php`` uses the same function, but passes the entity that is being edited as an argument:"
msgstr ""

#: ../../guides/actions.rst:447
msgid "The library file defines ``bookmarks_prepare_form_vars()``. This function accepts an ``ElggEntity`` as an argument and does 3 things:"
msgstr ""

#: ../../guides/actions.rst:449
msgid "Defines the input names and default values for form inputs."
msgstr ""

#: ../../guides/actions.rst:450
msgid "Extracts the values from a bookmark object if it's passed."
msgstr ""

#: ../../guides/actions.rst:451
msgid "Extracts the values from a sticky form if it exists."
msgstr ""

#: ../../guides/actions.rst:453
msgid "TODO: Include directly from lib/bookmarks.php"
msgstr ""

#: ../../guides/actions.rst:492
msgid "The save action checks the input, then clears the sticky form upon success:"
msgstr ""

#: ../../guides/actions.rst:506
#: ../../guides/ajax.rst:2
#: ../../guides/hooks-list.rst:192
msgid "Ajax"
msgstr ""

#: ../../guides/actions.rst:508
msgid "See the :doc:`Ajax guide</guides/ajax>` for instructions on calling actions from JavaScript."
msgstr ""

#: ../../guides/actions.rst:511
#: ../../guides/web-services.rst:27
msgid "Security"
msgstr ""

#: ../../guides/actions.rst:512
msgid "For enhanced security, all actions require an CSRF token. Calls to action URLs that do not include security tokens will be ignored and a warning will be generated."
msgstr ""

#: ../../guides/actions.rst:514
msgid "A few views and functions automatically generate security tokens:"
msgstr ""

#: ../../guides/actions.rst:522
msgid "In rare cases, you may need to generate tokens manually:"
msgstr ""

#: ../../guides/actions.rst:529
msgid "You can also access the tokens from javascript:"
msgstr ""

#: ../../guides/actions.rst:536
msgid "These are refreshed periodically so should always be up-to-date."
msgstr ""

#: ../../guides/actions.rst:540
msgid "Security Tokens"
msgstr ""

#: ../../guides/actions.rst:541
msgid "On occasion we need to pass data through an untrusted party or generate an \"unguessable token\" based on some data. The industry-standard `HMAC <http://security.stackexchange.com/a/20301/4982>`_ algorithm is the right tool for this. It allows us to verify that received data were generated by our site, and were not tampered with. Note that even strong hash functions like SHA-2 should *not* be used without HMAC for these tasks."
msgstr ""

#: ../../guides/actions.rst:546
msgid "Elgg provides ``elgg_build_hmac()`` to generate and validate HMAC message authentication codes that are unguessable without the site's private key."
msgstr ""

#: ../../guides/actions.rst:571
msgid "Note: If you use a non-string as HMAC data, you must use types consistently. Consider the following:"
msgstr ""

#: ../../guides/actions.rst:585
msgid "Signed URLs"
msgstr ""

#: ../../guides/actions.rst:587
msgid "Signed URLs offer a limited level of security for situations where action tokens are not suitable, for example when sending a confirmation link via email. URL signatures verify that the URL has been generated by your Elgg installation (using site secret) and that the URL query elements were not tampered with."
msgstr ""

#: ../../guides/actions.rst:589
msgid "URLs a signed with an unguessable SHA-256 HMAC key. See `Security Tokens`_ for more details."
msgstr ""

#: ../../guides/actions.rst:604
msgid "Signed URLs do not offer CSRF protection and should not be used instead of action tokens."
msgstr ""

#: ../../guides/ajax.rst:4
msgid "The ``elgg/Ajax`` AMD module (introduced in Elgg 2.1) provides a set of methods for communicating with the server in a concise and uniform way, which allows plugins to collaborate on the request data, the server response, and the returned client-side data."
msgstr ""

#: ../../guides/ajax.rst:6
msgid "Client and server code written for the legacy API should not need modification."
msgstr ""

#: ../../guides/ajax.rst:15
msgid "All the ajax methods perform the following:"
msgstr ""

#: ../../guides/ajax.rst:17
msgid "Client-side, the ``data`` option (if given as an object) is filtered by the hook ``ajax_request_data``."
msgstr ""

#: ../../guides/ajax.rst:18
msgid "The request is made to the server, either rendering a view or a form, calling an action, or loading a path."
msgstr ""

#: ../../guides/ajax.rst:19
msgid "The method returns a ``jqXHR`` object, which can be used as a Promise."
msgstr ""

#: ../../guides/ajax.rst:20
msgid "Server-echoed content is turned into a response object (``Elgg\\Services\\AjaxResponse``) containing a string (or a JSON-parsed value)."
msgstr ""

#: ../../guides/ajax.rst:21
msgid "The response object is filtered by the hook ``ajax_response``."
msgstr ""

#: ../../guides/ajax.rst:22
msgid "The response object is used to create the HTTP response."
msgstr ""

#: ../../guides/ajax.rst:23
msgid "Client-side, the response data is filtered by the hook ``ajax_response_data``."
msgstr ""

#: ../../guides/ajax.rst:24
msgid "The ``jqXHR`` promise is resolved and any ``success`` callbacks are called."
msgstr ""

#: ../../guides/ajax.rst:26
msgid "More notes:"
msgstr ""

#: ../../guides/ajax.rst:28
msgid "All hooks have a type depending on the method and first argument. See below."
msgstr ""

#: ../../guides/ajax.rst:29
msgid "By default the ``elgg/spinner`` module is automatically used during requests."
msgstr ""

#: ../../guides/ajax.rst:30
msgid "User messages generated by ``system_message()`` and ``register_error()`` are collected and displayed on the client."
msgstr ""

#: ../../guides/ajax.rst:31
msgid "Elgg gives you a default error handler that shows a generic message if output fails."
msgstr ""

#: ../../guides/ajax.rst:32
msgid "PHP exceptions or denied resource return HTTP error codes, resulting in use of the client-side error handler."
msgstr ""

#: ../../guides/ajax.rst:33
msgid "The default HTTP method is ``POST`` for actions, otherwise ``GET``. You can set it via ``options.method``."
msgstr ""

#: ../../guides/ajax.rst:34
msgid "If a non-empty ``options.data`` is given, the default method is always ``POST``."
msgstr ""

#: ../../guides/ajax.rst:35
msgid "For client caching, set ``options.method`` to ``\"GET\"`` and ``options.data.elgg_response_ttl`` to the max-age you want in seconds."
msgstr ""

#: ../../guides/ajax.rst:36
msgid "To save system messages for the next page load, set ``options.data.elgg_fetch_messages = 0``. You may want to do this if you intent to redirect the user based on the response."
msgstr ""

#: ../../guides/ajax.rst:37
msgid "To stop client-side API from requiring AMD modules required server-side with ``elgg_require_js()``, set ``options.data.elgg_fetch_deps = 0``."
msgstr ""

#: ../../guides/ajax.rst:38
msgid "All methods accept a query string in the first argument. This is passed on to the fetch URL, but does not appear in the hook types."
msgstr ""

#: ../../guides/ajax.rst:41
msgid "Performing actions"
msgstr ""

#: ../../guides/ajax.rst:43
msgid "Consider this action:"
msgstr ""

#: ../../guides/ajax.rst:62
msgid "To execute it, use ``ajax.action('<action_name>', options)``:"
msgstr ""

#: ../../guides/ajax.rst:82
msgid "Notes for actions:"
msgstr ""

#: ../../guides/ajax.rst:86
msgid "All hooks have type ``action:<action_name>``. So in this case, three hooks will be triggered:"
msgstr ""

#: ../../guides/ajax.rst:85
msgid "client-side ``\"ajax_request_data\", \"action:do_math\"`` to filter the request data (before it's sent)"
msgstr ""

#: ../../guides/ajax.rst:86
msgid "server-side ``\"ajax_response\", \"action:do_math\"`` to filter the response (after the action runs)"
msgstr ""

#: ../../guides/ajax.rst:87
msgid "client-side ``\"ajax_response_data\", \"action:do_math\"`` to filter the response data (before the calling code receives it)"
msgstr ""

#: ../../guides/ajax.rst:88
msgid "CSRF tokens are added to the request data."
msgstr ""

#: ../../guides/ajax.rst:89
msgid "The default method is ``POST``."
msgstr ""

#: ../../guides/ajax.rst:90
msgid "An absolute action URL can be given in place of the action name."
msgstr ""

#: ../../guides/ajax.rst:91
msgid "Using ``forward()`` in an action simply sends the response. The URL given in not returned to the client."
msgstr ""

#: ../../guides/ajax.rst:93
msgid "When setting ``data``, use ``ajax.objectify($form)`` instead of ``$form.serialize()``. Doing so allows the ``ajax_request_data`` plugin hook to fire and other plugins to alter/piggyback on the request."
msgstr ""

#: ../../guides/ajax.rst:97
msgid "Fetching data"
msgstr ""

#: ../../guides/ajax.rst:99
msgid "Consider this PHP script that runs at ``http://example.org/myplugin_time``."
msgstr ""

#: ../../guides/ajax.rst:117
msgid "To fetch its output, use ``ajax.path('<url_path>', options)``."
msgstr ""

#: ../../guides/ajax.rst:132
msgid "Notes for paths:"
msgstr ""

#: ../../guides/ajax.rst:134
msgid "The 3 hooks (see Actions above) will have type ``path:<url_path>``. In this case, \"path:myplugin_time\"."
msgstr ""

#: ../../guides/ajax.rst:135
msgid "If the page handler echoes a regular web page, ``output`` will be a string containing the HTML."
msgstr ""

#: ../../guides/ajax.rst:136
msgid "An absolute URL can be given in place of the path name."
msgstr ""

#: ../../guides/ajax.rst:139
msgid "Fetching views"
msgstr ""

#: ../../guides/ajax.rst:141
msgid "Consider this view:"
msgstr ""

#: ../../guides/ajax.rst:160
msgid "Since it's a PHP file, we must register it for Ajax first:"
msgstr ""

#: ../../guides/ajax.rst:168
msgid "To fetch the view, use ``ajax.view('<view_name>', options)``:"
msgstr ""

#: ../../guides/ajax.rst:186
msgid "Notes for views:"
msgstr ""

#: ../../guides/ajax.rst:188
msgid "The 3 hooks (see Actions above) will have type ``view:<view_name>``. In this case, \"view:myplugin/get_link\"."
msgstr ""

#: ../../guides/ajax.rst:189
#: ../../guides/ajax.rst:226
msgid "``output`` will be a string with the rendered view."
msgstr ""

#: ../../guides/ajax.rst:190
msgid "The request data are injected into ``$vars`` in the view."
msgstr ""

#: ../../guides/ajax.rst:191
#: ../../guides/ajax.rst:228
msgid "If the request data contains ``guid``, the system sets ``$vars['entity']`` to the corresponding entity or ``false`` if it can't be loaded."
msgstr ""

#: ../../guides/ajax.rst:195
#: ../../guides/ajax.rst:239
msgid "In ajax views and forms, note that ``$vars`` can be populated by client input. The data is filtered like ``get_input()``, but may not be the type you're expecting or may have unexpected keys."
msgstr ""

#: ../../guides/ajax.rst:200
msgid "Fetching forms"
msgstr ""

#: ../../guides/ajax.rst:202
msgid "Consider we have a form view. We register it for Ajax:"
msgstr ""

#: ../../guides/ajax.rst:209
msgid "To fetch this using ``ajax.form('<action_name>', options)``."
msgstr ""

#: ../../guides/ajax.rst:223
msgid "Notes for forms:"
msgstr ""

#: ../../guides/ajax.rst:225
msgid "The 3 hooks (see Actions above) will have type ``form:<action_name>``. In this case, \"form:myplugin/add\"."
msgstr ""

#: ../../guides/ajax.rst:227
msgid "The request data are injected into ``$vars`` in your form view."
msgstr ""

#: ../../guides/ajax.rst:232
#: ../../guides/ajax.rst:513
msgid "Only the request data are passed to the requested form view (i.e. as a third parameter accepted by ``elgg_view_form()``). If you need to pass attributes or parameters of the form element rendered by the ``input/form`` view (i.e. normally passed as a second parameter to ``elgg_view_form()``), use the server-side hook ``view_vars, input/form``."
msgstr ""

#: ../../guides/ajax.rst:244
msgid "Piggybacking on an Ajax request"
msgstr ""

#: ../../guides/ajax.rst:246
msgid "The client-side ``ajax_request_data`` hook can be used to append or filter data being sent by an ``elgg/Ajax`` request."
msgstr ""

#: ../../guides/ajax.rst:248
msgid "Let's say when the view ``foo`` is fetched, we want to also send the server some data:"
msgstr ""

#: ../../guides/ajax.rst:264
msgid "This data can be read server-side via ``get_input('bar');``."
msgstr ""

#: ../../guides/ajax.rst:266
msgid "If data was given as a string (e.g. ``$form.serialize()``), the request hooks are not triggered."
msgstr ""

#: ../../guides/ajax.rst:269
msgid "Piggybacking on an Ajax response"
msgstr ""

#: ../../guides/ajax.rst:271
msgid "The server-side ``ajax_response`` hook can be used to append or filter response data (or metadata)."
msgstr ""

#: ../../guides/ajax.rst:273
msgid "Let's say when the view ``foo`` is fetched, we want to also send the client some additional data:"
msgstr ""

#: ../../guides/ajax.rst:293
msgid "To capture the metadata send back to the client, we use the client-side ``ajax_response`` hook:"
msgstr ""

#: ../../guides/ajax.rst:312
msgid "Only ``data.value`` is returned to the ``success`` function or available via the `Deferred` interface."
msgstr ""

#: ../../guides/ajax.rst:314
msgid "Elgg uses these same hooks to deliver system messages over ``elgg/Ajax`` responses."
msgstr ""

#: ../../guides/ajax.rst:317
msgid "Handling errors"
msgstr ""

#: ../../guides/ajax.rst:319
msgid "Responses basically fall into three categories:"
msgstr ""

#: ../../guides/ajax.rst:321
msgid "HTTP success (200) with status ``0``. No ``register_error()`` calls were made on the server."
msgstr ""

#: ../../guides/ajax.rst:322
msgid "HTTP success (200) with status ``-1``. ``register_error()`` was called."
msgstr ""

#: ../../guides/ajax.rst:323
msgid "HTTP error (4xx/5xx). E.g. calling an action with stale tokens, or a server exception. In this case the ``done`` and ``success`` callbacks are not called."
msgstr ""

#: ../../guides/ajax.rst:325
msgid "You may need only worry about the 2nd case. We can do this by looking at ``jqXHR.AjaxData.status``:"
msgstr ""

#: ../../guides/ajax.rst:339
msgid "Requiring AMD modules"
msgstr ""

#: ../../guides/ajax.rst:341
msgid "Each response from an Ajax service will contain a list of AMD modules required server side with `elgg_require_js()`. When response data is unwrapped, these modules will be loaded asynchronously - plugins should not expect these modules to be loaded in their `$.done()` and `$.then()` handlers and must use `require()` for any modules they depend on. Additionally AMD modules should not expect the DOM to have been altered by an Ajax request when they are loaded - DOM events should be delegated and manipulations on DOM elements should be delayed until all Ajax requests have been resolved."
msgstr ""

#: ../../guides/ajax.rst:350
msgid "Legacy elgg.ajax APIs"
msgstr ""

#: ../../guides/ajax.rst:352
msgid "Elgg 1.8 introduced ``elgg.action``, ``elgg.get``, ``elgg.getJSON``, and other methods which behave less consistently both client-side and server-side."
msgstr ""

#: ../../guides/ajax.rst:355
msgid "Legacy elgg.action"
msgstr ""

#: ../../guides/ajax.rst:357
msgid "Differences:"
msgstr ""

#: ../../guides/ajax.rst:359
msgid "you must manually pull the ``output`` from the returned wrapper"
msgstr ""

#: ../../guides/ajax.rst:360
msgid "the ``success`` handler will fire even if the action is prevented"
msgstr ""

#: ../../guides/ajax.rst:361
msgid "the ``success`` handler will receive a wrapper object. You must look for ``wrapper.output``"
msgstr ""

#: ../../guides/ajax.rst:362
msgid "no ajax hooks"
msgstr ""

#: ../../guides/ajax.rst:385
msgid "elgg.action notes"
msgstr ""

#: ../../guides/ajax.rst:387
msgid "It's best to echo a non-empty string, as this is easy to validate in the ``success`` function. If the action was not allowed to run for some reason, ``wrapper.output`` will be an empty string."
msgstr ""

#: ../../guides/ajax.rst:389
msgid "You may want to use the :doc:`elgg/spinner</guides/javascript>` module."
msgstr ""

#: ../../guides/ajax.rst:390
msgid "Elgg does not use ``wrapper.status`` for anything, but a call to ``register_error()`` causes it to be set to ``-1``."
msgstr ""

#: ../../guides/ajax.rst:392
msgid "If the action echoes a non-JSON string, ``wrapper.output`` will contain that string."
msgstr ""

#: ../../guides/ajax.rst:393
msgid "``elgg.action`` is based on ``jQuery.ajax`` and returns a ``jqXHR`` object (like a Promise), if you should want to use it."
msgstr ""

#: ../../guides/ajax.rst:394
msgid "After the PHP action completes, other plugins can alter the wrapper via the plugin hook ``'output', 'ajax'``, which filters the wrapper as an array (not a JSON string)."
msgstr ""

#: ../../guides/ajax.rst:396
msgid "A ``forward()`` call forces the action to be processed and output immediately, with the ``wrapper.forward_url`` value set to the normalized location given."
msgstr ""

#: ../../guides/ajax.rst:398
msgid "To make sure Ajax actions can only be executed via XHR, use ``elgg_ajax_gatekeeper()``."
msgstr ""

#: ../../guides/ajax.rst:401
msgid "elgg.action JSON response wrapper"
msgstr ""

#: ../../guides/ajax.rst:415
msgid "It's probably best to rely only on the ``output`` key, and validate it in case the PHP action could not run for some reason, e.g. the user was logged out or a CSRF attack did not provide tokens."
msgstr ""

#: ../../guides/ajax.rst:420
msgid "If ``forward()`` is used in response to a legacy ajax request (e.g. ``elgg.ajax``), Elgg will *always* respond with this wrapper, **even if not in an action**."
msgstr ""

#: ../../guides/ajax.rst:424
msgid "Legacy view fetching"
msgstr ""

#: ../../guides/ajax.rst:426
msgid "A plugin can use a view script to handle XHR ``GET`` requests. Here's a simple example of a view that returns a link to an object given by its GUID:"
msgstr ""

#: ../../guides/ajax.rst:462
msgid "The Ajax view system works significantly differently than the action system."
msgstr ""

#: ../../guides/ajax.rst:464
msgid "There are no access controls based on session status."
msgstr ""

#: ../../guides/ajax.rst:465
msgid "Non-XHR requests are automatically rejected."
msgstr ""

#: ../../guides/ajax.rst:466
msgid "GET vars are injected into ``$vars`` in the view."
msgstr ""

#: ../../guides/ajax.rst:467
msgid "If the request contains ``$_GET['guid']``, the system sets ``$vars['entity']`` to the corresponding entity or ``false`` if it can't be loaded."
msgstr ""

#: ../../guides/ajax.rst:469
msgid "There's no \"wrapper\" object placed around the view output."
msgstr ""

#: ../../guides/ajax.rst:470
msgid "System messages/errors shouldn't be used, as they don't display until the user loads another page."
msgstr ""

#: ../../guides/ajax.rst:471
msgid "Depending on the view's suffix (.js, .html, .css, etc.), a corresponding Content-Type header is added."
msgstr ""

#: ../../guides/ajax.rst:475
#: ../../guides/ajax.rst:520
msgid "In ajax views and forms, note that ``$vars`` can be populated by client input. The data is filtered like"
msgstr ""

#: ../../guides/ajax.rst:476
#: ../../guides/ajax.rst:521
msgid "``get_input()``, but may not be the type you're expecting or may have unexpected keys."
msgstr ""

#: ../../guides/ajax.rst:479
msgid "Returning JSON from a view"
msgstr ""

#: ../../guides/ajax.rst:481
msgid "If the view outputs encoded JSON, you must use ``elgg.getJSON`` to fetch it (or use some other method to set jQuery's ajax option ``dataType`` to ``json``). Your ``success`` function will be passed the decoded Object."
msgstr ""

#: ../../guides/ajax.rst:484
msgid "Here's an example of fetching a view that returns a JSON-encoded array of times:"
msgstr ""

#: ../../guides/ajax.rst:495
msgid "Legacy form fetching"
msgstr ""

#: ../../guides/ajax.rst:497
msgid "If you register a form view (name starting with ``forms/``), you can fetch it pre-rendered with ``elgg_view_form()``. Simply use ``ajax/form/<action>`` (instead of ``ajax/view/<view_name>``):"
msgstr ""

#: ../../guides/ajax.rst:525
msgid "Legacy helper functions"
msgstr ""

#: ../../guides/ajax.rst:527
msgid "These functions extend jQuery's native Ajax features."
msgstr ""

#: ../../guides/ajax.rst:529
msgid "``elgg.get()`` is a wrapper for jQuery's ``$.ajax()``, but forces ``GET`` and does URL normalization."
msgstr ""

#: ../../guides/ajax.rst:540
msgid "``elgg.post()`` is a wrapper for jQuery's ``$.ajax()``, but forces ``POST`` and does URL normalization."
msgstr ""

#: ../../guides/authentication.rst:2
msgid "Authentication"
msgstr ""

#: ../../guides/authentication.rst:4
msgid "Elgg provides everything needed to authenticate users via username/email and password out of the box, including:"
msgstr ""

#: ../../guides/authentication.rst:7
msgid "remember-me cookies for persistent login"
msgstr ""

#: ../../guides/authentication.rst:8
msgid "password reset logic"
msgstr ""

#: ../../guides/authentication.rst:9
msgid "secure storage of passwords"
msgstr ""

#: ../../guides/authentication.rst:10
msgid "logout"
msgstr ""

#: ../../guides/authentication.rst:11
msgid "UIs for accomplishing all of the above"
msgstr ""

#: ../../guides/authentication.rst:13
msgid "All that's left for you to do as a developer is to use the built-in authentication functions to secure your pages and actions."
msgstr ""

#: ../../guides/authentication.rst:17
msgid "Working with the logged in user"
msgstr ""

#: ../../guides/authentication.rst:19
msgid "Check whether the current user is logged in with ``elgg_is_logged_in()``:"
msgstr ""

#: ../../guides/authentication.rst:27
msgid "Check if the current user is an admin with ``elgg_is_admin_logged_in()``:"
msgstr ""

#: ../../guides/authentication.rst:35
msgid "Get the currently logged in user with ``elgg_get_logged_in_user_entity()``:"
msgstr ""

#: ../../guides/authentication.rst:41
msgid "The returned object is an ``ElggUser`` so you can use all the methods and properties of that class to access information about the user. If the user is not logged in, this will return ``null``, so be sure to check for that first."
msgstr ""

#: ../../guides/authentication.rst:46
msgid "Gatekeepers"
msgstr ""

#: ../../guides/authentication.rst:48
msgid "Gatekeeper functions allow you to manage how code gets executed by applying access control rules."
msgstr ""

#: ../../guides/authentication.rst:50
msgid "Forward a user to the front page if they are not logged in with ``elgg_gatekeeper()``:"
msgstr ""

#: ../../guides/authentication.rst:60
msgid "In Elgg 1.8 and below this function was called ``gatekeeper()``"
msgstr ""

#: ../../guides/authentication.rst:62
msgid "Forward a user to the front page unless they are an admin with ``elgg_admin_gatekeeper()``:"
msgstr ""

#: ../../guides/authentication.rst:72
msgid "In Elgg 1.8 and below this function was called ``admin_gatekeeper()``"
msgstr ""

#: ../../guides/authentication.rst:75
msgid "Prevent CSRF attacks with ``action_gatekeeper()``."
msgstr ""

#: ../../guides/authentication.rst:83
msgid "This function should be used in :doc:`actions` prior to Elgg 1.8."
msgstr ""

#: ../../guides/authentication.rst:87
msgid "As of Elgg version 1.8 this function is called for all registered actions. There is no longer a need to call this function in your own actions. If you wish to protect other pages with action tokens then you can call this function."
msgstr ""

#: ../../guides/authentication.rst:94
msgid "Pluggable Authentication Modules"
msgstr ""

#: ../../guides/authentication.rst:96
msgid "Elgg has support for pluggable authentication modules (PAM), which enables you to write your own authentication handlers. Whenever a request needs to get authenticated the system will call ``elgg_authenticate()`` which probes the registered PAM handlers until one returns success."
msgstr ""

#: ../../guides/authentication.rst:98
msgid "The preferred approach is to create a separate Elgg plugin which will have one simple task: to process an authentication request. This involves setting up an authentication handler in the plugin's :doc:`start.php <plugins>` file, and to register it with the PAM module so it will get processed whenever the system needs to authenticate a request."
msgstr ""

#: ../../guides/authentication.rst:100
msgid "The authentication handler is a function and takes a single parameter. Registering the handler is being done by ``register_pam_handler()`` which takes the name of the authentication handler, the importance and the policy as parameters. It is advised to register the handler in the plugin's init function, for example:"
msgstr ""

#: ../../guides/authentication.rst:117
msgid "Importance"
msgstr ""

#: ../../guides/authentication.rst:119
msgid "By default an authentication module is registered with an importance of **sufficient**."
msgstr ""

#: ../../guides/authentication.rst:121
msgid "In a list of authentication modules; if any one marked *sufficient* returns ``true``, ``pam_authenticate()`` will also return ``true``. The exception to this is when an authentication module is registered with an importance of **required**. All required modules must return ``true`` for ``pam_authenticate()`` to return ``true``, regardless of whether all sufficient modules return ``true``."
msgstr ""

#: ../../guides/authentication.rst:124
msgid "Passed credentials"
msgstr ""

#: ../../guides/authentication.rst:126
msgid "The format of the credentials passed to the handler can vary, depending on the originating request. For example, a regular login via the login form will create a named array, with the keys ``username`` and ``password``. If a request was made for example via XML-RPC then the credentials will be set in the HTTP header, so in this case nothing will get passed to the authentication handler and the handler will need to perform steps on its own to authenticate the request."
msgstr ""

#: ../../guides/authentication.rst:129
msgid "Return value"
msgstr ""

#: ../../guides/authentication.rst:131
msgid "The authentication handle should return a ``boolean``, indicating if the request could be authenticated or not. One caveat is that in case of a regular user login where credentials are available as username and password the user will get logged in. In case of the XML-RPC example the authentication handler will need to perform this step itself since the rest of the system will not have any idea of either possible formats of credentials passed nor its contents. Logging in a user is quite simple and is being done by ``login()``, which expects an ``ElggUser`` object."
msgstr ""

#: ../../guides/context.rst:2
msgid "Context"
msgstr ""

#: ../../guides/context.rst:4
msgid "Within the Elgg framework, context can be used to by your plugin's functions to determine if they should run or not. You will be registering callbacks to be executed when particular :doc:`events are triggered <events-list>`. Sometimes the events are generic and you only want to run your callback when your plugin caused the event to be triggered. In that case, you can use the page's context."
msgstr ""

#: ../../guides/context.rst:6
msgid "You can explicitly set the context with ``set_context()``. The context is a string and typically you set it to the name of your plugin. You can retrieve the context with the function ``get_context()``. It's however better to use ``elgg_push_context($string)`` to add a context to the stack. You can check if the context you want in in the current stack by calling ``elgg_in_context($context)``. Don't forget to pop (with ``elgg_pop_context()``) the context after you push one and don't need it anymore."
msgstr ""

#: ../../guides/context.rst:9
msgid "If you don't set it, Elgg tries to guess the context. If the page was called through the page handler, the context is set to the name of the handler which was set in ``elgg_register_page_handler()``. If the page wasn't called through the page handler, it uses the name of your plugin directory. If it cannot determine that, it returns main as the default context."
msgstr ""

#: ../../guides/context.rst:11
msgid "Sometimes a view will return different HTML depending on the context. A plugin can take advantage of that by setting the context before calling ``elgg_view()`` on the view and then setting the context back. This is frequently done with the search context."
msgstr ""

#: ../../guides/cron.rst:2
msgid "Cron"
msgstr ""

#: ../../guides/cron.rst:4
msgid "If you setup cron correctly as described in :doc:`/admin/cron` special hooks will be triggered so you can register for these hooks from your own code."
msgstr ""

#: ../../guides/cron.rst:7
msgid "The example below registers a function for the daily cron."
msgstr ""

#: ../../guides/cron.rst:16
msgid "If timing is important in your cron hook be advised that the functions are executed in order of registration. This could mean that your function may start (a lot) later then you may have expected. However the parameters provided in the hook contain the original starting time of the cron, so you can always use that information."
msgstr ""

#: ../../guides/cron.rst:30
msgid ":doc:`/design/events` has more information about hooks"
msgstr ""

#: ../../guides/database.rst:2
msgid "Database"
msgstr ""

#: ../../guides/database.rst:4
msgid "Persist user-generated content and settings with Elgg's generic storage API."
msgstr ""

#: ../../guides/database.rst:11
msgid "Entities"
msgstr ""

#: ../../guides/database.rst:14
msgid "Creating an object"
msgstr ""

#: ../../guides/database.rst:16
msgid "To create an object in your code, you need to instantiate an ``ElggObject``. Setting data is simply a matter of adding instance variables or properties. The built-in properties are:"
msgstr ""

#: ../../guides/database.rst:20
msgid "**``guid``** The entity's GUID; set automatically"
msgstr ""

#: ../../guides/database.rst:21
msgid "**``owner_guid``** The owning user's GUID"
msgstr ""

#: ../../guides/database.rst:22
msgid "**``site_guid``** The owning site's GUID. This is set automatically when an instance of ``ElggObject`` gets created)"
msgstr ""

#: ../../guides/database.rst:24
msgid "**``subtype``** A single-word arbitrary string that defines what kind of object it is, for example ``blog``"
msgstr ""

#: ../../guides/database.rst:26
msgid "**``access_id``** An integer representing the access level of the object"
msgstr ""

#: ../../guides/database.rst:28
msgid "**``title``** The title of the object"
msgstr ""

#: ../../guides/database.rst:29
msgid "**``description``** The description of the object"
msgstr ""

#: ../../guides/database.rst:31
msgid "The object subtype is a special property. This is an arbitrary string that describes what the object is. For example, if you were writing a blog plugin, your subtype string might be *blog*. It's a good idea to make this unique, so that other plugins don't accidentally try and use the same subtype. For the purposes of this document, let's assume we're building a simple forum. Therefore, the subtype will be *forum*:"
msgstr ""

#: ../../guides/database.rst:45
msgid "``access_id`` is another important property. If you don't set this, your object will be private, and only the creator user will be able to see it. Elgg defines constants for the special values of ``access_id``:"
msgstr ""

#: ../../guides/database.rst:49
msgid "**ACCESS_PRIVATE** Only the owner can see it"
msgstr ""

#: ../../guides/database.rst:50
msgid "**ACCESS_FRIENDS** Only the owner and his/her friends can see it"
msgstr ""

#: ../../guides/database.rst:51
msgid "**ACCESS_LOGGED_IN** Any logged in user can see it"
msgstr ""

#: ../../guides/database.rst:52
msgid "**ACCESS_PUBLIC** Even visitors not logged in can see it"
msgstr ""

#: ../../guides/database.rst:54
msgid "Saving the object will automatically populate the ``$object->guid`` property if successful. If you change any more base properties, you can call ``$object->save()`` again, and it will update the database for you."
msgstr ""

#: ../../guides/database.rst:58
msgid "You can set metadata on an object just like a standard property. Let's say we want to set the SKU of a product:"
msgstr ""

#: ../../guides/database.rst:65
msgid "If you assign an array, all the values will be set for that metadata. This is how, for example, you set tags."
msgstr ""

#: ../../guides/database.rst:68
msgid "Metadata cannot be persisted to the database until the entity has been saved, but for convenience, ElggEntity can cache it internally and save it when saving the entity."
msgstr ""

#: ../../guides/database.rst:73
msgid "Loading an object"
msgstr ""

#: ../../guides/database.rst:76
msgid "By GUID"
msgstr ""

#: ../../guides/database.rst:85
msgid "But what if you don't know the GUID? There are several options."
msgstr ""

#: ../../guides/database.rst:88
msgid "By user, subtype or site"
msgstr ""

#: ../../guides/database.rst:90
msgid "If you know the user ID you want to get objects for, or the subtype, or the site, you have several options. The easiest is probably to call the procedural function ``elgg_get_entities``:"
msgstr ""

#: ../../guides/database.rst:102
msgid "This will return an array of ``ElggEntity`` objects that you can iterate through. ``elgg_get_entities`` paginates by default, with a limit of 10; and offset 0."
msgstr ""

#: ../../guides/database.rst:106
msgid "You can leave out ``owner_guid`` to get all objects and leave out subtype or type to get objects of all types/subtypes."
msgstr ""

#: ../../guides/database.rst:109
msgid "If you already have an ``ElggUser`` – e.g. ``elgg_get_logged_in_user_entity``, which always has the current user's object when you're logged in – you can simply use:"
msgstr ""

#: ../../guides/database.rst:117
msgid "But what about getting objects with a particular piece of metadata?"
msgstr ""

#: ../../guides/database.rst:120
msgid "By metadata"
msgstr ""

#: ../../guides/database.rst:122
msgid "The function ``elgg_get_entities_from_metadata`` allows fetching entities with metadata in a variety of ways."
msgstr ""

#: ../../guides/database.rst:126
msgid "By annotation"
msgstr ""

#: ../../guides/database.rst:128
msgid "The function ``elgg_get_entities_from_annotations`` allows fetching entities with metadata in a variety of ways."
msgstr ""

#: ../../guides/database.rst:133
msgid "As of Elgg 1.10 the default behaviour of `elgg_get_entities_from_annotations` was brought inline with the rest of the `elgg_get_entities*` functions."
msgstr ""

#: ../../guides/database.rst:135
msgid "Pre Elgg 1.10 the sorting of the entities was based on the latest addition of an annotation (in $options your could add `$options['order_by'] = 'maxtime ASC'` or `$options['order_by'] = 'maxtime DESC'`. As of Elgg 1.10 this was changed to the creation time of the entity, just like the rest of the `elgg_get_entities*` functions. To get the old behaviour back add the following to your `$options`:"
msgstr ""

#: ../../guides/database.rst:150
#: ../../guides/views.rst:433
msgid "Displaying entities"
msgstr ""

#: ../../guides/database.rst:152
msgid "In order for entities to be displayed in listing functions you need to provide a view for the entity in the views system."
msgstr ""

#: ../../guides/database.rst:155
msgid "To display an entity, create a view EntityType/subtype where EntityType is one of the following:"
msgstr ""

#: ../../guides/database.rst:158
msgid "object: for entities derived from ElggObject user: for entities derived from ElggUser site: for entities derived from ElggSite group: for entities derived from ElggGroup"
msgstr ""

#: ../../guides/database.rst:163
msgid "A default view for all entities has already been created, this is called EntityType/default."
msgstr ""

#: ../../guides/database.rst:169
msgid "Entity Icons"
msgstr ""

#: ../../guides/database.rst:171
msgid "Entity icons can be saved from uploaded files, existing local files, or existing ElggFile objects. These methods save all sizes of icons defined in the system."
msgstr ""

#: ../../guides/database.rst:200
msgid "The following sizes exist by default:"
msgstr ""

#: ../../guides/database.rst:195
msgid "``master`` - 550px at longer edge (not upscaled)"
msgstr ""

#: ../../guides/database.rst:196
msgid "``large`` - 200px at longer edge (not upscaled)"
msgstr ""

#: ../../guides/database.rst:197
msgid "``medium`` - 100px square"
msgstr ""

#: ../../guides/database.rst:198
msgid "``small`` - 40px square"
msgstr ""

#: ../../guides/database.rst:199
msgid "``tiny`` - 25px square"
msgstr ""

#: ../../guides/database.rst:200
msgid "``topbar`` - 16px square"
msgstr ""

#: ../../guides/database.rst:202
msgid "Use ``elgg_get_icon_sizes()`` to get all possible icon sizes for a specific entity type and subtype. The function triggers the ``entity:icon:sizes`` :ref:`hook <guides/hooks-list#other>`."
msgstr ""

#: ../../guides/database.rst:205
msgid "To check if an icon is set, use ``$object->hasIcon($size)``."
msgstr ""

#: ../../guides/database.rst:207
msgid "You can retrieve the URL of the generated icon with``ElggEntity::getIconURL($params)`` method. This method accepts a ``$params`` argument as an array that specifies the size, type, and provide additional context for the hook to determine the icon to serve. The method triggers the ``entity:icon:url`` :ref:`hook <guides/hooks-list#other>`."
msgstr ""

#: ../../guides/database.rst:212
msgid "Use ``elgg_view_entity_icon($entity, $size, $vars)`` to render an icon. This will scan the following locations for a view and include the first match to ."
msgstr ""

#: ../../guides/database.rst:215
msgid "views/$viewtype/icon/$type/$subtype.php"
msgstr ""

#: ../../guides/database.rst:216
msgid "views/$viewtype/icon/$type/default.php"
msgstr ""

#: ../../guides/database.rst:217
msgid "views/$viewtype/icon/default.php"
msgstr ""

#: ../../guides/database.rst:219
msgid "Where"
msgstr ""

#: ../../guides/database.rst:221
msgid "$viewtype"
msgstr ""

#: ../../guides/database.rst:222
msgid "Type of view, e.g. ``'default'`` or ``'json'``."
msgstr ""

#: ../../guides/database.rst:223
msgid "$type"
msgstr ""

#: ../../guides/database.rst:224
msgid "Type of entity, e.g. ``'group'`` or ``'user'``."
msgstr ""

#: ../../guides/database.rst:226
msgid "$subtype"
msgstr ""

#: ../../guides/database.rst:226
msgid "Entity subtype, e.g. ``'blog'`` or ``'page'``."
msgstr ""

#: ../../guides/database.rst:228
msgid "Icon methods support passing an icon type if an entity has more than one icon. For example, a user might have an avatar and a cover photo icon. You would pass ``'cover_photo'`` as the icon type:"
msgstr ""

#: ../../guides/database.rst:240
msgid "Note that custom icon types (e.g. cover photos) do not have preset sizes and coordinates. Use ``entity:<icon_type>:url`` :ref:`hook <guides/hooks-list#other>` to configure them."
msgstr ""

#: ../../guides/database.rst:243
msgid "By default icons will be stored in ``/icons/<icon_type>/<size>.jpg`` relative to entity's directory on filestore. To provide an alternative location, use the ``entity:<icon_type>:file`` :ref:`hook <guides/hooks-list#other>`."
msgstr ""

#: ../../guides/database.rst:247
msgid "Adding, reading and deleting annotations"
msgstr ""

#: ../../guides/database.rst:249
msgid "Annotations could be used, for example, to track ratings. To annotate an entity you can use the object's ``annotate()`` method. For example, to give a blog post a rating of 5, you could use:"
msgstr ""

#: ../../guides/database.rst:259
msgid "To retrieve the ratings on the blog post, use ``$blogpost->getAnnotations('rating')`` and if you want to delete an annotation, you can operate on the ``ElggAnnotation`` class, eg ``$annotation->delete()``."
msgstr ""

#: ../../guides/database.rst:264
msgid "Retrieving a single annotation can be done with ``get_annotation()`` if you have the annotation's ID. If you delete an ElggEntity of any kind, all its metadata, annotations, and relationships will be automatically deleted as well."
msgstr ""

#: ../../guides/database.rst:270
msgid "Extending ElggEntity"
msgstr ""

#: ../../guides/database.rst:272
msgid "If you derive from one of the Elgg core classes, you'll need to tell Elgg how to properly instantiate the new type of object so that get\\_entity() et al. will return the appropriate PHP class. For example, if I customize ElggGroup in a class called \"Committee\", I need to make Elgg aware of the new mapping. Following is an example class extension:"
msgstr ""

#: ../../guides/database.rst:302
msgid "Now if you invoke ``get_entity()`` with the GUID of a committee object, you'll get back an object of type Committee."
msgstr ""

#: ../../guides/database.rst:305
msgid "This template was extracted from the definition of ElggFile."
msgstr ""

#: ../../guides/database.rst:308
msgid "Advanced features"
msgstr ""

#: ../../guides/database.rst:311
msgid "Entity URLs"
msgstr ""

#: ../../guides/database.rst:313
msgid "Entity urls are provided by the ``getURL()`` interface and provide the Elgg framework with a common way of directing users to the appropriate display handler for any given object."
msgstr ""

#: ../../guides/database.rst:317
msgid "For example, a profile page in the case of users."
msgstr ""

#: ../../guides/database.rst:319
msgid "The url is set using the ``elgg\\_register\\_entity\\_url\\_handler()`` function. The function you register must return the appropriate url for the given type - this itself can be an address set up by a page handler."
msgstr ""

#: ../../guides/database.rst:326
msgid "The default handler is to use the default export interface."
msgstr ""

#: ../../guides/database.rst:329
msgid "Entity loading performance"
msgstr ""

#: ../../guides/database.rst:331
msgid "``elgg_get_entities`` has a couple options that can sometimes be useful to improve performance."
msgstr ""

#: ../../guides/database.rst:333
msgid "**preload_owners**: If the entities fetched will be displayed in a list with the owner information, you can set this option to ``true`` to efficiently load the owner users of the fetched entities."
msgstr ""

#: ../../guides/database.rst:334
msgid "**preload_containers**: If the entities fetched will be displayed in a list using info from their containers, you can set this option to ``true`` to efficiently load them."
msgstr ""

#: ../../guides/database.rst:335
msgid "**distinct**: When Elgg fetches entities using an SQL query, Elgg must be sure that each entity row appears only once in the result set. By default it includes a ``DISTINCT`` modifier on the GUID column to enforce this, but some queries naturally return unique entities. Setting the ``distinct`` option to false will remove this modifier, and rely on the query to enforce its own uniqueness."
msgstr ""

#: ../../guides/database.rst:337
msgid "The internals of Elgg entity queries is a complex subject and it's recommended to seek help on the Elgg Community site before using the ``distinct`` option."
msgstr ""

#: ../../guides/database.rst:340
msgid "Pre-1.8 Notes"
msgstr ""

#: ../../guides/database.rst:342
msgid "update\\_subtype(): This function is new in 1.8. In prior versions, you would need to edit the database by hand if you updated the class name associated with a given subtype."
msgstr ""

#: ../../guides/database.rst:346
msgid "elgg\\_register\\_entity\\_url\\_handler(): This function is new in 1.8. It deprecates register\\_entity\\_url\\_handler(), which you should use if developing for a pre-1.8 version of Elgg."
msgstr ""

#: ../../guides/database.rst:350
msgid "elgg\\_get\\_entities\\_from\\_metadata(): This function is new in 1.8. It deprecates get\\_entities\\_from\\_metadata(), which you should use if developing for a pre-1.8 version of Elgg."
msgstr ""

#: ../../guides/database.rst:355
msgid "Custom database functionality"
msgstr ""

#: ../../guides/database.rst:357
msgid "It is strongly recommended to use entities wherever possible. However, Elgg supports custom SQL queries using the database API."
msgstr ""

#: ../../guides/database.rst:361
msgid "Example: Run SQL script on plugin activation"
msgstr ""

#: ../../guides/database.rst:363
msgid "This example shows how you can populate your database on plugin activation."
msgstr ""

#: ../../guides/database.rst:365
msgid "my_plugin/activate.php:"
msgstr ""

#: ../../guides/database.rst:375
msgid "my_plugin/sql/activate.sql:"
msgstr ""

#: ../../guides/database.rst:391
msgid "Note that Elgg execute statements through PHPs built-in functions and have limited support for comments. I.e. only single line comments are supported and must be prefixed by \"-- \" or \"# \". A comment must start at the very beginning of a line."
msgstr ""

#: ../../guides/database.rst:397
msgid "Systemlog"
msgstr ""

#: ../../guides/database.rst:401
msgid "This section need some attention and will contain outdated information"
msgstr ""

#: ../../guides/database.rst:403
msgid "The default Elgg system log is a simple way of recording what happens within an Elgg system. It's viewable and searchable directly from the administration panel."
msgstr ""

#: ../../guides/database.rst:406
msgid "System log storage"
msgstr ""

#: ../../guides/database.rst:408
msgid "A system log row is stored whenever an event concerning an object whose class implements the :doc:`/design/loggable` interface is triggered. ``ElggEntity`` and ``ElggExtender`` implement :doc:`/design/loggable`, so a system log row is created whenever an event is performed on all objects, users, groups, sites, metadata and annotations."
msgstr ""

#: ../../guides/database.rst:410
msgid "Common events include:"
msgstr ""

#: ../../guides/database.rst:412
msgid "create"
msgstr ""

#: ../../guides/database.rst:413
msgid "update"
msgstr ""

#: ../../guides/database.rst:414
msgid "delete"
msgstr ""

#: ../../guides/database.rst:415
msgid "login"
msgstr ""

#: ../../guides/database.rst:418
msgid "Creating your own system log"
msgstr ""

#: ../../guides/database.rst:420
msgid "There are some reasons why you might want to create your own system log. For example, you might need to store a full copy of entities when they are updated or deleted, for auditing purposes. You might also need to notify an administrator when certain types of events occur."
msgstr ""

#: ../../guides/database.rst:422
msgid "To do this, you can create a function that listens to all events for all types of object:"
msgstr ""

#: ../../guides/database.rst:428
msgid "Your function can then be defined as:"
msgstr ""

#: ../../guides/database.rst:438
msgid "You can then use the extra methods defined by :doc:`/design/loggable` to extract the information you need."
msgstr ""

#: ../../guides/dont-modify-core.rst:2
msgid "Don't Modify Core"
msgstr ""

#: ../../guides/dont-modify-core.rst:6
msgid "In general, you shouldn't modify non-config files that come with third-party software like Elgg."
msgstr ""

#: ../../guides/dont-modify-core.rst:8
msgid "The best way to customize the behavior of Elgg is to :doc:`install Elgg as a composer dependency</intro/install>` and use the root directory to store modifications specific to your application, and alter behavior through the rich Elgg plugin API."
msgstr ""

#: ../../guides/dont-modify-core.rst:12
msgid "If you'd like to share customizations between sites or even publish your changes as a reusable package for the community, create a :doc:`plugin<plugins>` using the same plugin APIs and file structure."
msgstr ""

#: ../../guides/dont-modify-core.rst:17
msgid "It makes it hard to get help"
msgstr ""

#: ../../guides/dont-modify-core.rst:19
msgid "When you don't share the same codebase as everyone else, it's impossible for others to know what is going on in your system and whether your changes are to blame. This can frustrate those who offer help because it can add considerable noise to the support process."
msgstr ""

#: ../../guides/dont-modify-core.rst:25
msgid "It makes upgrading tricky and potentially disastrous"
msgstr ""

#: ../../guides/dont-modify-core.rst:27
msgid "You will certainly want or need to upgrade Elgg to take advantage of"
msgstr ""

#: ../../guides/dont-modify-core.rst:29
msgid "security patches"
msgstr ""

#: ../../guides/dont-modify-core.rst:30
msgid "new features"
msgstr ""

#: ../../guides/dont-modify-core.rst:31
msgid "new plugin APIs"
msgstr ""

#: ../../guides/dont-modify-core.rst:32
msgid "new stability improvements"
msgstr ""

#: ../../guides/dont-modify-core.rst:33
msgid "performance improvements"
msgstr ""

#: ../../guides/dont-modify-core.rst:35
msgid "If you've modified core files, then you must be very careful when upgrading that your changes are not overwritten and that they are compatible with the new Elgg code. If your changes are lost or incompatible, then the upgrade may remove features you've added and even completely break your site."
msgstr ""

#: ../../guides/dont-modify-core.rst:40
msgid "This can also be a slippery slope. Lots of modifications can lead you to an upgrade process so complex that it's practically impossible. There are lots of sites stuck running old versions software due to taking this path."
msgstr ""

#: ../../guides/dont-modify-core.rst:45
msgid "It may break plugins"
msgstr ""

#: ../../guides/dont-modify-core.rst:47
msgid "You may not realize until much later that your \"quick fix\" broke seemingly unrelated functionality that plugins depended on."
msgstr ""

#: ../../guides/dont-modify-core.rst:51
msgid "Summary"
msgstr ""

#: ../../guides/dont-modify-core.rst:54
msgid "Resist the temptation"
msgstr ""

#: ../../guides/dont-modify-core.rst:54
msgid "Editing existing files is quick and easy, but doing so heavily risks the maintainability, security, and stability of your site."
msgstr ""

#: ../../guides/dont-modify-core.rst:56
msgid "When receiving advice, consider if the person telling you to modify core will be around to rescue you if you run into trouble later!"
msgstr ""

#: ../../guides/dont-modify-core.rst:59
msgid "Apply these principle to software in general."
msgstr ""

#: ../../guides/dont-modify-core.rst:59
msgid "If you can avoid it, don't modify third party plugins either, for the same reasons: Plugin authors release new versions, too, and you will want those updates."
msgstr ""

#: ../../guides/events-list.rst:2
msgid "List of events in core"
msgstr ""

#: ../../guides/events-list.rst:9
msgid "System events"
msgstr ""

#: ../../guides/events-list.rst:12
msgid "**boot, system**"
msgstr ""

#: ../../guides/events-list.rst:12
msgid "First event triggered. Triggered before plugins have been loaded."
msgstr ""

#: ../../guides/events-list.rst:15
msgid "**plugins_boot, system**"
msgstr ""

#: ../../guides/events-list.rst:15
msgid "Triggered just after the plugins are loaded. Rarely used. init, system is used instead."
msgstr ""

#: ../../guides/events-list.rst:18
#: ../../guides/javascript.rst:814
msgid "**init, system**"
msgstr ""

#: ../../guides/events-list.rst:18
msgid "Plugins tend to use this event for initialization (extending views, registering callbacks, etc.)"
msgstr ""

#: ../../guides/events-list.rst:22
#: ../../guides/javascript.rst:817
msgid "**ready, system**"
msgstr ""

#: ../../guides/events-list.rst:21
msgid "Triggered after the ``init, system`` event. All plugins are fully loaded and the engine is ready to serve pages."
msgstr ""

#: ../../guides/events-list.rst:26
msgid "**pagesetup, system** (deprecated in 2.3)"
msgstr ""

#: ../../guides/events-list.rst:25
msgid "Called just before the first content is produced. Is triggered by ``elgg_view()``. Use the menu or page shell hooks instead."
msgstr ""

#: ../../guides/events-list.rst:30
msgid "**shutdown, system**"
msgstr ""

#: ../../guides/events-list.rst:29
msgid "Triggered after the page has been sent to the user. Expensive operations could be done here and not make the user wait."
msgstr ""

#: ../../guides/events-list.rst:32
msgid "Depending upon your server configuration the PHP output might not be shown until after the process is completed. This means that any long-running processes will still delay the page load."
msgstr ""

#: ../../guides/events-list.rst:36
msgid "This event is prefered above using ``register_shutdown_function`` as you may not have access to all the Elgg services (eg. database) in the shutdown function but you will in the event."
msgstr ""

#: ../../guides/events-list.rst:41
msgid "**regenerate_site_secret:before, system**"
msgstr ""

#: ../../guides/events-list.rst:40
msgid "Return false to cancel regenerating the site secret. You should also provide a message to the user."
msgstr ""

#: ../../guides/events-list.rst:44
msgid "**regenerate_site_secret:after, system**"
msgstr ""

#: ../../guides/events-list.rst:44
msgid "Triggered after the site secret has been regenerated."
msgstr ""

#: ../../guides/events-list.rst:48
msgid "**log, systemlog**"
msgstr ""

#: ../../guides/events-list.rst:47
msgid "Called for all triggered events. Used internally by ``system_log_default_logger()`` to populate the ``system_log`` table."
msgstr ""

#: ../../guides/events-list.rst:52
msgid "**upgrade, system**"
msgstr ""

#: ../../guides/events-list.rst:51
msgid "Triggered after a system upgrade has finished. All upgrade scripts have run, but the caches are not cleared."
msgstr ""

#: ../../guides/events-list.rst:57
msgid "**upgrade, upgrade**"
msgstr ""

#: ../../guides/events-list.rst:57
msgid "A single upgrade script finished executing. Handlers are passed a ``stdClass`` object with the properties"
msgstr ""

#: ../../guides/events-list.rst:56
msgid "from - The version of Elgg upgrading from."
msgstr ""

#: ../../guides/events-list.rst:57
msgid "to - The version just upgraded to."
msgstr ""

#: ../../guides/events-list.rst:60
msgid "**activate, plugin**"
msgstr ""

#: ../../guides/events-list.rst:60
msgid "Return false to prevent activation of the plugin."
msgstr ""

#: ../../guides/events-list.rst:63
msgid "**deactivate, plugin**"
msgstr ""

#: ../../guides/events-list.rst:63
msgid "Return false to prevent deactivation of the plugin."
msgstr ""

#: ../../guides/events-list.rst:66
msgid "**init:cookie, <name>**"
msgstr ""

#: ../../guides/events-list.rst:66
msgid "Return false to override setting a cookie."
msgstr ""

#: ../../guides/events-list.rst:69
msgid "**cache:flush, system**"
msgstr ""

#: ../../guides/events-list.rst:69
msgid "Reset internal and external caches, by default including system_cache, simplecache, and memcache. One might use it to reset others such as APC, OPCache, or WinCache."
msgstr ""

#: ../../guides/events-list.rst:72
msgid "**send:before, http_response**"
msgstr ""

#: ../../guides/events-list.rst:72
msgid "Triggered before an HTTP response is sent. Handlers will receive an instance of `\\Symfony\\Component\\HttpFoundation\\Response` that is to be sent to the requester. Handlers can terminate the event and prevent the response from being sent by returning `false`."
msgstr ""

#: ../../guides/events-list.rst:75
msgid "**send:after, http_response**"
msgstr ""

#: ../../guides/events-list.rst:75
msgid "Triggered after an HTTP response is sent. Handlers will receive an instance of `\\Symfony\\Component\\HttpFoundation\\Response` that was sent to the requester."
msgstr ""

#: ../../guides/events-list.rst:78
msgid "User events"
msgstr ""

#: ../../guides/events-list.rst:81
msgid "**login:before, user**"
msgstr ""

#: ../../guides/events-list.rst:81
msgid "Triggered during login. Returning false prevents the user from logging"
msgstr ""

#: ../../guides/events-list.rst:84
msgid "**login:after, user**"
msgstr ""

#: ../../guides/events-list.rst:84
msgid "Triggered after the user logs in."
msgstr ""

#: ../../guides/events-list.rst:87
msgid "**logout:before, user**"
msgstr ""

#: ../../guides/events-list.rst:87
msgid "Triggered during logout. Returning false should prevent the user from logging out."
msgstr ""

#: ../../guides/events-list.rst:90
msgid "**logout:after, user**"
msgstr ""

#: ../../guides/events-list.rst:90
msgid "Triggered after the user logouts."
msgstr ""

#: ../../guides/events-list.rst:95
msgid "**validate, user**"
msgstr ""

#: ../../guides/events-list.rst:93
msgid "When a user registers, the user's account is disabled. This event is triggered to allow a plugin to determine how the user should be validated (for example, through an email with a validation link)."
msgstr ""

#: ../../guides/events-list.rst:98
msgid "**profileupdate, user**"
msgstr ""

#: ../../guides/events-list.rst:98
msgid "User has changed profile"
msgstr ""

#: ../../guides/events-list.rst:101
msgid "**profileiconupdate, user**"
msgstr ""

#: ../../guides/events-list.rst:101
msgid "User has changed profile icon"
msgstr ""

#: ../../guides/events-list.rst:104
msgid "**ban, user**"
msgstr ""

#: ../../guides/events-list.rst:104
msgid "Triggered before a user is banned. Return false to prevent."
msgstr ""

#: ../../guides/events-list.rst:107
msgid "**unban, user**"
msgstr ""

#: ../../guides/events-list.rst:107
msgid "Triggered before a user is unbanned. Return false to prevent."
msgstr ""

#: ../../guides/events-list.rst:110
msgid "**make_admin, user**"
msgstr ""

#: ../../guides/events-list.rst:110
msgid "Triggered before a user is promoted to an admin. Return false to prevent."
msgstr ""

#: ../../guides/events-list.rst:113
msgid "**remove_admin, user**"
msgstr ""

#: ../../guides/events-list.rst:113
msgid "Triggered before a user is demoted from an admin. Return false to prevent."
msgstr ""

#: ../../guides/events-list.rst:116
msgid "Relationship events"
msgstr ""

#: ../../guides/events-list.rst:120
msgid "**create, relationship**"
msgstr ""

#: ../../guides/events-list.rst:119
msgid "Triggered after a relationship has been created. Returning false deletes the relationship that was just created."
msgstr ""

#: ../../guides/events-list.rst:122
msgid "This event was broken in Elgg 1.9 - 1.12.3, returning false would *not* delete the relationship.  This is working as of 1.12.4"
msgstr ""

#: ../../guides/events-list.rst:127
msgid "**delete, relationship**"
msgstr ""

#: ../../guides/events-list.rst:126
msgid "Triggered before a relationship is deleted. Return false to prevent it from being deleted."
msgstr ""

#: ../../guides/events-list.rst:130
msgid "**join, group**"
msgstr ""

#: ../../guides/events-list.rst:130
msgid "Triggered after the user ``$params['user']`` has joined the group ``$params['group']``."
msgstr ""

#: ../../guides/events-list.rst:133
msgid "**leave, group**"
msgstr ""

#: ../../guides/events-list.rst:133
msgid "Triggered before the user ``$params['user']`` has left the group ``$params['group']``."
msgstr ""

#: ../../guides/events-list.rst:136
msgid "Entity events"
msgstr ""

#: ../../guides/events-list.rst:139
msgid "**create, <entity type>**"
msgstr ""

#: ../../guides/events-list.rst:139
msgid "Triggered for user, group, object, and site entities after creation. Return false to delete entity."
msgstr ""

#: ../../guides/events-list.rst:144
msgid "**update, <entity type>**"
msgstr ""

#: ../../guides/events-list.rst:142
msgid "Triggered before an update for the user, group, object, and site entities. Return false to prevent update. The entity method ``getOriginalAttributes()`` can be used to identify which attributes have changed since the entity was last saved."
msgstr ""

#: ../../guides/events-list.rst:149
msgid "**update:after, <entity type>**"
msgstr ""

#: ../../guides/events-list.rst:147
msgid "Triggered after an update for the user, group, object, and site entities. The entity method ``getOriginalAttributes()`` can be used to identify which attributes have changed since the entity was last saved."
msgstr ""

#: ../../guides/events-list.rst:152
msgid "**delete, <entity type>**"
msgstr ""

#: ../../guides/events-list.rst:152
msgid "Triggered before entity deletion. Return false to prevent deletion."
msgstr ""

#: ../../guides/events-list.rst:155
msgid "**disable, <entity type>**"
msgstr ""

#: ../../guides/events-list.rst:155
msgid "Triggered before the entity is disabled. Return false to prevent disabling."
msgstr ""

#: ../../guides/events-list.rst:158
msgid "**disable:after, <entity type>**"
msgstr ""

#: ../../guides/events-list.rst:158
msgid "Triggered after the entity is disabled."
msgstr ""

#: ../../guides/events-list.rst:161
msgid "**enable, <entity type>**"
msgstr ""

#: ../../guides/events-list.rst:161
msgid "Return false to prevent enabling."
msgstr ""

#: ../../guides/events-list.rst:164
msgid "**enable:after, <entity type>**"
msgstr ""

#: ../../guides/events-list.rst:164
msgid "Triggered after the entity is enabled."
msgstr ""

#: ../../guides/events-list.rst:167
msgid "Metadata events"
msgstr ""

#: ../../guides/events-list.rst:171
msgid "**create, metadata**"
msgstr ""

#: ../../guides/events-list.rst:170
msgid "Called after the metadata has been created. Return false to delete the metadata that was just created."
msgstr ""

#: ../../guides/events-list.rst:174
msgid "**update, metadata**"
msgstr ""

#: ../../guides/events-list.rst:174
msgid "Called after the metadata has been updated. Return false to *delete the metadata.*"
msgstr ""

#: ../../guides/events-list.rst:177
msgid "**delete, metadata**"
msgstr ""

#: ../../guides/events-list.rst:177
msgid "Called before metadata is deleted. Return false to prevent deletion."
msgstr ""

#: ../../guides/events-list.rst:180
msgid "**enable, metadata**"
msgstr ""

#: ../../guides/events-list.rst:180
msgid "Called when enabling metadata. Return false to prevent enabling."
msgstr ""

#: ../../guides/events-list.rst:183
msgid "**disable, metadata**"
msgstr ""

#: ../../guides/events-list.rst:183
msgid "Called when disabling metadata. Return false to prevent disabling."
msgstr ""

#: ../../guides/events-list.rst:186
msgid "Annotation events"
msgstr ""

#: ../../guides/events-list.rst:190
msgid "**annotate, <entity type>**"
msgstr ""

#: ../../guides/events-list.rst:189
msgid "Called before the annotation has been created. Return false to prevent annotation of this entity."
msgstr ""

#: ../../guides/events-list.rst:194
msgid "**create, annotation**"
msgstr ""

#: ../../guides/events-list.rst:193
msgid "Called after the annotation has been created. Return false to delete the annotation."
msgstr ""

#: ../../guides/events-list.rst:197
msgid "**update, annotation**"
msgstr ""

#: ../../guides/events-list.rst:197
msgid "Called after the annotation has been updated. Return false to *delete the annotation.*"
msgstr ""

#: ../../guides/events-list.rst:200
msgid "**delete, annotation**"
msgstr ""

#: ../../guides/events-list.rst:200
msgid "Called before annotation is deleted. Return false to prevent deletion."
msgstr ""

#: ../../guides/events-list.rst:203
msgid "**enable, annotation**"
msgstr ""

#: ../../guides/events-list.rst:203
msgid "Called when enabling annotations. Return false to prevent enabling."
msgstr ""

#: ../../guides/events-list.rst:206
msgid "**disable, annotations**"
msgstr ""

#: ../../guides/events-list.rst:206
msgid "Called when disabling annotations. Return false to prevent disabling."
msgstr ""

#: ../../guides/events-list.rst:209
msgid "River events"
msgstr ""

#: ../../guides/events-list.rst:214
msgid "**created, river**"
msgstr ""

#: ../../guides/events-list.rst:212
msgid "Called after a river item is created."
msgstr ""

#: ../../guides/events-list.rst:214
msgid "Use the plugin hook ``creating, river`` to cancel creation (or alter options)."
msgstr ""

#: ../../guides/events-list.rst:217
msgid "**delete:before, river**"
msgstr ""

#: ../../guides/events-list.rst:217
msgid "Triggered before a river item is deleted. Returning false cancels the deletion."
msgstr ""

#: ../../guides/events-list.rst:220
msgid "**delete:after, river**"
msgstr ""

#: ../../guides/events-list.rst:220
msgid "Triggered after a river item was deleted."
msgstr ""

#: ../../guides/events-list.rst:223
msgid "File events"
msgstr ""

#: ../../guides/events-list.rst:228
msgid "**upload:after, file**"
msgstr ""

#: ../../guides/events-list.rst:226
msgid "Called after an uploaded file has been written to filestore. Receives an instance of ``ElggFile`` the uploaded file was written to. The ``ElggFile`` may or may not be an entity with a GUID."
msgstr ""

#: ../../guides/events-list.rst:231
msgid "Notes"
msgstr ""

#: ../../guides/events-list.rst:233
msgid "Because of bugs in the Elgg core, some events may be thrown more than once on the same action. For example, ``update, object`` is thrown twice."
msgstr ""

#: ../../guides/file-system.rst:2
msgid "File System"
msgstr ""

#: ../../guides/file-system.rst:5
msgid "Filestore"
msgstr ""

#: ../../guides/file-system.rst:8
msgid "Location"
msgstr ""

#: ../../guides/file-system.rst:10
msgid "Elgg's filestore is located in the site's ``dataroot`` that is configured during installation, and can be modified via site settings in Admin interface."
msgstr ""

#: ../../guides/file-system.rst:15
msgid "Directory Structure"
msgstr ""

#: ../../guides/file-system.rst:17
msgid "The structure of the filestore is tied to file ownership by Elgg entities. Whenever the first file owned by an entity is written to the filestore, a directory corresponding to the entity GUID will be created within a parent bucket directory (buckets are bound to 5000 guids). E.g. files owned by user with guid 7777 will be located in ``5000/7777/``."
msgstr ""

#: ../../guides/file-system.rst:22
msgid "When files are created, filenames can contain subdirectory names (often referred to as `$prefix` throughout the code). For instance, avatars of the above user, can be found under ``5000/7777/profile/``."
msgstr ""

#: ../../guides/file-system.rst:28
msgid "File Objects"
msgstr ""

#: ../../guides/file-system.rst:31
msgid "Writing Files"
msgstr ""

#: ../../guides/file-system.rst:33
msgid "To write a file to the filestore, you would use an instance of ``ElggFile``. Even though ``ElggFile`` extends `ElggObject` and can be stored as an actual Elgg entity, that is not always necessary (e.g. when writing thumbs of an image)."
msgstr ""

#: ../../guides/file-system.rst:52
msgid "Reading Files"
msgstr ""

#: ../../guides/file-system.rst:54
msgid "You can read file contents using instanceof of ``ElggFile``."
msgstr ""

#: ../../guides/file-system.rst:81
msgid "Serving Files"
msgstr ""

#: ../../guides/file-system.rst:83
msgid "You can serve files from filestore using ``elgg_get_inline_url()`` and ``elgg_get_download_url()``. Both functions accept 3 arguments:"
msgstr ""

#: ../../guides/file-system.rst:86
msgid "**``file``** An instance of ``ElggFile`` to be served"
msgstr ""

#: ../../guides/file-system.rst:87
msgid "**``use_cookie``** If set to true, validity of the URL will be limited to current session"
msgstr ""

#: ../../guides/file-system.rst:88
msgid "**``expires``** Expiration time of the URL"
msgstr ""

#: ../../guides/file-system.rst:90
msgid "You can use ``use_cookie`` and ``expires`` arguments as means of access control. For example, users avatars in most cases have a long expiration time and do not need to be restricted by current session - this will allows browsers to cache the images and file service will send appropriate ``Not Modified`` headers on consecutive requests."
msgstr ""

#: ../../guides/file-system.rst:95
msgid "For entities that are under Elgg's access control, you may want to use cookies to ensure that access settings are respected and users do not share download URLs with somebody else."
msgstr ""

#: ../../guides/file-system.rst:98
msgid "You can also invalidated all previously generated URLs by updating file's modified time, e.g. by using ``touch()``."
msgstr ""

#: ../../guides/file-system.rst:103
msgid "Embedding Files"
msgstr ""

#: ../../guides/file-system.rst:105
msgid "Please note that due to their nature inline and download URLs are not suitable for embedding. Embed URLs must be permanent, whereas inline and download URLs are volatile (bound to user session and file modification time)."
msgstr ""

#: ../../guides/file-system.rst:109
msgid "To embed an entity icon, use ``elgg_get_embed_url()``."
msgstr ""

#: ../../guides/file-system.rst:113
msgid "Handling File Uploads"
msgstr ""

#: ../../guides/file-system.rst:115
msgid "In order to implement an action that saves a single file uploaded by a user, you can use the following approach:"
msgstr ""

#: ../../guides/file-system.rst:162
msgid "If your file input supports multiple files, you can iterate through them in your action:"
msgstr ""

#: ../../guides/guidelines.rst:2
msgid "Plugin coding guidelines"
msgstr ""

#: ../../guides/guidelines.rst:4
msgid "In addition to the Elgg Coding Standards, these are guidelines for creating plugins. Core plugins are being updated to this format and all plugin authors should follow these guidelines in their own plugins."
msgstr ""

#: ../../guides/guidelines.rst:10
msgid "Be sure to follow the :doc:`plugins/plugin-skeleton` for your plugin's layout."
msgstr ""

#: ../../guides/guidelines.rst:14
msgid ":doc:`dont-modify-core`"
msgstr ""

#: ../../guides/guidelines.rst:21
#: ../../guides/upgrading.rst:1283
msgid "Use standardized routing with page handlers"
msgstr ""

#: ../../guides/guidelines.rst:23
#: ../../guides/guidelines.rst:52
#: ../../guides/guidelines.rst:64
msgid "Example: Bookmarks plugin"
msgstr ""

#: ../../guides/guidelines.rst:40
msgid "Page handlers should accept the following standard URLs:"
msgstr ""

#: ../../guides/guidelines.rst:26
#: ../../guides/guidelines.rst:72
msgid "Purpose"
msgstr ""

#: ../../guides/guidelines.rst:26
#: ../../guides/guidelines.rst:72
msgid "URL"
msgstr ""

#: ../../guides/guidelines.rst:28
msgid "All"
msgstr ""

#: ../../guides/guidelines.rst:28
msgid "page_handler/all"
msgstr ""

#: ../../guides/guidelines.rst:30
msgid "User"
msgstr ""

#: ../../guides/guidelines.rst:30
msgid "page_handler/owner/<username>"
msgstr ""

#: ../../guides/guidelines.rst:32
msgid "User friends’"
msgstr ""

#: ../../guides/guidelines.rst:32
msgid "page_handler/friends/<username>"
msgstr ""

#: ../../guides/guidelines.rst:34
msgid "Single entity"
msgstr ""

#: ../../guides/guidelines.rst:34
msgid "page_handler/view/<guid>/<title>"
msgstr ""

#: ../../guides/guidelines.rst:36
#: ../../guides/guidelines.rst:74
msgid "Add"
msgstr ""

#: ../../guides/guidelines.rst:36
msgid "page_handler/add/<container_guid>"
msgstr ""

#: ../../guides/guidelines.rst:38
#: ../../guides/guidelines.rst:76
msgid "Edit"
msgstr ""

#: ../../guides/guidelines.rst:38
msgid "page_handler/edit/<guid>"
msgstr ""

#: ../../guides/guidelines.rst:40
msgid "Group list"
msgstr ""

#: ../../guides/guidelines.rst:40
msgid "page_handler/group/<guid>/owner"
msgstr ""

#: ../../guides/guidelines.rst:42
msgid "Include page handler scripts from the page handler. Almost every page handler should have a page handler script. (Example: ``bookmarks/all`` => ``mod/bookmarks/views/default/resources/bookmarks/all.php``)"
msgstr ""

#: ../../guides/guidelines.rst:43
msgid "Pass arguments like entity guids to the resource view via ``$vars`` in ``elgg_view_resource()``."
msgstr ""

#: ../../guides/guidelines.rst:44
msgid "Call ``elgg_gatekeeper()`` and ``elgg_admin_gatekeeper()`` in the page handler function if required."
msgstr ""

#: ../../guides/guidelines.rst:45
msgid "The group URL should use views like ``resources/groups/*.php`` to render pages."
msgstr ""

#: ../../guides/guidelines.rst:46
#: ../../guides/upgrading.rst:1301
msgid "Page handlers should not contain HTML."
msgstr ""

#: ../../guides/guidelines.rst:47
msgid "If upgrading a 1.7 plugin, update the URLs throughout the plugin. (Don’t forget to remove ``/pg/``!)"
msgstr ""

#: ../../guides/guidelines.rst:50
#: ../../guides/upgrading.rst:1306
msgid "Use standardized page handlers and scripts"
msgstr ""

#: ../../guides/guidelines.rst:53
msgid "Store page functionality in ``mod/<plugin>/views/default/resources/<page_handler>/<page_name>.php``"
msgstr ""

#: ../../guides/guidelines.rst:54
msgid "Use ``elgg_view_resource('<page_handler>/<page_name>')`` to render that."
msgstr ""

#: ../../guides/guidelines.rst:55
msgid "Use the content page layout in page handler scripts: ``$content = elgg_view_layout('content', $options);``"
msgstr ""

#: ../../guides/guidelines.rst:56
msgid "Page handler scripts should not contain HTML"
msgstr ""

#: ../../guides/guidelines.rst:57
#: ../../guides/upgrading.rst:1315
msgid "Call ``elgg_push_breadcrumb()`` in the page handler scripts."
msgstr ""

#: ../../guides/guidelines.rst:58
msgid "No need to worry about setting the page owner if the URLs are in the standardized format"
msgstr ""

#: ../../guides/guidelines.rst:59
msgid "For group content, check the ``container_guid`` by using ``elgg_get_page_owner_entity()``"
msgstr ""

#: ../../guides/guidelines.rst:62
msgid "The object/<subtype> view"
msgstr ""

#: ../../guides/guidelines.rst:65
msgid "Make sure there are views for ``$vars['full_view'] == true`` and ``$vars['full_view'] == false``"
msgstr ""

#: ../../guides/guidelines.rst:66
msgid "Check for the object in ``$vars['entity']`` . Use ``elgg_instance_of()`` to make sure it’s the type entity you want. Return ``true`` to short circuit the view if the entity is missing or wrong."
msgstr ""

#: ../../guides/guidelines.rst:67
msgid "Use the new list body and list metadata views to help format. You should use almost no markup in these views."
msgstr ""

#: ../../guides/guidelines.rst:68
msgid "Update action structure - Example: Bookmarks plugin."
msgstr ""

#: ../../guides/guidelines.rst:69
#: ../../guides/upgrading.rst:1330
msgid "Namespace action files and action names (example: ``mod/blog/actions/blog/save.php`` => ``action/blog/save``)"
msgstr ""

#: ../../guides/guidelines.rst:78
#: ../../guides/upgrading.rst:1331
msgid "Use the following action URLs:"
msgstr ""

#: ../../guides/guidelines.rst:74
#: ../../guides/guidelines.rst:76
msgid "action/plugin/save"
msgstr ""

#: ../../guides/guidelines.rst:78
msgid "Delete"
msgstr ""

#: ../../guides/guidelines.rst:78
msgid "action/plugin/delete"
msgstr ""

#: ../../guides/guidelines.rst:80
msgid "Make the delete action accept ``action/<handler>/delete?guid=<guid>`` so the metadata entity menu has the correct URL by default"
msgstr ""

#: ../../guides/guidelines.rst:81
msgid "If updating a 1.7 plugin, replace calls to functions deprecated in 1.7 because these will produce visible errors on every load in 1.8"
msgstr ""

#: ../../guides/guidelines.rst:84
#: ../../guides/plugins/plugin-skeleton.rst:82
msgid "Actions"
msgstr ""

#: ../../guides/guidelines.rst:86
msgid "Actions are transient states to perform an action such as updating the database or sending a notification to a user. Used correctly, actions provide a level of access control and prevent against CSRF attacks."
msgstr ""

#: ../../guides/guidelines.rst:88
msgid "Actions require action (CSRF) tokens to be submitted via GET/POST, but these are added automatically by elgg_view_form() and by using the ``is_action`` argument of the ``output/url`` view."
msgstr ""

#: ../../guides/guidelines.rst:91
msgid "Action best practices"
msgstr ""

#: ../../guides/guidelines.rst:93
msgid "Action files are included within Elgg's action system; like views, they are *not* regular scripts executable by users. Do not boot the Elgg core in your file and direct users to load it directly."
msgstr ""

#: ../../guides/guidelines.rst:95
msgid "Because actions are time-sensitive they are not suitable for links in emails or other delayed notifications. An example of this would be invitations to join a group. The clean way to create an invitation link is to create a page handler for invitations and email that link to the user. It is then the page handler's responsibility to create the action links for a user to join or ignore the invitation request."
msgstr ""

#: ../../guides/guidelines.rst:97
msgid "Consider that actions may be submitted via XHR requests, not just links or form submissions."
msgstr ""

#: ../../guides/guidelines.rst:100
msgid "Directly calling a file"
msgstr ""

#: ../../guides/guidelines.rst:102
msgid "This is an easy one: **Don't do it**. With the exception of 3rd party application integration, there is not a reason to directly call a file in mods directory."
msgstr ""

#: ../../guides/guidelines.rst:105
msgid "Recommended"
msgstr ""

#: ../../guides/guidelines.rst:107
msgid "These points are good ideas, but are not yet in the official guidelines. Following these suggestions will help to keep your plugin consistent with Elgg core."
msgstr ""

#: ../../guides/guidelines.rst:109
msgid "Update the widget views (see the blog or file widgets)"
msgstr ""

#: ../../guides/guidelines.rst:110
msgid "Update the group profile “widget” using blog or file plugins as example"
msgstr ""

#: ../../guides/guidelines.rst:114
msgid "Update the forms"
msgstr ""

#: ../../guides/guidelines.rst:112
msgid "Move form bodies to ``/forms/<handler>/<action>`` to use Evan’s new ``elgg_view_form()``"
msgstr ""

#: ../../guides/guidelines.rst:113
msgid "Use input views in form bodies rather than html"
msgstr ""

#: ../../guides/guidelines.rst:114
msgid "Add a function that prepares the form (see ``mod/file/lib/file.php`` for example)"
msgstr ""

#: ../../guides/guidelines.rst:115
msgid "Integrate sticky forms (see the file plugin’s upload action and form prepare function)"
msgstr ""

#: ../../guides/guidelines.rst:116
#: ../../guides/upgrading.rst:1371
msgid "Clean up CSS/HTML"
msgstr ""

#: ../../guides/guidelines.rst:117
msgid "Should be able to remove almost all CSS (look for patterns that can be moved into core if you need CSS)"
msgstr ""

#: ../../guides/guidelines.rst:118
msgid "Use hyphens rather than underscores in classes/ids"
msgstr ""

#: ../../guides/guidelines.rst:119
msgid "Update the ``manifest.xml`` file to the 1.8 format. Use http://el.gg/manifest17to18 to automate this"
msgstr ""

#: ../../guides/guidelines.rst:120
msgid "Do not use the ``bundled`` category with your plugins. That is for plugins distributed with Elgg"
msgstr ""

#: ../../guides/guidelines.rst:122
msgid "Update functions deprecated in 1.8."
msgstr ""

#: ../../guides/guidelines.rst:122
msgid "Many registration functions simply added an ``elgg_`` prefix for consistency"
msgstr ""

#: ../../guides/guidelines.rst:123
msgid "See ``/engine/lib/deprecated-1.8.php`` for the full list. You can also set the debug level to warning to get visual reminders of deprecated functions"
msgstr ""

#: ../../guides/guidelines.rst:124
msgid "Don't use ``register_shutdown_function`` as you may not have access to certain Elgg parts anymore (eg database). Instead use the ``shutdown`` ``system`` event"
msgstr ""

#: ../../guides/helpers.rst:5
msgid "Input and output"
msgstr ""

#: ../../guides/helpers.rst:7
msgid "``get_input($name)`` Grabs information from a form field (or any variable passed using GET or POST). Also sanitises input, stripping Javascript etc."
msgstr ""

#: ../../guides/helpers.rst:8
msgid "``set_input($name, $value)`` Forces a value to a particular variable for subsequent retrieval by ``get_input()``"
msgstr ""

#: ../../guides/helpers.rst:11
msgid "Entity methods"
msgstr ""

#: ../../guides/helpers.rst:13
msgid "``$entity->getURL()`` Returns the URL of any entity in the system"
msgstr ""

#: ../../guides/helpers.rst:14
msgid "``$entity->getGUID()`` Returns the GUID of any entity in the system"
msgstr ""

#: ../../guides/helpers.rst:15
msgid "``$entity->canEdit()`` Returns whether or not the current user can edit the entity"
msgstr ""

#: ../../guides/helpers.rst:16
msgid "``$entity->getOwnerEntity()`` Returns the ElggUser owner of a particular entity"
msgstr ""

#: ../../guides/helpers.rst:19
msgid "Entity and context retrieval"
msgstr ""

#: ../../guides/helpers.rst:21
msgid "``elgg_get_logged_in_user_entity()`` Returns the ElggUser for the current user"
msgstr ""

#: ../../guides/helpers.rst:22
msgid "``elgg_get_logged_in_user_guid()`` Returns the GUID of the current user"
msgstr ""

#: ../../guides/helpers.rst:23
msgid "``elgg_is_logged_in()`` Is the viewer logged in"
msgstr ""

#: ../../guides/helpers.rst:24
msgid "``elgg_is_admin_logged_in()`` Is the view an admin and logged in"
msgstr ""

#: ../../guides/helpers.rst:25
msgid "``elgg_gatekeeper()`` Shorthand for checking if a user is logged in. Forwards user to front page if not"
msgstr ""

#: ../../guides/helpers.rst:26
msgid "``elgg_admin_gatekeeper()`` Shorthand for checking the user is logged in and is an admin. Forwards user to front page if not"
msgstr ""

#: ../../guides/helpers.rst:27
msgid "``get_user($user_guid)`` Given a GUID, returns a full ElggUser entity"
msgstr ""

#: ../../guides/helpers.rst:28
msgid "``elgg_get_page_owner_guid()`` Returns the GUID of the current page owner, if there is one"
msgstr ""

#: ../../guides/helpers.rst:29
msgid "``elgg_get_page_owner_entity()`` Like elgg_get_page_owner_guid() but returns the full entity"
msgstr ""

#: ../../guides/helpers.rst:30
msgid "``get_context()`` Returns the current page's context - eg \"blog\" for the blog plugin, \"thewire\" for the wire, etc. Returns \"main\" as default"
msgstr ""

#: ../../guides/helpers.rst:31
msgid "``set_context($context)`` Forces the context to be a particular value"
msgstr ""

#: ../../guides/helpers.rst:32
msgid "``elgg_push_context($context)`` Adds a context to the stack"
msgstr ""

#: ../../guides/helpers.rst:33
msgid "``elgg_pop_context()`` Removes the top context from the stack"
msgstr ""

#: ../../guides/helpers.rst:34
msgid "``elgg_in_context($context)`` Checks if you're in a context (this checks the complete stack, eg. 'widget' in 'groups')"
msgstr ""

#: ../../guides/helpers.rst:37
#: ../../guides/hooks-list.rst:834
#: ../../guides/plugins.rst:2
msgid "Plugins"
msgstr ""

#: ../../guides/helpers.rst:39
msgid "``elgg_is_active_plugin($plugin_id)`` Check if a plugin is installed and enabled"
msgstr ""

#: ../../guides/helpers.rst:42
msgid "Interface and annotations"
msgstr ""

#: ../../guides/helpers.rst:44
msgid "``elgg_view_image_block($icon, $info)`` Return the result in a formatted list"
msgstr ""

#: ../../guides/helpers.rst:45
msgid "``elgg_view_comments($entity)`` Returns any comments associated with the given entity"
msgstr ""

#: ../../guides/helpers.rst:46
msgid "``elgg_get_friendly_time($unix_timestamp)`` Returns a date formatted in a friendlier way - \"18 minutes ago\", \"2 days ago\", etc."
msgstr ""

#: ../../guides/helpers.rst:47
msgid "You can pass ``'use_hover' => false`` to the user icon view if you don't want the avatar drop down menu to appear e.g."
msgstr ""

#: ../../guides/hooks-list.rst:2
msgid "List of plugin hooks in core"
msgstr ""

#: ../../guides/hooks-list.rst:9
msgid "System hooks"
msgstr ""

#: ../../guides/hooks-list.rst:12
msgid "**page_owner, system**"
msgstr ""

#: ../../guides/hooks-list.rst:12
msgid "Filter the page_owner for the current page. No options are passed."
msgstr ""

#: ../../guides/hooks-list.rst:14
msgid "**siteid, system**"
msgstr ""

#: ../../guides/hooks-list.rst:17
msgid "**gc, system**"
msgstr ""

#: ../../guides/hooks-list.rst:17
msgid "Allows plugins to run garbage collection for ``$params['period']``."
msgstr ""

#: ../../guides/hooks-list.rst:20
msgid "**unit_test, system**"
msgstr ""

#: ../../guides/hooks-list.rst:20
msgid "Add a Simple Test test. (Deprecated.)"
msgstr ""

#: ../../guides/hooks-list.rst:23
#: ../../guides/hooks-list.rst:37
msgid "**diagnostics:report, system**"
msgstr ""

#: ../../guides/hooks-list.rst:23
msgid "Filter the output for the diagnostics report download."
msgstr ""

#: ../../guides/hooks-list.rst:25
#: ../../guides/hooks-list.rst:916
msgid "**search_types, get_types**"
msgstr ""

#: ../../guides/hooks-list.rst:28
msgid "**cron, <period>**"
msgstr ""

#: ../../guides/hooks-list.rst:28
msgid "Triggered by cron for each period."
msgstr ""

#: ../../guides/hooks-list.rst:31
msgid "**validate, input**"
msgstr ""

#: ../../guides/hooks-list.rst:31
msgid "Filter GET and POST input. This is used by ``get_input()`` to sanitize user input."
msgstr ""

#: ../../guides/hooks-list.rst:34
msgid "**geocode, location**"
msgstr ""

#: ../../guides/hooks-list.rst:34
msgid "Deprecated as of 1.9."
msgstr ""

#: ../../guides/hooks-list.rst:37
msgid "Filters the output for a diagnostic report."
msgstr ""

#: ../../guides/hooks-list.rst:49
msgid "**debug, log**"
msgstr ""

#: ../../guides/hooks-list.rst:40
msgid "Triggered by the Logger. Return false to stop the default logging method. ``$params`` includes:"
msgstr ""

#: ../../guides/hooks-list.rst:46
msgid "level - The debug level. One of:"
msgstr ""

#: ../../guides/hooks-list.rst:43
msgid "``Elgg_Logger::OFF``"
msgstr ""

#: ../../guides/hooks-list.rst:44
msgid "``Elgg_Logger::ERROR``"
msgstr ""

#: ../../guides/hooks-list.rst:45
msgid "``Elgg_Logger::WARNING``"
msgstr ""

#: ../../guides/hooks-list.rst:46
msgid "``Elgg_Logger::NOTICE``"
msgstr ""

#: ../../guides/hooks-list.rst:47
msgid "``Elgg_Logger::INFO``"
msgstr ""

#: ../../guides/hooks-list.rst:48
msgid "msg - The message"
msgstr ""

#: ../../guides/hooks-list.rst:49
msgid "display - Should this message be displayed?"
msgstr ""

#: ../../guides/hooks-list.rst:52
msgid "**format, friendly:title**"
msgstr ""

#: ../../guides/hooks-list.rst:52
msgid "Formats the \"friendly\" title for strings. This is used for generating URLs."
msgstr ""

#: ../../guides/hooks-list.rst:55
msgid "**format, friendly:time**"
msgstr ""

#: ../../guides/hooks-list.rst:55
msgid "Formats the \"friendly\" time for the timestamp ``$params['time']``."
msgstr ""

#: ../../guides/hooks-list.rst:59
msgid "**format, strip_tags**"
msgstr ""

#: ../../guides/hooks-list.rst:58
msgid "Filters a string to remove tags. The original string is passed as ``$params['original_string']`` and an optional set of allowed tags is passed as ``$params['allowed_tags']``."
msgstr ""

#: ../../guides/hooks-list.rst:64
msgid "**output:before, page**"
msgstr ""

#: ../../guides/hooks-list.rst:62
msgid "In ``elgg_view_page()``, this filters ``$vars`` before it's passed to the page shell view (``page/<page_shell>``). To stop sending the X-Frame-Options header, unregister the handler ``_elgg_views_send_header_x_frame_options()`` from this hook."
msgstr ""

#: ../../guides/hooks-list.rst:67
msgid "**output, page**"
msgstr ""

#: ../../guides/hooks-list.rst:67
msgid "In ``elgg_view_page()``, this filters the output return value."
msgstr ""

#: ../../guides/hooks-list.rst:70
msgid "**output:before, layout**"
msgstr ""

#: ../../guides/hooks-list.rst:70
msgid "In ``elgg_view_layout()``, filters ``$params`` before it's passed to the layout view."
msgstr ""

#: ../../guides/hooks-list.rst:73
msgid "**output:after, layout**"
msgstr ""

#: ../../guides/hooks-list.rst:73
msgid "In ``elgg_view_layout()``, filters the return value of the layout view."
msgstr ""

#: ../../guides/hooks-list.rst:76
msgid "**parameters, menu:<menu_name>**"
msgstr ""

#: ../../guides/hooks-list.rst:76
msgid "Triggered by ``elgg_view_menu()``. Used to change menu variables (like sort order) before rendering."
msgstr ""

#: ../../guides/hooks-list.rst:80
msgid "**register, menu:<menu_name>**"
msgstr ""

#: ../../guides/hooks-list.rst:79
msgid "Filters the initial list of menu items pulled from configuration, before the menu has been split into sections. Triggered by ``elgg_view_menu()`` and ``elgg()->menus->getMenu()``."
msgstr ""

#: ../../guides/hooks-list.rst:85
msgid "**prepare, menu:<menu_name>**"
msgstr ""

#: ../../guides/hooks-list.rst:83
msgid "Filters the array of menu sections before they're displayed. Each section is a string key mapping to an area of menu items. This is a good hook to sort, add, remove, and modify menu items. Triggered by ``elgg_view_menu()`` and ``elgg()->menus->prepareMenu()``."
msgstr ""

#: ../../guides/hooks-list.rst:89
msgid "**creating, river**"
msgstr ""

#: ../../guides/hooks-list.rst:88
msgid "The options for ``elgg_create_river_item`` are filtered through this hook. You may alter values or return ``false`` to cancel the item creation."
msgstr ""

#: ../../guides/hooks-list.rst:92
msgid "**simplecache:generate, <view>**"
msgstr ""

#: ../../guides/hooks-list.rst:92
msgid "Triggered when generating the cached content of a view."
msgstr ""

#: ../../guides/hooks-list.rst:96
msgid "**prepare, breadcrumbs**"
msgstr ""

#: ../../guides/hooks-list.rst:95
msgid "In elgg_get_breadcrumbs(), this filters the registered breadcrumbs before returning them, allowing a plugin to alter breadcrumb strategy site-wide."
msgstr ""

#: ../../guides/hooks-list.rst:98
msgid "**add, river**"
msgstr ""

#: ../../guides/hooks-list.rst:101
msgid "**elgg.data, site**"
msgstr ""

#: ../../guides/hooks-list.rst:101
msgid "Filters cached configuration data to pass to the client. :ref:`More info <guides/javascript#config>`"
msgstr ""

#: ../../guides/hooks-list.rst:104
msgid "**elgg.data, page**"
msgstr ""

#: ../../guides/hooks-list.rst:104
msgid "Filters uncached, page-specific configuration data to pass to the client. :ref:`More info <guides/javascript#config>`"
msgstr ""

#: ../../guides/hooks-list.rst:109
msgid "**registration_url, site**"
msgstr ""

#: ../../guides/hooks-list.rst:107
msgid "Filters site's registration URL. Can be used by plugins to attach invitation codes, referrer codes etc. to the registration URL. ``$params`` array contains an array of query elements added to the registration URL by the invoking script. The hook must return an absolute URL to the registration page."
msgstr ""

#: ../../guides/hooks-list.rst:114
msgid "**login_url, site**"
msgstr ""

#: ../../guides/hooks-list.rst:112
msgid "Filters site's login URL. ``$params`` array contains an array of query elements added to the login URL by the invoking script. The hook must return an absolute URL of the login page."
msgstr ""

#: ../../guides/hooks-list.rst:117
msgid "User hooks"
msgstr ""

#: ../../guides/hooks-list.rst:121
msgid "**usersettings:save, user**"
msgstr ""

#: ../../guides/hooks-list.rst:120
msgid "Triggered in the aggregate action to save user settings. Return false prevent sticky forms from being cleared."
msgstr ""

#: ../../guides/hooks-list.rst:125
#: ../../guides/hooks-list.rst:308
msgid "**access:collections:write, user**"
msgstr ""

#: ../../guides/hooks-list.rst:124
msgid "Filters an array of access permissions that the user ``$params['user_id']`` is allowed to save content with. Permissions returned are of the form (id => 'Human Readable Name')."
msgstr ""

#: ../../guides/hooks-list.rst:128
msgid "**registeruser:validate:username, all**"
msgstr ""

#: ../../guides/hooks-list.rst:128
msgid "Return boolean for if the string in ``$params['username']`` is valid for a username."
msgstr ""

#: ../../guides/hooks-list.rst:131
msgid "**registeruser:validate:password, all**"
msgstr ""

#: ../../guides/hooks-list.rst:131
msgid "Return boolean for if the string in ``$params['password']`` is valid for a password."
msgstr ""

#: ../../guides/hooks-list.rst:134
msgid "**registeruser:validate:email, all**"
msgstr ""

#: ../../guides/hooks-list.rst:134
msgid "Return boolean for if the string in ``$params['email']`` is valid for an email address."
msgstr ""

#: ../../guides/hooks-list.rst:138
msgid "**register, user**"
msgstr ""

#: ../../guides/hooks-list.rst:137
msgid "Triggered by the ``register`` action after the user registers. Return ``false`` to delete the user. Note the function ``register_user`` does *not* trigger this hook."
msgstr ""

#: ../../guides/hooks-list.rst:141
msgid "**login:forward, user**"
msgstr ""

#: ../../guides/hooks-list.rst:141
msgid "Filters the URL to which the user will be forwarded after login."
msgstr ""

#: ../../guides/hooks-list.rst:144
msgid "**find_active_users, system**"
msgstr ""

#: ../../guides/hooks-list.rst:144
msgid "Return the number of active users."
msgstr ""

#: ../../guides/hooks-list.rst:147
msgid "**status, user**"
msgstr ""

#: ../../guides/hooks-list.rst:147
msgid "Triggered by The Wire when adding a post."
msgstr ""

#: ../../guides/hooks-list.rst:152
msgid "**username:character_blacklist, user**"
msgstr ""

#: ../../guides/hooks-list.rst:150
msgid "Filters the string of blacklisted characters used to validate username during registration. The return value should be a string consisting of the disallowed characters. The default string can be found from ``$params['blacklist']``."
msgstr ""

#: ../../guides/hooks-list.rst:155
msgid "Object hooks"
msgstr ""

#: ../../guides/hooks-list.rst:159
msgid "**comments, <entity_type>**"
msgstr ""

#: ../../guides/hooks-list.rst:158
msgid "Triggered in ``elgg_view_comments()``. If returning content, this overrides the ``page/elements/comments`` view."
msgstr ""

#: ../../guides/hooks-list.rst:162
msgid "**comments:count, <entity_type>**"
msgstr ""

#: ../../guides/hooks-list.rst:162
msgid "Return the number of comments on ``$params['entity']``."
msgstr ""

#: ../../guides/hooks-list.rst:165
msgid "**likes:count, <entity_type>**"
msgstr ""

#: ../../guides/hooks-list.rst:165
msgid "Return the number of likes for ``$params['entity']``."
msgstr ""

#: ../../guides/hooks-list.rst:168
msgid "Action hooks"
msgstr ""

#: ../../guides/hooks-list.rst:171
msgid "**action, <action>**"
msgstr ""

#: ../../guides/hooks-list.rst:171
msgid "Triggered before executing action scripts. Return false to abort action."
msgstr ""

#: ../../guides/hooks-list.rst:174
msgid "**action_gatekeeper:permissions:check, all**"
msgstr ""

#: ../../guides/hooks-list.rst:174
msgid "Triggered after a CSRF token is validated. Return false to prevent validation."
msgstr ""

#: ../../guides/hooks-list.rst:178
msgid "**action_gatekeeper:upload_exceeded_msg, all**"
msgstr ""

#: ../../guides/hooks-list.rst:177
msgid "Triggered when a POST exceeds the max size allowed by the server. Return an error message to display."
msgstr ""

#: ../../guides/hooks-list.rst:181
msgid "**forward, <reason>**"
msgstr ""

#: ../../guides/hooks-list.rst:181
msgid "Filter the URL to forward a user to when ``forward($url, $reason)`` is called."
msgstr ""

#: ../../guides/hooks-list.rst:187
msgid "**response, action:<action>**"
msgstr ""

#: ../../guides/hooks-list.rst:184
msgid "Filter an instance of ``\\Elgg\\Http\\ResponseBuilder`` before it is sent to the client. This hook can be used to modify response content, status code, forward URL, or set additional response headers. Note that the ``<action>`` value is parsed from the request URL, therefore you may not be able to filter the responses of `action()` calls if they are nested within the another action script file."
msgstr ""

#: ../../guides/hooks-list.rst:206
msgid "**ajax_response, \\***"
msgstr ""

#: ../../guides/hooks-list.rst:195
msgid "When the ``elgg/Ajax`` AMD module is used, this hook gives access to the response object (``\\Elgg\\Services\\AjaxResponse``) so it can be altered/extended. The hook type depends on the method call:"
msgstr ""

#: ../../guides/hooks-list.rst:200
msgid "elgg/Ajax method"
msgstr ""

#: ../../guides/hooks-list.rst:200
msgid "plugin hook type"
msgstr ""

#: ../../guides/hooks-list.rst:202
msgid "action()"
msgstr ""

#: ../../guides/hooks-list.rst:202
msgid "action:<action_name>"
msgstr ""

#: ../../guides/hooks-list.rst:203
msgid "path()"
msgstr ""

#: ../../guides/hooks-list.rst:203
msgid "path:<url_path>"
msgstr ""

#: ../../guides/hooks-list.rst:204
msgid "view()"
msgstr ""

#: ../../guides/hooks-list.rst:204
msgid "view:<view_name>"
msgstr ""

#: ../../guides/hooks-list.rst:205
msgid "form()"
msgstr ""

#: ../../guides/hooks-list.rst:205
msgid "form:<action_name>"
msgstr ""

#: ../../guides/hooks-list.rst:212
msgid "**output, ajax**"
msgstr ""

#: ../../guides/hooks-list.rst:209
msgid "This filters the JSON output wrapper returned to the legacy ajax API (``elgg.ajax``, ``elgg.action``, etc.). Plugins can alter the output, forward URL, system messages, and errors. For the ``elgg/Ajax`` AMD module, use the ``ajax_response`` hook documented above."
msgstr ""

#: ../../guides/hooks-list.rst:217
msgid "Permission hooks"
msgstr ""

#: ../../guides/hooks-list.rst:233
msgid "**container_logic_check, <entity_type>**"
msgstr ""

#: ../../guides/hooks-list.rst:220
msgid "Triggered by ``ElggEntity:canWriteToContainer()`` before triggering ``permissions_check`` and ``container_permissions_check`` hooks. Unlike permissions hooks, logic check can be used to prevent certain entity types from being contained by other entity types, e.g. discussion replies should only be contained by discussions. This hook can also be used to apply status logic, e.g. do disallow new replies for closed discussions."
msgstr ""

#: ../../guides/hooks-list.rst:225
msgid "The handler should return ``false`` to prevent an entity from containing another entity. The default value passed to the hook is ``null``, so the handler can check if another hook has modified the value by checking if return value is set. Should this hook return ``false``, ``container_permissions_check`` and ``permissions_check`` hooks will not be triggered."
msgstr ""

#: ../../guides/hooks-list.rst:229
#: ../../guides/hooks-list.rst:243
msgid "The ``$params`` array will contain:"
msgstr ""

#: ../../guides/hooks-list.rst:231
#: ../../guides/hooks-list.rst:245
msgid "``container`` - An entity that will be used as a container"
msgstr ""

#: ../../guides/hooks-list.rst:232
#: ../../guides/hooks-list.rst:246
msgid "``user`` - User who will own the entity to be written to container"
msgstr ""

#: ../../guides/hooks-list.rst:233
#: ../../guides/hooks-list.rst:247
msgid "``subtype`` - Subtype of the entity to be written to container (entity type is assumed from hook type)"
msgstr ""

#: ../../guides/hooks-list.rst:247
msgid "**container_permissions_check, <entity_type>**"
msgstr ""

#: ../../guides/hooks-list.rst:236
msgid "Return boolean for if the user ``$params['user']`` can use the entity ``$params['container']`` as a container for an entity of ``<entity_type>`` and subtype ``$params['subtype']``."
msgstr ""

#: ../../guides/hooks-list.rst:239
msgid "In the rare case where an entity is created with neither the ``container_guid`` nor the ``owner_guid`` matching the logged in user, this hook is called *twice*, and in the first call ``$params['container']`` will be the *owner*, not the entity's real container."
msgstr ""

#: ../../guides/hooks-list.rst:250
msgid "**permissions_check, <entity_type>**"
msgstr ""

#: ../../guides/hooks-list.rst:250
msgid "Return boolean for if the user ``$params['user']`` can edit the entity ``$params['entity']``."
msgstr ""

#: ../../guides/hooks-list.rst:253
msgid "**permissions_check:delete, <entity_type>**"
msgstr ""

#: ../../guides/hooks-list.rst:253
msgid "Return boolean for if the user ``$params['user']`` can delete the entity ``$params['entity']``. Defaults to ``$entity->canEdit()``."
msgstr ""

#: ../../guides/hooks-list.rst:259
msgid "**permissions_check:delete, river**"
msgstr ""

#: ../../guides/hooks-list.rst:256
msgid "Return boolean for if the user ``$params['user']`` can delete the river item ``$params['item']``. Defaults to ``true`` for admins and ``false`` for other users."
msgstr ""

#: ../../guides/hooks-list.rst:259
msgid "This check is not performed when using the deprecated ``elgg_delete_river()``."
msgstr ""

#: ../../guides/hooks-list.rst:263
msgid "**permissions_check, widget_layout**"
msgstr ""

#: ../../guides/hooks-list.rst:262
msgid "Return boolean for if ``$params['user']`` can edit the widgets in the context passed as ``$params['context']`` and with a page owner of ``$params['page_owner']``."
msgstr ""

#: ../../guides/hooks-list.rst:267
msgid "**permissions_check:metadata, <entity_type>**"
msgstr ""

#: ../../guides/hooks-list.rst:266
msgid "Return boolean for if the user ``$params['user']`` can edit the metadata ``$params['metadata']`` on the entity ``$params['entity']``."
msgstr ""

#: ../../guides/hooks-list.rst:270
msgid "**permissions_check:comment, <entity_type>**"
msgstr ""

#: ../../guides/hooks-list.rst:270
msgid "Return boolean for if the user ``$params['user']`` can comment on the entity ``$params['entity']``."
msgstr ""

#: ../../guides/hooks-list.rst:276
msgid "**permissions_check:annotate:<annotation_name>, <entity_type>**"
msgstr ""

#: ../../guides/hooks-list.rst:273
msgid "Return boolean for if the user ``$params['user']`` can create an annotation ``<annotation_name>`` on the entity ``$params['entity']``. If logged in, the default is true."
msgstr ""

#: ../../guides/hooks-list.rst:276
msgid "This is called before the more general ``permissions_check:annotate`` hook, and its return value is that hook's initial value."
msgstr ""

#: ../../guides/hooks-list.rst:282
msgid "**permissions_check:annotate, <entity_type>**"
msgstr ""

#: ../../guides/hooks-list.rst:279
msgid "Return boolean for if the user ``$params['user']`` can create an annotation ``$params['annotation_name']`` on the entity ``$params['entity']``. if logged in, the default is true."
msgstr ""

#: ../../guides/hooks-list.rst:282
msgid "This is functions differently than the ``permissions_check:metadata`` hook by passing the annotation name instead of the metadata object."
msgstr ""

#: ../../guides/hooks-list.rst:286
msgid "**permissions_check:annotation**"
msgstr ""

#: ../../guides/hooks-list.rst:285
msgid "Return boolean for if the user in ``$params['user']`` can edit the annotation ``$params['annotation']`` on the entity ``$params['entity']``. The user can be null."
msgstr ""

#: ../../guides/hooks-list.rst:290
msgid "**fail, auth**"
msgstr ""

#: ../../guides/hooks-list.rst:289
msgid "Return the failure message if authentication failed. An array of previous PAM failure methods is passed as ``$params``."
msgstr ""

#: ../../guides/hooks-list.rst:293
msgid "**api_key, use**"
msgstr ""

#: ../../guides/hooks-list.rst:293
msgid "Triggered by ``api_auth_key()``. Returning false prevents the key from being authenticated."
msgstr ""

#: ../../guides/hooks-list.rst:298
msgid "**access:collections:read, user**"
msgstr ""

#: ../../guides/hooks-list.rst:296
msgid "Filters an array of access IDs that the user ``$params['user_id']`` can see."
msgstr ""

#: ../../guides/hooks-list.rst:298
#: ../../guides/hooks-list.rst:308
msgid "The handler needs to either not use parts of the API that use the access system (triggering the hook again) or to ignore the second call. Otherwise, an infinite loop will be created."
msgstr ""

#: ../../guides/hooks-list.rst:301
msgid "Filters an array of access IDs that the user ``$params['user_id']`` can write to. In get_write_access_array(), this hook filters the return value, so it can be used to alter the available options in the input/access view. For core plugins, the value \"input_params\" has the keys \"entity\" (ElggEntity|false), \"entity_type\" (string), \"entity_subtype\" (string), \"container_guid\" (int) are provided. An empty entity value generally means the form is to create a new object."
msgstr ""

#: ../../guides/hooks-list.rst:311
msgid "**access:collections:addcollection, collection**"
msgstr ""

#: ../../guides/hooks-list.rst:311
msgid "Triggered after an access collection ``$params['collection_id']`` is created."
msgstr ""

#: ../../guides/hooks-list.rst:315
msgid "**access:collections:deletecollection, collection**"
msgstr ""

#: ../../guides/hooks-list.rst:314
msgid "Triggered before an access collection ``$params['collection_id']`` is deleted. Return false to prevent deletion."
msgstr ""

#: ../../guides/hooks-list.rst:319
msgid "**access:collections:add_user, collection**"
msgstr ""

#: ../../guides/hooks-list.rst:318
msgid "Triggered before adding user ``$params['user_id']`` to collection ``$params['collection_id']``. Return false to prevent adding."
msgstr ""

#: ../../guides/hooks-list.rst:323
msgid "**access:collections:remove_user, collection**"
msgstr ""

#: ../../guides/hooks-list.rst:322
msgid "Triggered before removing user ``$params['user_id']`` to collection ``$params['collection_id']``. Return false to prevent removal."
msgstr ""

#: ../../guides/hooks-list.rst:326
msgid "**get_sql, access**"
msgstr ""

#: ../../guides/hooks-list.rst:326
msgid "Filters the SQL clauses used in ``_elgg_get_access_where_sql()``."
msgstr ""

#: ../../guides/hooks-list.rst:330
msgid "**gatekeeper, <entity_type>:<entity_subtype>**"
msgstr ""

#: ../../guides/hooks-list.rst:329
msgid "Filters the result of ``elgg_entity_gatekeeper()`` to prevent access to an entity that user would otherwise have access to. A handler should return false to deny access to an entity."
msgstr ""

#: ../../guides/hooks-list.rst:333
#: ../../guides/notifications.rst:2
#: ../../guides/upgrading.rst:110
#: ../../guides/upgrading.rst:995
msgid "Notifications"
msgstr ""

#: ../../guides/hooks-list.rst:335
msgid "These hooks are listed chronologically in the lifetime of the notification event. Note that not all hooks apply to instant notifications."
msgstr ""

#: ../../guides/hooks-list.rst:345
msgid "**enqueue, notification**"
msgstr ""

#: ../../guides/hooks-list.rst:339
msgid "Can be used to prevent a notification event from sending **subscription** notifications. Hook handler must return ``false`` to prevent a subscription notification event from being enqueued."
msgstr ""

#: ../../guides/hooks-list.rst:342
#: ../../guides/hooks-list.rst:353
#: ../../guides/hooks-list.rst:373
#: ../../guides/hooks-list.rst:428
#: ../../guides/hooks-list.rst:451
#: ../../guides/hooks-list.rst:578
msgid "``$params`` array includes:"
msgstr ""

#: ../../guides/hooks-list.rst:344
msgid "``object`` - object of the notification event"
msgstr ""

#: ../../guides/hooks-list.rst:345
msgid "``action`` - action that triggered the notification event. E.g. corresponds to ``publish`` when ``elgg_trigger_event('publish', 'object', $object)`` is called"
msgstr ""

#: ../../guides/hooks-list.rst:359
msgid "**get, subscriptions**"
msgstr ""

#: ../../guides/hooks-list.rst:348
msgid "Filters subscribers of the notification event. Applies to **subscriptions** and **instant** notifications. In case of a subscription event, by default, the subscribers list consists of the users subscribed to the container entity of the event object. In case of an instant notification event, the subscribers list consists of the users passed as recipients to ``notify_user()``"
msgstr ""

#: ../../guides/hooks-list.rst:355
#: ../../guides/hooks-list.rst:375
#: ../../guides/hooks-list.rst:386
#: ../../guides/hooks-list.rst:403
#: ../../guides/hooks-list.rst:453
msgid "``event`` - ``\\Elgg\\Notifications\\NotificationEvent`` instance that describes the notification event"
msgstr ""

#: ../../guides/hooks-list.rst:356
#: ../../guides/hooks-list.rst:393
#: ../../guides/hooks-list.rst:410
msgid "``origin`` - ``subscriptions_service`` or ``instant_notifications``"
msgstr ""

#: ../../guides/hooks-list.rst:357
msgid "``methods_override`` - delivery method preference for instant notifications"
msgstr ""

#: ../../guides/hooks-list.rst:359
msgid "Handlers must return an array in the form:"
msgstr ""

#: ../../guides/hooks-list.rst:376
msgid "**send:before, notifications**"
msgstr ""

#: ../../guides/hooks-list.rst:370
msgid "Triggered before the notification event queue is processed. Can be used to terminate the notification event. Applies to **subscriptions** and **instant** notifications."
msgstr ""

#: ../../guides/hooks-list.rst:376
#: ../../guides/hooks-list.rst:454
msgid "``subscriptions`` - a list of subscriptions. See ``'get', 'subscriptions'`` hook for details"
msgstr ""

#: ../../guides/hooks-list.rst:393
msgid "**prepare, notification**"
msgstr ""

#: ../../guides/hooks-list.rst:379
msgid "A high level hook that can be used to alter an instance of ``\\Elgg\\Notifications\\Notification`` before it is sent to the user. Applies to **subscriptions** and **instant** notifications. This hook is triggered before a more granular ``'prepare', 'notification:<action>:<entity_type>:<entity_subtype>'`` and after ``'send:before', 'notifications``. Hook handler should return an altered notification object."
msgstr ""

#: ../../guides/hooks-list.rst:384
msgid "``$params`` may vary based on the notification type and may include:"
msgstr ""

#: ../../guides/hooks-list.rst:387
#: ../../guides/hooks-list.rst:404
msgid "``object`` - object of the notification ``event``. Can be ``null`` for instant notifications"
msgstr ""

#: ../../guides/hooks-list.rst:388
#: ../../guides/hooks-list.rst:405
msgid "``action`` - action that triggered the notification ``event``. May default to ``notify_user`` for instant notifications"
msgstr ""

#: ../../guides/hooks-list.rst:389
#: ../../guides/hooks-list.rst:406
msgid "``method`` - delivery method (e.g. ``email``, ``site``)"
msgstr ""

#: ../../guides/hooks-list.rst:390
#: ../../guides/hooks-list.rst:407
msgid "``sender`` - sender"
msgstr ""

#: ../../guides/hooks-list.rst:391
#: ../../guides/hooks-list.rst:408
msgid "``recipient`` - recipient"
msgstr ""

#: ../../guides/hooks-list.rst:392
#: ../../guides/hooks-list.rst:409
msgid "``language`` - language of the notification (recipient's language)"
msgstr ""

#: ../../guides/hooks-list.rst:410
msgid "**prepare, notification:<action>:<entity_type>:<entity_type>**"
msgstr ""

#: ../../guides/hooks-list.rst:396
msgid "A granular hook that can be used to filter a notification ``\\Elgg\\Notifications\\Notification`` before it is sent to the user. Applies to **subscriptions** and **instant** notifications. In case of instant notifications that have not received an object, the hook will be called as ``'prepare', 'notification:<action>'``. In case of instant notifications that have not received an action name, it will default to ``notify_user``."
msgstr ""

#: ../../guides/hooks-list.rst:401
msgid "``$params`` include:"
msgstr ""

#: ../../guides/hooks-list.rst:421
msgid "**format, notification:<method>**"
msgstr ""

#: ../../guides/hooks-list.rst:413
msgid "This hook can be used to format a notification before it is passed to the ``'send', 'notification:<method>'`` hook. Applies to **subscriptions** and **instant** notifications. The hook handler should return an instance of ``\\Elgg\\Notifications\\Notification``. The hook does not receive any ``$params``. Some of the use cases include:"
msgstr ""

#: ../../guides/hooks-list.rst:419
msgid "Strip tags from notification title and body for plaintext email notifications"
msgstr ""

#: ../../guides/hooks-list.rst:420
msgid "Inline HTML styles for HTML email notifications"
msgstr ""

#: ../../guides/hooks-list.rst:421
msgid "Wrap notification in a template, add signature etc."
msgstr ""

#: ../../guides/hooks-list.rst:430
msgid "**send, notification:<method>**"
msgstr ""

#: ../../guides/hooks-list.rst:424
msgid "Delivers a notification. Applies to **subscriptions** and **instant** notifications. The handler must return ``true`` or ``false`` indicating the success of the delivery."
msgstr ""

#: ../../guides/hooks-list.rst:430
msgid "``notification`` - a notification object ``\\Elgg\\Notifications\\Notification``"
msgstr ""

#: ../../guides/hooks-list.rst:445
msgid "**email, system**"
msgstr ""

#: ../../guides/hooks-list.rst:433
msgid "Triggered by ``elgg_send_email()``. Applies to **subscriptions** and **instant** notifications with ``email`` method. This hook can be used to alter email parameters (subject, body, headers etc) - the handler should return an array of altered parameters. This hook can also be used to implement a custom email transport (in place of Elgg's default plaintext ``\\Zend\\Mail\\Transport\\Sendmail``) - the handler must return ``true`` or ``false`` to indicate whether the email was sent using a custom transport."
msgstr ""

#: ../../guides/hooks-list.rst:438
msgid "``$params`` contains:"
msgstr ""

#: ../../guides/hooks-list.rst:440
msgid "``to`` - email address or string in the form ``Name <name@example.org>`` of the recipient"
msgstr ""

#: ../../guides/hooks-list.rst:441
msgid "``from`` - email address or string in the form ``Name <name@example.org>`` of the sender"
msgstr ""

#: ../../guides/hooks-list.rst:442
msgid "``subject`` - subject line of the email"
msgstr ""

#: ../../guides/hooks-list.rst:443
msgid "``body`` - body of the email"
msgstr ""

#: ../../guides/hooks-list.rst:444
msgid "``headers`` - an array of headers"
msgstr ""

#: ../../guides/hooks-list.rst:445
msgid "``params`` - other parameters inherited from the notification object or passed directly to ``elgg_send_email()``"
msgstr ""

#: ../../guides/hooks-list.rst:456
msgid "**send:after, notifications**"
msgstr ""

#: ../../guides/hooks-list.rst:448
msgid "Triggered after all notifications in the queue for the notifications event have been processed. Applies to **subscriptions** and **instant** notifications."
msgstr ""

#: ../../guides/hooks-list.rst:455
msgid "``deliveries`` - a matrix of delivery statuses by user for each delivery method"
msgstr ""

#: ../../guides/hooks-list.rst:459
#: ../../guides/routing.rst:2
msgid "Routing"
msgstr ""

#: ../../guides/hooks-list.rst:466
msgid "**route, <identifier>**"
msgstr ""

#: ../../guides/hooks-list.rst:462
msgid "Allows applying logic or returning a response before the page handler is called. See :doc:`routing` for details. Note that plugins using this hook to rewrite paths, will not be able to filter the response object by its final path and should either switch to ``route:rewrite, <identifier>`` hook or use ``response, path:<path>`` hook for the original path."
msgstr ""

#: ../../guides/hooks-list.rst:469
msgid "**route:rewrite, <identifier>**"
msgstr ""

#: ../../guides/hooks-list.rst:469
msgid "Allows altering the site-relative URL path. See :doc:`routing` for details."
msgstr ""

#: ../../guides/hooks-list.rst:476
msgid "**response, path:<path>**"
msgstr ""

#: ../../guides/hooks-list.rst:472
msgid "Filter an instance of ``\\Elgg\\Http\\ResponseBuilder`` before it is sent to the client. This hook type will only be used if the path did not start with \"action/\" or \"ajax/\". This hook can be used to modify response content, status code, forward URL, or set additional response headers. Note that the ``<path>`` value is parsed from the request URL, therefore plugins using the ``route`` hook should use the original ``<path>`` to filter the response, or switch to using the ``route:rewrite`` hook."
msgstr ""

#: ../../guides/hooks-list.rst:481
msgid "**ajax_response, path:<path>**"
msgstr ""

#: ../../guides/hooks-list.rst:479
msgid "Filters ajax responses before they're sent back to the ``elgg/Ajax`` module. This hook type will only be used if the path did not start with \"action/\" or \"ajax/\"."
msgstr ""

#: ../../guides/hooks-list.rst:486
#: ../../guides/plugins/plugin-skeleton.rst:142
#: ../../guides/views.rst:2
msgid "Views"
msgstr ""

#: ../../guides/hooks-list.rst:489
msgid "**view_vars, <view_name>**"
msgstr ""

#: ../../guides/hooks-list.rst:489
msgid "Filters the ``$vars`` array passed to the view"
msgstr ""

#: ../../guides/hooks-list.rst:492
msgid "**view, <view_name>**"
msgstr ""

#: ../../guides/hooks-list.rst:492
msgid "Filters the returned content of the view"
msgstr ""

#: ../../guides/hooks-list.rst:495
msgid "**layout, page**"
msgstr ""

#: ../../guides/hooks-list.rst:495
msgid "In ``elgg_view_layout()``, filters the layout name"
msgstr ""

#: ../../guides/hooks-list.rst:498
msgid "**shell, page**"
msgstr ""

#: ../../guides/hooks-list.rst:498
msgid "In ``elgg_view_page()``, filters the page shell name"
msgstr ""

#: ../../guides/hooks-list.rst:506
msgid "**head, page**"
msgstr ""

#: ../../guides/hooks-list.rst:501
msgid "In ``elgg_view_page()``, filters ``$vars['head']`` Return value contains an array with ``title``, ``metas`` and ``links`` keys, where ``metas`` is an array of elements to be formatted as ``<meta>`` head tags, and ``links`` is an array of elements to be formatted as ``<link>`` head tags. Each meta and link element contains a set of key/value pairs that are formatted into html tag attributes, e.g."
msgstr ""

#: ../../guides/hooks-list.rst:536
msgid "**ajax_response, view:<view>**"
msgstr ""

#: ../../guides/hooks-list.rst:536
msgid "Filters ``ajax/view/`` responses before they're sent back to the ``elgg/Ajax`` module."
msgstr ""

#: ../../guides/hooks-list.rst:539
msgid "**ajax_response, form:<action>**"
msgstr ""

#: ../../guides/hooks-list.rst:539
msgid "Filters ``ajax/form/`` responses before they're sent back to the ``elgg/Ajax`` module."
msgstr ""

#: ../../guides/hooks-list.rst:544
msgid "**response, view:<view_name>**"
msgstr ""

#: ../../guides/hooks-list.rst:542
msgid "Filter an instance of ``\\Elgg\\Http\\ResponseBuilder`` before it is sent to the client. Applies to request to ``/ajax/view/<view_name>``. This hook can be used to modify response content, status code, forward URL, or set additional response headers."
msgstr ""

#: ../../guides/hooks-list.rst:549
msgid "**response, form:<form_name>**"
msgstr ""

#: ../../guides/hooks-list.rst:547
msgid "Filter an instance of ``\\Elgg\\Http\\ResponseBuilder`` before it is sent to the client. Applies to request to ``/ajax/form/<form_name>``. This hook can be used to modify response content, status code, forward URL, or set additional response headers."
msgstr ""

#: ../../guides/hooks-list.rst:555
msgid "**table_columns:call, <name>**"
msgstr ""

#: ../../guides/hooks-list.rst:552
msgid "When the method ``elgg()->table_columns->$name()`` is called, this hook is called to allow plugins to override or provide an implementation. Handlers receive the method arguments via ``$params['arguments']`` and should return an instance of ``Elgg\\Views\\TableColumn`` if they wish to specify the column directly."
msgstr ""

#: ../../guides/hooks-list.rst:558
msgid "Files"
msgstr ""

#: ../../guides/hooks-list.rst:562
msgid "**mime_type, file**"
msgstr ""

#: ../../guides/hooks-list.rst:561
msgid "Return the mimetype for the filename ``$params['filename']`` with original filename ``$params['original_filename']`` and with the default detected mimetype of ``$params['default']``."
msgstr ""

#: ../../guides/hooks-list.rst:569
msgid "**simple_type, file**"
msgstr ""

#: ../../guides/hooks-list.rst:565
msgid "In ``elgg_get_file_simple_type()``, filters the return value. The hook uses ``$params['mime_type']`` (e.g. ``application/pdf`` or ``image/jpeg``) and determines an overall category like ``document`` or ``image``. The bundled file plugin and other-third party plugins usually store ``simpletype`` metadata on file entities and make use of it when serving icons and constructing ``ege*`` filters and menus."
msgstr ""

#: ../../guides/hooks-list.rst:581
msgid "**upload, file**"
msgstr ""

#: ../../guides/hooks-list.rst:572
msgid "Allows plugins to implement custom logic for moving an uploaded file into an instance of ``ElggFile``. The handler must return ``true`` to indicate that the uploaded file was moved. The handler must return ``false`` to indicate that the uploaded file could not be moved. Other returns will indicate that ``ElggFile::acceptUploadedFile`` should proceed with the default upload logic."
msgstr ""

#: ../../guides/hooks-list.rst:580
msgid "``file`` - instance of ``ElggFile`` to write to"
msgstr ""

#: ../../guides/hooks-list.rst:581
msgid "``upload`` - instance of Symfony's ``UploadedFile``"
msgstr ""

#: ../../guides/hooks-list.rst:586
msgid "Other"
msgstr ""

#: ../../guides/hooks-list.rst:589
msgid "**config, comments_per_page**"
msgstr ""

#: ../../guides/hooks-list.rst:589
msgid "Filters the number of comments displayed per page. Default is 25."
msgstr ""

#: ../../guides/hooks-list.rst:596
msgid "**default, access**"
msgstr ""

#: ../../guides/hooks-list.rst:592
msgid "In get_default_access(), this hook filters the return value, so it can be used to alter the default value in the input/access view. For core plugins, the value \"input_params\" has the keys \"entity\" (ElggEntity|false), \"entity_type\" (string), \"entity_subtype\" (string), \"container_guid\" (int) are provided. An empty entity value generally means the form is to create a new object."
msgstr ""

#: ../../guides/hooks-list.rst:600
msgid "**entity:icon:sizes, <entity_type>**"
msgstr ""

#: ../../guides/hooks-list.rst:599
msgid "Triggered by ``elgg_get_icon_sizes()`` and sets entity type/subtype specific icon sizes. ``entity_subtype`` will be passed with the ``$params`` array to the callback."
msgstr ""

#: ../../guides/hooks-list.rst:617
msgid "**entity:<icon_type>:sizes, <entity_type>**"
msgstr ""

#: ../../guides/hooks-list.rst:603
msgid "Allows filtering sizes for custom icon types, see ``entity:icon:sizes, <entity_type>``."
msgstr ""

#: ../../guides/hooks-list.rst:605
msgid "The hook must return an associative array where keys are the names of the icon sizes (e.g. \"large\"), and the values are arrays with the following keys:"
msgstr ""

#: ../../guides/hooks-list.rst:608
msgid "``w`` - Width of the image in pixels"
msgstr ""

#: ../../guides/hooks-list.rst:609
msgid "``h`` - Height of the image in pixels"
msgstr ""

#: ../../guides/hooks-list.rst:610
msgid "``square`` - Should the aspect ratio be a square (true/false)"
msgstr ""

#: ../../guides/hooks-list.rst:611
msgid "``upscale`` - Should the image be upscaled in case it is smaller than the given width and height (true/false)"
msgstr ""

#: ../../guides/hooks-list.rst:614
msgid "If the configuration array for an image size is empty, the image will be saved as an exact copy of the source without resizing or cropping."
msgstr ""

#: ../../guides/hooks-list.rst:617
#: ../../guides/i18n.rst:46
#: ../../guides/notifications.rst:24
#: ../../guides/notifications.rst:186
#: ../../guides/notifications.rst:210
#: ../../guides/notifications.rst:265
msgid "Example:"
msgstr ""

#: ../../guides/hooks-list.rst:649
msgid "**entity:icon:url, <entity_type>**"
msgstr ""

#: ../../guides/hooks-list.rst:637
msgid "Triggered when entity icon URL is requested, see :ref:`entity icons <guides/database#entity-icons>`. Callback should return URL for the icon of size ``$params['size']`` for the entity ``$params['entity']``. Following parameters are available through the ``$params`` array:"
msgstr ""

#: ../../guides/hooks-list.rst:641
msgid "entity"
msgstr ""

#: ../../guides/hooks-list.rst:642
msgid "Entity for which icon url is requested."
msgstr ""

#: ../../guides/hooks-list.rst:643
msgid "viewtype"
msgstr ""

#: ../../guides/hooks-list.rst:644
msgid "The type of :ref:`view <guides/views#listing-entities>` e.g. ``'default'`` or ``'json'``."
msgstr ""

#: ../../guides/hooks-list.rst:646
msgid "size"
msgstr ""

#: ../../guides/hooks-list.rst:646
msgid "Size requested, see :ref:`entity icons <guides/database#entity-icons>` for possible values."
msgstr ""

#: ../../guides/hooks-list.rst:648
msgid "Example on how one could default to a Gravatar icon for users that have not yet uploaded an avatar:"
msgstr ""

#: ../../guides/hooks-list.rst:683
msgid "**entity:<icon_type>:url, <entity_type>**"
msgstr ""

#: ../../guides/hooks-list.rst:683
msgid "Allows filtering URLs for custom icon types, see ``entity:icon:url, <entity_type>``"
msgstr ""

#: ../../guides/hooks-list.rst:688
msgid "**entity:icon:file, <entity_type>**"
msgstr ""

#: ../../guides/hooks-list.rst:686
msgid "Triggered by ``ElggEntity::getIcon()`` and allows plugins to provide an alternative ``ElggIcon`` object that points to a custom location of the icon on filestore. The handler must return an instance of ``ElggIcon`` or an exception will be thrown."
msgstr ""

#: ../../guides/hooks-list.rst:691
msgid "**entity:<icon_type>:file, <entity_type>**"
msgstr ""

#: ../../guides/hooks-list.rst:691
msgid "Allows filtering icon file object for custom icon types, see ``entity:icon:file, <entity_type>``"
msgstr ""

#: ../../guides/hooks-list.rst:703
msgid "**entity:<icon_type>:prepare, <entity_type>**"
msgstr ""

#: ../../guides/hooks-list.rst:694
msgid "Triggered by ``ElggEntity::saveIcon*()`` methods and can be used to prepare an image from uploaded/linked file. This hook can be used to e.g. rotate the image before it is resized/cropped, or it can be used to extract an image frame if the uploaded file is a video. The handler must return an instance of ``ElggFile`` with a `simpletype` that resolves to `image`. The ``$return`` value passed to the hook is an instance of ``ElggFile`` that points to a temporary copy of the uploaded/linked file."
msgstr ""

#: ../../guides/hooks-list.rst:700
msgid "The ``$params`` array contains:"
msgstr ""

#: ../../guides/hooks-list.rst:702
#: ../../guides/hooks-list.rst:710
#: ../../guides/hooks-list.rst:720
#: ../../guides/hooks-list.rst:728
msgid "``entity`` - entity that owns the icons"
msgstr ""

#: ../../guides/hooks-list.rst:703
msgid "``file`` - original input file before it has been modified by other hooks"
msgstr ""

#: ../../guides/hooks-list.rst:712
msgid "**entity:<icon_type>:save, <entity_type>**"
msgstr ""

#: ../../guides/hooks-list.rst:706
msgid "Triggered by ``ElggEntity::saveIcon*()`` methods and can be used to apply custom image manipulation logic to resizing/cropping icons. The handler must return ``true`` to prevent the core APIs from resizing/cropping icons. The ``$params`` array contains:"
msgstr ""

#: ../../guides/hooks-list.rst:711
msgid "``file`` - ``ElggFile`` object that points to the image file to be used as source for icons"
msgstr ""

#: ../../guides/hooks-list.rst:712
#: ../../guides/hooks-list.rst:721
msgid "``x1``, ``y1``, ``x2``, ``y2`` - cropping coordinates"
msgstr ""

#: ../../guides/hooks-list.rst:721
msgid "**entity:<icon_type>:saved, <entity_type>**"
msgstr ""

#: ../../guides/hooks-list.rst:715
msgid "Triggered by ``ElggEntity::saveIcon*()`` methods once icons have been created. This hook can be used by plugins to create river items, update cropping coordinates for custom icon types etc. The handler can access the created icons using ``ElggEntity::getIcon()``. The ``$params`` array contains:"
msgstr ""

#: ../../guides/hooks-list.rst:728
msgid "**entity:<icon_type>:delete, <entity_type>**"
msgstr ""

#: ../../guides/hooks-list.rst:724
msgid "Triggered by ``ElggEntity::deleteIcon()`` method and can be used for clean up operations. This hook is triggered before the icons are deleted. The handler can return ``false`` to prevent icons from being deleted. The ``$params`` array contains:"
msgstr ""

#: ../../guides/hooks-list.rst:733
msgid "**entity:url, <entity_type>**"
msgstr ""

#: ../../guides/hooks-list.rst:731
msgid "Return the URL for the entity ``$params['entity']``. Note: Generally it is better to override the ``getUrl()`` method of ElggEntity. This hook should be used when it's not possible to subclass (like if you want to extend a bundled plugin without overriding many views)."
msgstr ""

#: ../../guides/hooks-list.rst:737
msgid "**to:object, <entity_type|metadata|annotation|relationship|river_item>**"
msgstr ""

#: ../../guides/hooks-list.rst:736
msgid "Converts the entity ``$params['entity']`` to a StdClass object. This is used mostly for exporting entity properties for portable data formats like JSON and XML."
msgstr ""

#: ../../guides/hooks-list.rst:740
msgid "**extender:url, <annotation|metadata>**"
msgstr ""

#: ../../guides/hooks-list.rst:740
msgid "Return the URL for the annotation or metadatum ``$params['extender']``."
msgstr ""

#: ../../guides/hooks-list.rst:743
msgid "**file:icon:url, override**"
msgstr ""

#: ../../guides/hooks-list.rst:743
msgid "Override a file icon URL."
msgstr ""

#: ../../guides/hooks-list.rst:746
msgid "**is_member, group**"
msgstr ""

#: ../../guides/hooks-list.rst:746
msgid "Return boolean for if the user ``$params['user']`` is a member of the group ``$params['group']``."
msgstr ""

#: ../../guides/hooks-list.rst:750
msgid "**entity:annotate, <entity_type>**"
msgstr ""

#: ../../guides/hooks-list.rst:749
msgid "Triggered in ``elgg_view_entity_annotations()``, which is called by ``elgg_view_entity()``. Can be used to add annotations to all full entity views."
msgstr ""

#: ../../guides/hooks-list.rst:759
msgid "**usersetting, plugin**"
msgstr ""

#: ../../guides/hooks-list.rst:753
msgid "Filter user settings for plugins. ``$params`` contains:"
msgstr ""

#: ../../guides/hooks-list.rst:755
msgid "``user`` - An ElggUser instance"
msgstr ""

#: ../../guides/hooks-list.rst:756
#: ../../guides/hooks-list.rst:764
msgid "``plugin`` - An ElggPlugin instance"
msgstr ""

#: ../../guides/hooks-list.rst:757
#: ../../guides/hooks-list.rst:765
msgid "``plugin_id`` - The plugin ID"
msgstr ""

#: ../../guides/hooks-list.rst:758
#: ../../guides/hooks-list.rst:766
msgid "``name`` - The name of the setting"
msgstr ""

#: ../../guides/hooks-list.rst:759
#: ../../guides/hooks-list.rst:767
msgid "``value`` - The value to set"
msgstr ""

#: ../../guides/hooks-list.rst:767
msgid "**setting, plugin**"
msgstr ""

#: ../../guides/hooks-list.rst:762
msgid "Filter plugin settings. ``$params`` contains:"
msgstr ""

#: ../../guides/hooks-list.rst:770
msgid "**relationship:url, <relationship_name>**"
msgstr ""

#: ../../guides/hooks-list.rst:770
msgid "Filter the URL for the relationship object ``$params['relationship']``."
msgstr ""

#: ../../guides/hooks-list.rst:774
msgid "**profile:fields, group**"
msgstr ""

#: ../../guides/hooks-list.rst:773
#: ../../guides/hooks-list.rst:784
msgid "Filter an array of profile fields. The result should be returned as an array in the format ``name => input view name``. For example:"
msgstr ""

#: ../../guides/hooks-list.rst:785
msgid "**profile:fields, profile**"
msgstr ""

#: ../../guides/hooks-list.rst:795
msgid "**widget_settings, <widget_handler>**"
msgstr ""

#: ../../guides/hooks-list.rst:794
msgid "Triggered when saving a widget settings ``$params['params']`` for widget ``$params['widget']``. If handling saving the settings, the handler should return true to prevent the default code from running."
msgstr ""

#: ../../guides/hooks-list.rst:799
msgid "**handlers, widgets**"
msgstr ""

#: ../../guides/hooks-list.rst:798
msgid "Triggered when a list of available widgets is needed. Plugins can conditionally add or remove widgets from this list or modify attributes of existing widgets like ``context`` or ``multiple``."
msgstr ""

#: ../../guides/hooks-list.rst:803
msgid "**get_list, default_widgets**"
msgstr ""

#: ../../guides/hooks-list.rst:802
msgid "Filters a list of default widgets to add for newly registered users. The list is an array of arrays in the format:"
msgstr ""

#: ../../guides/hooks-list.rst:816
msgid "**public_pages, walled_garden**"
msgstr ""

#: ../../guides/hooks-list.rst:815
msgid "Filter the URLs that are can be seen by logged out users if Walled Garden is enabled. ``$value`` is an array of regex strings that will allow access if matched."
msgstr ""

#: ../../guides/hooks-list.rst:821
msgid "**volatile, metadata**"
msgstr ""

#: ../../guides/hooks-list.rst:819
msgid "Triggered when exporting an entity through the export handler. This is rare. This allows handler to handle any volatile (non-persisted) metadata on the entity. It's preferred to use the ``to:object, <type>`` hook."
msgstr ""

#: ../../guides/hooks-list.rst:825
msgid "**maintenance:allow, url**"
msgstr ""

#: ../../guides/hooks-list.rst:825
msgid "Return boolean if the URL ``$params['current_url']`` and the path ``$params['current_path']``"
msgstr ""

#: ../../guides/hooks-list.rst:825
msgid "is allowed during maintenance mode."
msgstr ""

#: ../../guides/hooks-list.rst:828
msgid "**robots.txt, site**"
msgstr ""

#: ../../guides/hooks-list.rst:828
msgid "Filter the robots.txt values for ``$params['site']``."
msgstr ""

#: ../../guides/hooks-list.rst:831
msgid "**config, amd**"
msgstr ""

#: ../../guides/hooks-list.rst:831
msgid "Filter the AMD config for the requirejs library."
msgstr ""

#: ../../guides/hooks-list.rst:837
msgid "Embed"
msgstr ""

#: ../../guides/hooks-list.rst:839
msgid "**embed_get_items, <active_section>**"
msgstr ""

#: ../../guides/hooks-list.rst:841
msgid "**embed_get_sections, all**"
msgstr ""

#: ../../guides/hooks-list.rst:843
msgid "**embed_get_upload_sections, all**"
msgstr ""

#: ../../guides/hooks-list.rst:846
msgid "Groups"
msgstr ""

#: ../../guides/hooks-list.rst:849
msgid "**profile_buttons, group**"
msgstr ""

#: ../../guides/hooks-list.rst:849
msgid "Filters buttons (``ElggMenuItem`` instances) to be registered in the title menu of the group profile page"
msgstr ""

#: ../../guides/hooks-list.rst:852
msgid "**tool_options, group**"
msgstr ""

#: ../../guides/hooks-list.rst:852
msgid "Use this hook to influence the available group tool options"
msgstr ""

#: ../../guides/hooks-list.rst:855
msgid "HTMLawed"
msgstr ""

#: ../../guides/hooks-list.rst:858
msgid "**allowed_styles, htmlawed**"
msgstr ""

#: ../../guides/hooks-list.rst:858
msgid "Filter the HTMLawed allowed style array."
msgstr ""

#: ../../guides/hooks-list.rst:861
msgid "**config, htmlawed**"
msgstr ""

#: ../../guides/hooks-list.rst:861
msgid "Filter the HTMLawed config array."
msgstr ""

#: ../../guides/hooks-list.rst:864
msgid "Likes"
msgstr ""

#: ../../guides/hooks-list.rst:870
msgid "**likes:is_likable, <type>:<subtype>**"
msgstr ""

#: ../../guides/hooks-list.rst:867
msgid "This is called to set the default permissions for whether to display/allow likes on an entity of type ``<type>`` and subtype ``<subtype>``."
msgstr ""

#: ../../guides/hooks-list.rst:870
msgid "The callback ``'Elgg\\Values::getTrue'`` is a useful handler for this hook."
msgstr ""

#: ../../guides/hooks-list.rst:873
msgid "Members"
msgstr ""

#: ../../guides/hooks-list.rst:876
msgid "**members:list, <page_segment>**"
msgstr ""

#: ../../guides/hooks-list.rst:876
msgid "To handle the page ``/members/$page_segment``, register for this hook and return the HTML of the list."
msgstr ""

#: ../../guides/hooks-list.rst:880
msgid "**members:config, tabs**"
msgstr ""

#: ../../guides/hooks-list.rst:879
msgid "This hook is used to assemble an array of tabs to be passed to the navigation/tabs view for the members pages."
msgstr ""

#: ../../guides/hooks-list.rst:883
msgid "Twitter API"
msgstr ""

#: ../../guides/hooks-list.rst:887
msgid "**authorize, twitter_api**"
msgstr ""

#: ../../guides/hooks-list.rst:886
msgid "Triggered when a user is authorizes Twitter for a login. ``$params['token']`` contains the Twitter authorization token."
msgstr ""

#: ../../guides/hooks-list.rst:890
msgid "Reported Content"
msgstr ""

#: ../../guides/hooks-list.rst:893
msgid "**reportedcontent:add, system**"
msgstr ""

#: ../../guides/hooks-list.rst:893
msgid "Triggered after adding the reported content object ``$params['report']``. Return false to delete report."
msgstr ""

#: ../../guides/hooks-list.rst:896
msgid "**reportedcontent:archive, system**"
msgstr ""

#: ../../guides/hooks-list.rst:896
msgid "Triggered before archiving the reported content object ``$params['report']``. Return false to prevent archiving."
msgstr ""

#: ../../guides/hooks-list.rst:899
msgid "**reportedcontent:delete, system**"
msgstr ""

#: ../../guides/hooks-list.rst:899
msgid "Triggered before deleting the reported content object ``$params['report']``. Return false to prevent deleting."
msgstr ""

#: ../../guides/hooks-list.rst:902
msgid "Search"
msgstr ""

#: ../../guides/hooks-list.rst:906
msgid "**search, <type>:<subtype>**"
msgstr ""

#: ../../guides/hooks-list.rst:905
msgid "Filter more granular search results than searching by type alone. Must return an array with ``count`` as the total count of results and  ``entities`` an array of ElggUser entities."
msgstr ""

#: ../../guides/hooks-list.rst:908
msgid "**search, tags**"
msgstr ""

#: ../../guides/hooks-list.rst:912
msgid "**search, <type>**"
msgstr ""

#: ../../guides/hooks-list.rst:911
msgid "Filter the search for entities for type ``$type``. Must return an array with ``count`` as the total count of results and  ``entities`` an array of ElggUser entities."
msgstr ""

#: ../../guides/hooks-list.rst:915
msgid "Filter an array of search types. This allows plugins to add custom types that don't correspond directly to entities."
msgstr ""

#: ../../guides/hooks-list.rst:920
msgid "**search_types, get_queries**"
msgstr ""

#: ../../guides/hooks-list.rst:919
msgid "Before a search this filters the types queried. This can be used to reorder the display of search results."
msgstr ""

#: ../../guides/hooks-list.rst:923
msgid "Web Services"
msgstr ""

#: ../../guides/hooks-list.rst:927
msgid "**rest, init**"
msgstr ""

#: ../../guides/hooks-list.rst:926
msgid "Triggered by the web services rest handler. Plugins can set up their own authentication handlers, then return ``true`` to prevent the default handlers from being registered."
msgstr ""

#: ../../guides/hooks-list.rst:929
msgid "**rest:output, <method_name>**"
msgstr ""

#: ../../guides/hooks-list.rst:930
msgid "Filter the result (and subsequently the output) of the API method"
msgstr ""

#: ../../guides/i18n.rst:2
msgid "Internationalization"
msgstr ""

#: ../../guides/i18n.rst:4
msgid "Make your UI translatable into many different languages."
msgstr ""

#: ../../guides/i18n.rst:6
msgid "If you’d like to contribute translations to Elgg, see :doc:`the contributors' guide </about/contributing>`."
msgstr ""

#: ../../guides/i18n.rst:8
msgid "The default language is ``en`` for English. Currently Elgg will always fall back to an English translation, even if the site's language is not English; this is a known bug."
msgstr ""

#: ../../guides/i18n.rst:14
msgid "Translations are stored in PHP files in the ``/languages`` directory of your plugin. Each file corresponds to a language. The format is ``/languages/{language-code}.php`` where ``{language-code}`` is the ISO 639-1 short code for the language. For example:"
msgstr ""

#: ../../guides/i18n.rst:24
msgid "To override an existing translation, include it in your plugin's language file, and make sure your plugin is ordered later on the Admin > Plugins page:"
msgstr ""

#: ../../guides/i18n.rst:37
msgid "Unless you are overriding core's or another plugin's language strings, it is good practice for the language keys to start with your plugin name. For example: ``yourplugin:success``, ``yourplugin:title``, etc. This helps avoid conflicts with other language keys."
msgstr ""

#: ../../guides/i18n.rst:40
msgid "Server-side API"
msgstr ""

#: ../../guides/i18n.rst:42
msgid "``elgg_echo($key, $args, $language)``"
msgstr ""

#: ../../guides/i18n.rst:44
msgid "Output the translation of the key in the current language."
msgstr ""

#: ../../guides/i18n.rst:52
msgid "It also supports variable replacement using sprintf syntax:"
msgstr ""

#: ../../guides/i18n.rst:62
msgid "To force which language should be used for translation, set the third parameter:"
msgstr ""

#: ../../guides/i18n.rst:68
msgid "To first test whether ``elgg_echo()`` can find a translation:"
msgstr ""

#: ../../guides/i18n.rst:79
msgid "Some APIs allow creating translations for new keys. Translators should always include an English translation as a fallback. This makes ``elgg_language_key_exists($key)`` a reliable way to predict whether ``elgg_echo($key)`` will succeed."
msgstr ""

#: ../../guides/i18n.rst:84
msgid "Javascript API"
msgstr ""

#: ../../guides/i18n.rst:86
msgid "``elgg.echo(key, args)``"
msgstr ""

#: ../../guides/i18n.rst:88
msgid "This function is like ``elgg_echo`` in PHP."
msgstr ""

#: ../../guides/i18n.rst:90
msgid "Client-side translations are loaded asynchronously. Ensure translations are available by requiring the \"elgg\" AMD module:"
msgstr ""

#: ../../guides/i18n.rst:100
msgid "Translations are also available after the ``init, system`` JavaScript event."
msgstr ""

#: ../../guides/index.rst:2
msgid "Developer Guides"
msgstr ""

#: ../../guides/index.rst:4
msgid "Customize Elgg's behavior with plugins."
msgstr ""

#: ../../guides/javascript.rst:2
#: ../../guides/menus.rst:205
msgid "JavaScript"
msgstr ""

#: ../../guides/javascript.rst:9
msgid "AMD"
msgstr ""

#: ../../guides/javascript.rst:11
msgid "Developers should use the `AMD (Asynchronous Module Definition) <http://requirejs.org/docs/whyamd.html>`_ standard for writing JavaScript code in Elgg."
msgstr ""

#: ../../guides/javascript.rst:14
msgid "Here we'll describe making and executing AMD modules. The RequireJS documentation for `defining modules <http://requirejs.org/docs/api.html#define>`_ may also be of use."
msgstr ""

#: ../../guides/javascript.rst:18
msgid "Executing a module in the current page"
msgstr ""

#: ../../guides/javascript.rst:20
msgid "Telling Elgg to load an existing module in the current page is easy:"
msgstr ""

#: ../../guides/javascript.rst:27
msgid "On the client-side, this will asynchronously load the module, load any dependencies, and execute the module's definition function, if it has one."
msgstr ""

#: ../../guides/javascript.rst:31
msgid "Defining the Module"
msgstr ""

#: ../../guides/javascript.rst:33
msgid "Here we define a basic module that alters the page, by passing a \"definition function\" to ``define()``:"
msgstr ""

#: ../../guides/javascript.rst:46
msgid "The module's name is determined by the view name, which here is ``myplugin/say_hello.js``. We strip the ``.js`` extension, leaving ``myplugin/say_hello``."
msgstr ""

#: ../../guides/javascript.rst:51
msgid "The definition function **must** have one argument named ``require``."
msgstr ""

#: ../../guides/javascript.rst:54
msgid "Making modules dependent on other modules"
msgstr ""

#: ../../guides/javascript.rst:56
msgid "Below we refactor a bit so that the module depends on a new ``myplugin/hello`` module to provide the greeting:"
msgstr ""

#: ../../guides/javascript.rst:83
msgid "Passing settings to modules"
msgstr ""

#: ../../guides/javascript.rst:86
msgid "The ``elgg.data`` plugin hooks"
msgstr ""

#: ../../guides/javascript.rst:88
msgid "The ``elgg`` module provides an object ``elgg.data`` which is populated from two server side hooks:"
msgstr ""

#: ../../guides/javascript.rst:90
msgid "**elgg.data, site**: This filters an associative array of site-specific data passed to the client and cached."
msgstr ""

#: ../../guides/javascript.rst:91
msgid "**elgg.data, page**: This filters an associative array of uncached, page-specific data passed to the client."
msgstr ""

#: ../../guides/javascript.rst:93
msgid "Let's pass some data to a module:"
msgstr ""

#: ../../guides/javascript.rst:130
msgid "In ``elgg.data``, page data overrides site data. Also note ``json_encode()`` is used to copy data client-side, so the data must be JSON-encodable."
msgstr ""

#: ../../guides/javascript.rst:134
msgid "Making a config module"
msgstr ""

#: ../../guides/javascript.rst:136
msgid "You can use a PHP-based module to pass values from the server. To make the module ``myplugin/settings``, create the view file ``views/default/myplugin/settings.js.php`` (note the double extension ``.js.php``)."
msgstr ""

#: ../../guides/javascript.rst:152
msgid "You must also manually register the view as an external resource:"
msgstr ""

#: ../../guides/javascript.rst:162
msgid "The PHP view is cached, so you should treat the output as static (the same for all users) and avoid session-specific logic."
msgstr ""

#: ../../guides/javascript.rst:167
msgid "Setting the URL of a module"
msgstr ""

#: ../../guides/javascript.rst:169
msgid "You may have an AMD script outside your views you wish to make available as a module."
msgstr ""

#: ../../guides/javascript.rst:171
msgid "The best way to accomplish this is by configuring the path to the file using the ``views.php`` file in the root of your plugin:"
msgstr ""

#: ../../guides/javascript.rst:183
msgid "If you've copied the script directly into your plugin instead of managing it with Composer, you can use something like this instead:"
msgstr ""

#: ../../guides/javascript.rst:195
msgid "That's it! Elgg will now load this file whenever the \"underscore\" module is requested."
msgstr ""

#: ../../guides/javascript.rst:199
msgid "Using traditional JS libraries as modules"
msgstr ""

#: ../../guides/javascript.rst:201
msgid "It's possible to support JavaScript libraries that do not declare themselves as AMD modules (i.e. they declare global variables instead) if you shim them by setting ``exports`` and ``deps`` in ``elgg_define_js``:"
msgstr ""

#: ../../guides/javascript.rst:213
msgid "When this is requested client-side:"
msgstr ""

#: ../../guides/javascript.rst:215
msgid "The jQuery module is loaded, as it's marked as a dependency."
msgstr ""

#: ../../guides/javascript.rst:216
msgid "``https://elgg.example.org/cache/125235034/views/default/jquery.form.js`` is loaded and executed."
msgstr ""

#: ../../guides/javascript.rst:217
msgid "The value of ``window.jQuery.fn.ajaxForm`` is returned by the module."
msgstr ""

#: ../../guides/javascript.rst:219
msgid "Calls to ``elgg_define_js()`` must be in an ``init, system`` event handler."
msgstr ""

#: ../../guides/javascript.rst:222
msgid "Some things to note"
msgstr ""

#: ../../guides/javascript.rst:224
msgid "Do not use ``elgg.provide()`` anymore nor other means to attach code to ``elgg`` or other global objects. Use modules."
msgstr ""

#: ../../guides/javascript.rst:226
msgid "Return the value of the module instead of adding to a global variable."
msgstr ""

#: ../../guides/javascript.rst:227
msgid "Static (.js,.css,etc.) files are automatically minified and cached by Elgg's simplecache system."
msgstr ""

#: ../../guides/javascript.rst:228
msgid "The configuration is also cached in simplecache, and should not rely on user-specific values like ``get_language()``."
msgstr ""

#: ../../guides/javascript.rst:234
msgid "Booting your plugin"
msgstr ""

#: ../../guides/javascript.rst:236
msgid "To add functionality to each page, or make sure your hook handlers are registered early enough, you may create a boot module for your plugin, with the name ``boot/<plugin_id>``."
msgstr ""

#: ../../guides/javascript.rst:257
msgid "When your plugin is active, this module will automatically be loaded on each page. Other modules can depend on ``elgg/init`` to make sure all boot modules are loaded."
msgstr ""

#: ../../guides/javascript.rst:259
msgid "Each boot module **must** return an instance of ``elgg/Plugin``. The constructor must receive an object with a function in the ``init`` key. The ``init`` function will be called in the order of the plugin in Elgg's admin area."
msgstr ""

#: ../../guides/javascript.rst:261
msgid "Though not strictly necessary, you may want to use the ``init, system`` event to control when your initialization code runs with respect to other modules."
msgstr ""

#: ../../guides/javascript.rst:263
msgid "A boot module **cannot** depend on the modules ``elgg/init`` or ``elgg/ready``."
msgstr ""

#: ../../guides/javascript.rst:266
msgid "Modules provided with Elgg"
msgstr ""

#: ../../guides/javascript.rst:269
msgid "Modules ``jquery`` and ``jquery-ui``"
msgstr ""

#: ../../guides/javascript.rst:271
msgid "You must depend on these modules to use ``$`` or ``$.ui`` methods. In the future Elgg may stop loading these by default."
msgstr ""

#: ../../guides/javascript.rst:274
msgid "Module ``elgg``"
msgstr ""

#: ../../guides/javascript.rst:276
msgid "``elgg.echo()``"
msgstr ""

#: ../../guides/javascript.rst:278
msgid "Translate interface text"
msgstr ""

#: ../../guides/javascript.rst:285
msgid "``elgg.system_message()``"
msgstr ""

#: ../../guides/javascript.rst:287
msgid "Display a status message to the user."
msgstr ""

#: ../../guides/javascript.rst:294
msgid "``elgg.register_error()``"
msgstr ""

#: ../../guides/javascript.rst:296
msgid "Display an error message to the user."
msgstr ""

#: ../../guides/javascript.rst:303
msgid "``elgg.normalize_url()``"
msgstr ""

#: ../../guides/javascript.rst:305
msgid "Normalize a URL relative to the elgg root:"
msgstr ""

#: ../../guides/javascript.rst:312
msgid "``elgg.forward()``"
msgstr ""

#: ../../guides/javascript.rst:314
msgid "Redirect to a new page."
msgstr ""

#: ../../guides/javascript.rst:320
msgid "This function automatically normalizes the URL."
msgstr ""

#: ../../guides/javascript.rst:323
msgid "``elgg.parse_url()``"
msgstr ""

#: ../../guides/javascript.rst:325
msgid "Parse a URL into its component parts:"
msgstr ""

#: ../../guides/javascript.rst:338
msgid "``elgg.get_page_owner_guid()``"
msgstr ""

#: ../../guides/javascript.rst:340
msgid "Get the GUID of the current page's owner."
msgstr ""

#: ../../guides/javascript.rst:343
msgid "``elgg.register_hook_handler()``"
msgstr ""

#: ../../guides/javascript.rst:345
msgid "Register a hook handler with the event system. For best results, do this in a plugin boot module."
msgstr ""

#: ../../guides/javascript.rst:360
msgid "``elgg.trigger_hook()``"
msgstr ""

#: ../../guides/javascript.rst:362
msgid "Emit a hook event in the event system. For best results depend on the elgg/init module."
msgstr ""

#: ../../guides/javascript.rst:377
msgid "``elgg.security.refreshToken()``"
msgstr ""

#: ../../guides/javascript.rst:379
msgid "Force a refresh of all XSRF tokens on the page."
msgstr ""

#: ../../guides/javascript.rst:381
msgid "This is automatically called every 5 minutes by default."
msgstr ""

#: ../../guides/javascript.rst:383
msgid "This requires a valid security token in 1.8, but not in 1.9."
msgstr ""

#: ../../guides/javascript.rst:385
msgid "The user will be warned if their session has expired."
msgstr ""

#: ../../guides/javascript.rst:388
msgid "``elgg.security.addToken()``"
msgstr ""

#: ../../guides/javascript.rst:390
msgid "Add a security token to an object, URL, or query string:"
msgstr ""

#: ../../guides/javascript.rst:408
msgid "``elgg.get_logged_in_user_entity()``"
msgstr ""

#: ../../guides/javascript.rst:410
msgid "Returns the logged in user as an JS ElggUser object."
msgstr ""

#: ../../guides/javascript.rst:413
msgid "``elgg.get_logged_in_user_guid()``"
msgstr ""

#: ../../guides/javascript.rst:415
msgid "Returns the logged in user's guid."
msgstr ""

#: ../../guides/javascript.rst:418
msgid "``elgg.is_logged_in()``"
msgstr ""

#: ../../guides/javascript.rst:420
msgid "True if the user is logged in."
msgstr ""

#: ../../guides/javascript.rst:423
msgid "``elgg.is_admin_logged_in()``"
msgstr ""

#: ../../guides/javascript.rst:425
msgid "True if the user is logged in and is an admin."
msgstr ""

#: ../../guides/javascript.rst:428
msgid "``elgg.config.get_language()``"
msgstr ""

#: ../../guides/javascript.rst:430
msgid "Get the current page's language."
msgstr ""

#: ../../guides/javascript.rst:433
msgid "There are a number of configuration values set in the elgg object:"
msgstr ""

#: ../../guides/javascript.rst:449
msgid "Module ``elgg/Ajax``"
msgstr ""

#: ../../guides/javascript.rst:451
msgid "See the :doc:`ajax` page for details."
msgstr ""

#: ../../guides/javascript.rst:454
msgid "Module ``elgg/init``"
msgstr ""

#: ../../guides/javascript.rst:456
msgid "``elgg/init`` loads and initializes all boot modules in priority order and triggers the [init, system] hook."
msgstr ""

#: ../../guides/javascript.rst:458
#: ../../guides/javascript.rst:470
msgid "Require this module to make sure all plugins are ready."
msgstr ""

#: ../../guides/javascript.rst:461
msgid "Module ``elgg/Plugin``"
msgstr ""

#: ../../guides/javascript.rst:463
msgid "Used to create a :ref:`boot module <guides/javascript#boot>`."
msgstr ""

#: ../../guides/javascript.rst:466
msgid "Module ``elgg/ready``"
msgstr ""

#: ../../guides/javascript.rst:468
msgid "``elgg/ready`` loads and initializes all plugin boot modules in priority order."
msgstr ""

#: ../../guides/javascript.rst:473
msgid "Module ``elgg/spinner``"
msgstr ""

#: ../../guides/javascript.rst:475
msgid "The ``elgg/spinner`` module can be used to create an Ajax loading indicator fixed to the top of the window."
msgstr ""

#: ../../guides/javascript.rst:491
msgid "The ``elgg/Ajax`` module uses the spinner by default."
msgstr ""

#: ../../guides/javascript.rst:494
msgid "Module ``elgg/popup``"
msgstr ""

#: ../../guides/javascript.rst:496
msgid "The ``elgg/popup`` module can be used to display an overlay positioned relatively to its anchor (trigger)."
msgstr ""

#: ../../guides/javascript.rst:498
msgid "The ``elgg/popup`` module is loaded by default, and binding a popup module to an anchor is as simple as adding ``rel=\"popup\"`` attribute and defining target module with a ``href`` (or ``data-href``) attribute. Popup module positioning can be defined with ``data-position`` attribute of the trigger element."
msgstr ""

#: ../../guides/javascript.rst:531
msgid "The ``elgg/popup`` module allows you to build out more complex UI/UX elements. You can open and close popup modules programmatically:"
msgstr ""

#: ../../guides/javascript.rst:556
msgid "You can use ``getOptions, ui.popup`` plugin hook to manipulate the position of the popup before it has been opened. You can use jQuery ``open`` and ``close`` events to manipulate popup module after it has been opened or closed."
msgstr ""

#: ../../guides/javascript.rst:585
msgid "Open popup modules will always contain the following data that can be accessed via ``$.data()``:"
msgstr ""

#: ../../guides/javascript.rst:587
msgid "``trigger`` - jQuery element used to trigger the popup module to open"
msgstr ""

#: ../../guides/javascript.rst:588
msgid "``position`` - An object defining popup module position that was passed to ``$.position()``"
msgstr ""

#: ../../guides/javascript.rst:590
msgid "By default, ``target`` element will be appended to ``$('body')`` thus altering DOM hierarchy. If you need to preserve the DOM position of the popup module, you can add ``.elgg-popup-inline`` class to your trigger."
msgstr ""

#: ../../guides/javascript.rst:593
msgid "Module ``elgg/widgets``"
msgstr ""

#: ../../guides/javascript.rst:595
msgid "Plugins that load a widget layout via Ajax should initialize via this module:"
msgstr ""

#: ../../guides/javascript.rst:604
msgid "Module ``elgg/lightbox``"
msgstr ""

#: ../../guides/javascript.rst:606
msgid "Elgg is distributed with the Colorbox jQuery library. Please go to http://www.jacklmoore.com/colorbox for more information on the options of this lightbox."
msgstr ""

#: ../../guides/javascript.rst:608
msgid "Use the following classes to bind your anchor elements to a lightbox:"
msgstr ""

#: ../../guides/javascript.rst:610
msgid "``elgg-lightbox`` - loads an HTML resource"
msgstr ""

#: ../../guides/javascript.rst:611
msgid "``elgg-lightbox-photo`` - loads an image resource (should be used to avoid displaying raw image bytes instead of an ``img`` tag)"
msgstr ""

#: ../../guides/javascript.rst:612
msgid "``elgg-lightbox-inline`` - displays an inline HTML element in a lightbox"
msgstr ""

#: ../../guides/javascript.rst:613
msgid "``elgg-lightbox-iframe`` - loads a resource in an ``iframe``"
msgstr ""

#: ../../guides/javascript.rst:615
msgid "You may apply colorbox options to an individual ``elgg-lightbox`` element by setting the attribute ``data-colorbox-opts`` to a JSON settings object."
msgstr ""

#: ../../guides/javascript.rst:628
msgid "Use ``\"getOptions\", \"ui.lightbox\"`` plugin hook to filter options passed to ``$.colorbox()`` whenever a lightbox is opened. Note that the hook handler should depend on ``elgg/init`` AMD module."
msgstr ""

#: ../../guides/javascript.rst:630
msgid "``elgg/lightbox`` AMD module should be used to open and close the lightbox programmatically:"
msgstr ""

#: ../../guides/javascript.rst:651
msgid "To support gallery sets (via ``rel`` attribute), you need to bind colorbox directly to a specific selector (note that this will ignore ``data-colorbox-opts`` on all elements in a set):"
msgstr ""

#: ../../guides/javascript.rst:663
msgid "You can also resize the lightbox programmatically if needed:"
msgstr ""

#: ../../guides/javascript.rst:676
msgid "Module ``elgg/ckeditor``"
msgstr ""

#: ../../guides/javascript.rst:678
msgid "This module can be used to add WYSIWYG editor to a textarea (requires ``ckeditor`` plugin to be enabled). Note that WYSIWYG will be automatically attached to all instances of ``.elgg-input-longtext``."
msgstr ""

#: ../../guides/javascript.rst:703
msgid "Inline tabs component"
msgstr ""

#: ../../guides/javascript.rst:705
msgid "Inline tabs component fires an ``open`` event whenever a tabs is open and, in case of ajax tabs, finished loading:"
msgstr ""

#: ../../guides/javascript.rst:726
msgid "Traditional scripts"
msgstr ""

#: ../../guides/javascript.rst:728
msgid "Although we highly recommend using AMD modules, you can register scripts with ``elgg_register_js``:"
msgstr ""

#: ../../guides/javascript.rst:734
msgid "This will override any URLs previously registered under this name."
msgstr ""

#: ../../guides/javascript.rst:736
msgid "Load a library on the current page with ``elgg_load_js``:"
msgstr ""

#: ../../guides/javascript.rst:742
msgid "This will load the library in the page footer. You must use the ``require()`` function to depend on modules like ``elgg`` and ``jquery``."
msgstr ""

#: ../../guides/javascript.rst:751
msgid "Using inline scripts is NOT SUPPORTED because:"
msgstr ""

#: ../../guides/javascript.rst:748
msgid "They are not testable (maintainability)"
msgstr ""

#: ../../guides/javascript.rst:749
msgid "They are not cacheable (performance)"
msgstr ""

#: ../../guides/javascript.rst:750
msgid "They prevent use of Content-Security-Policy (security)"
msgstr ""

#: ../../guides/javascript.rst:751
msgid "They prevent scripts from being loaded with ``defer`` or ``async`` (performance)"
msgstr ""

#: ../../guides/javascript.rst:753
msgid "Inline scripts in core or bundled plugins are considered legacy bugs."
msgstr ""

#: ../../guides/javascript.rst:756
msgid "Hooks"
msgstr ""

#: ../../guides/javascript.rst:758
msgid "The JS engine has a hooks system similar to the PHP engine's plugin hooks: hooks are triggered and plugins can register functions to react or alter information. There is no concept of Elgg events in the JS engine; everything in the JS engine is implemented as a hook."
msgstr ""

#: ../../guides/javascript.rst:761
msgid "Registering hook handlers"
msgstr ""

#: ../../guides/javascript.rst:763
msgid "Handler functions are registered using ``elgg.register_hook_handler()``. Multiple handlers can be registered for the same hook."
msgstr ""

#: ../../guides/javascript.rst:765
msgid "The following example registers the ``handleFoo`` function for the ``foo, bar`` hook."
msgstr ""

#: ../../guides/javascript.rst:783
msgid "The handler function"
msgstr ""

#: ../../guides/javascript.rst:785
msgid "The handler will receive 4 arguments:"
msgstr ""

#: ../../guides/javascript.rst:787
msgid "**hook** - The hook name"
msgstr ""

#: ../../guides/javascript.rst:788
msgid "**type** - The hook type"
msgstr ""

#: ../../guides/javascript.rst:789
msgid "**params** - An object or set of parameters specific to the hook"
msgstr ""

#: ../../guides/javascript.rst:790
msgid "**value** - The current value"
msgstr ""

#: ../../guides/javascript.rst:792
msgid "The ``value`` will be passed through each hook. Depending on the hook, callbacks can simply react or alter data."
msgstr ""

#: ../../guides/javascript.rst:795
msgid "Triggering custom hooks"
msgstr ""

#: ../../guides/javascript.rst:797
msgid "Plugins can trigger their own hooks:"
msgstr ""

#: ../../guides/javascript.rst:808
msgid "Be aware of timing. If you don't depend on elgg/init, other plugins may not have had a chance to register their handlers."
msgstr ""

#: ../../guides/javascript.rst:811
msgid "Available hooks"
msgstr ""

#: ../../guides/javascript.rst:814
msgid "Plugins should register their init functions for this hook. It is fired after Elgg's JS is loaded and all plugin boot modules have been initialized. Depend on the ``elgg/init`` module to be sure this has completed."
msgstr ""

#: ../../guides/javascript.rst:817
msgid "This hook is fired when the system has fully booted (after init). Depend on the ``elgg/ready`` module to be sure this has completed."
msgstr ""

#: ../../guides/javascript.rst:820
msgid "**getOptions, ui.popup**"
msgstr ""

#: ../../guides/javascript.rst:820
msgid "This hook is fired for pop up displays (``\"rel\"=\"popup\"``) and allows for customized placement options."
msgstr ""

#: ../../guides/javascript.rst:823
msgid "**getOptions, ui.lightbox**"
msgstr ""

#: ../../guides/javascript.rst:823
msgid "This hook can be used to filter options passed to ``$.colorbox()``"
msgstr ""

#: ../../guides/javascript.rst:826
msgid "**config, ckeditor**"
msgstr ""

#: ../../guides/javascript.rst:826
msgid "This filters the CKEditor config object. Register for this hook in a plugin boot module. The defaults can be seen in the module ``elgg/ckeditor/config``."
msgstr ""

#: ../../guides/javascript.rst:829
msgid "**prepare, ckeditor**"
msgstr ""

#: ../../guides/javascript.rst:829
msgid "This hook can be used to decorate ``CKEDITOR`` global. You can use this hook to register new CKEditor plugins and add event bindings."
msgstr ""

#: ../../guides/javascript.rst:832
msgid "**ajax_request_data, \\***"
msgstr ""

#: ../../guides/javascript.rst:832
msgid "This filters request data sent by the ``elgg/Ajax`` module. See :doc:`ajax` for details."
msgstr ""

#: ../../guides/javascript.rst:835
msgid "**ajax_response_data, \\***"
msgstr ""

#: ../../guides/javascript.rst:835
msgid "This filters the response data returned to users of the ``elgg/Ajax`` module. See :doc:`ajax` for details."
msgstr ""

#: ../../guides/javascript.rst:838
msgid "**insert, editor**"
msgstr ""

#: ../../guides/javascript.rst:838
msgid "This hook is triggered by the embed plugin and can be used to filter content before it is inserted into the textarea. This hook can also be used by WYSIWYG editors to insert content using their own API (in this case the handler should return ``false``). See ckeditor plugin for an example."
msgstr ""

#: ../../guides/javascript.rst:841
msgid "Third-party assets"
msgstr ""

#: ../../guides/javascript.rst:843
msgid "We recommend managing third-party scripts and styles with Composer. Elgg core uses ``fxp/composer-asset-plugin`` for this purpose. This plugin allows you to pull dependencies from the Bower or NPM package repositories, but using the Composer command-line tool."
msgstr ""

#: ../../guides/javascript.rst:848
msgid "For example, to include jQuery, you could run the following Composer commands:"
msgstr ""

#: ../../guides/javascript.rst:857
msgid "``fxp/composer-asset-plugin`` must be installed globally! See https://github.com/francoispluchino/composer-asset-plugin for more info."
msgstr ""

#: ../../guides/menus.rst:2
#: ../../guides/services.rst:12
msgid "Menus"
msgstr ""

#: ../../guides/menus.rst:4
msgid "Elgg contains helper code to build menus throughout the site."
msgstr ""

#: ../../guides/menus.rst:6
msgid "Every single menu requires a name, as does every single menu item. These are required in order to allow easy overriding and manipulation, as well as to provide hooks for theming."
msgstr ""

#: ../../guides/menus.rst:15
msgid "Basic usage"
msgstr ""

#: ../../guides/menus.rst:17
msgid "Basic functionalities can be achieved through these two functions:"
msgstr ""

#: ../../guides/menus.rst:19
msgid "`elgg_register_menu_item()`__ to add an item to a menu"
msgstr ""

#: ../../guides/menus.rst:20
msgid "`elgg_unregister_menu_item()`__ to remove an item from a menu"
msgstr ""

#: ../../guides/menus.rst:22
msgid "You normally want to call them from your plugin's init function."
msgstr ""

#: ../../guides/menus.rst:28
#: ../../guides/menus.rst:65
msgid "Examples"
msgstr ""

#: ../../guides/menus.rst:45
msgid "Advanced usage"
msgstr ""

#: ../../guides/menus.rst:47
msgid "You can get more control over menus by using :doc:`plugin hooks </design/events>` and the public methods provided by the ElggMenuItem__ class."
msgstr ""

#: ../../guides/menus.rst:52
msgid "There are two hooks that can be used to modify a menu:"
msgstr ""

#: ../../guides/menus.rst:51
msgid "``'register', 'menu:<menu name>'`` to add or modify items (especially in dynamic menus)"
msgstr ""

#: ../../guides/menus.rst:52
msgid "``'prepare', 'menu:<menu name>'`` to modify the structure of the menu before it is displayed"
msgstr ""

#: ../../guides/menus.rst:54
msgid "When you register a plugin hook handler, replace the ``<menu name>`` part with the internal name of the menu."
msgstr ""

#: ../../guides/menus.rst:57
msgid "The third parameter passed into a menu handler contains all the menu items that have been registered so far by Elgg core and other enabled plugins. In the handler we can loop through the menu items and use the class methods to interact with the properties of the menu item."
msgstr ""

#: ../../guides/menus.rst:67
msgid "**Example 1:** Change the URL for menu item called \"albums\" in the ``owner_block`` menu:"
msgstr ""

#: ../../guides/menus.rst:109
msgid "**Example 2:** Modify the ``entity`` menu for the ``ElggBlog`` objects"
msgstr ""

#: ../../guides/menus.rst:108
msgid "Remove the thumb icon"
msgstr ""

#: ../../guides/menus.rst:109
msgid "Change the \"Edit\" text into a custom icon"
msgstr ""

#: ../../guides/menus.rst:151
msgid "Creating a new menu"
msgstr ""

#: ../../guides/menus.rst:153
msgid "Elgg provides multiple different menus by default. Sometimes you may however need some menu items that don't fit in any of the existing menus. If this is the case, you can create your very own menu with the `elgg_view_menu()`__ function. You must call the function from the view, where you want to menu to be displayed."
msgstr ""

#: ../../guides/menus.rst:161
msgid "**Example:** Display a menu called \"my_menu\" that displays it's menu items in alphapetical order:"
msgstr ""

#: ../../guides/menus.rst:169
msgid "You can now add new items to the menu like this:"
msgstr ""

#: ../../guides/menus.rst:180
msgid "Furthermore it is now possible to modify the menu using the hooks ``'register', 'menu:my_menu'`` and ``'prepare', 'menu:my_menu'``."
msgstr ""

#: ../../guides/menus.rst:184
msgid "Theming"
msgstr ""

#: ../../guides/menus.rst:186
msgid "The menu name, section names, and item names are all embedded into the HTML as CSS classes (normalized to contain only hyphens, rather that underscores or colons). This increases the size of the markup slightly but provides themers with a high degree of control and flexibility when styling the site."
msgstr ""

#: ../../guides/menus.rst:191
msgid "**Example:** The following would be the output of the ``foo`` menu with sections ``alt`` and ``default`` containing items ``baz`` and ``bar`` respectively."
msgstr ""

#: ../../guides/menus.rst:207
msgid "It is common that menu items rely on JavaScript. You can bind client-side events to menu items by placing your JavaScript into AMD module and defining the requirement during the registration."
msgstr ""

#: ../../guides/notifications.rst:6
msgid "There are two ways to send notifications in Elgg:"
msgstr ""

#: ../../guides/notifications.rst:5
#: ../../guides/notifications.rst:13
msgid "Instant notifications"
msgstr ""

#: ../../guides/notifications.rst:6
msgid "Event-based notifications send using a notifications queue"
msgstr ""

#: ../../guides/notifications.rst:15
msgid "The generic method to send a notification to a user is via the function `notify_user()`__. It is normally used when we want to notify only a single user. Notification like this might for example inform that someone has liked or commented the user's post."
msgstr ""

#: ../../guides/notifications.rst:19
msgid "The function usually gets called in an :doc:`action <actions>` file."
msgstr ""

#: ../../guides/notifications.rst:26
msgid "In this example a user (``$user``) is triggering an action to rate a post created by another user (``$owner``). After saving the rating (``ElggAnnotation $rating``) to database, we could use the following code to send a notification about the new rating to the owner."
msgstr ""

#: ../../guides/notifications.rst:57
msgid "The language used by the recipient isn't necessarily the same as the language of the person who triggers the notification. Therefore you must always remember to pass the recipient's language as the third parameter to ``elgg_echo()``."
msgstr ""

#: ../../guides/notifications.rst:63
msgid "The ``'summary'`` parameter is meant for notification plugins that only want to display a short message instead of both the subject and the body. Therefore the summary should be terse but still contain all necessary information."
msgstr ""

#: ../../guides/notifications.rst:68
msgid "Enqueued notifications"
msgstr ""

#: ../../guides/notifications.rst:70
msgid "On large sites there may be many users who have subscribed to receive notifications about a particular event. Sending notifications immediately when a user triggers such an event might remarkably slow down page loading speed. This is why sending of such notifications shoud be left for Elgg's notification queue."
msgstr ""

#: ../../guides/notifications.rst:75
msgid "New notification events can be registered with the `elgg_register_notification_event()`__ function. Notifications about registered events will be sent automatically to all subscribed users."
msgstr ""

#: ../../guides/notifications.rst:79
msgid "This is the workflow of the notifications system:"
msgstr ""

#: ../../guides/notifications.rst:82
msgid "Someone does an action that triggers an event within Elgg"
msgstr ""

#: ../../guides/notifications.rst:82
msgid "The action can be ``create``, ``update`` or ``delete``"
msgstr ""

#: ../../guides/notifications.rst:83
msgid "The target of the action can be any instance of the ``ElggEntity`` class (e.g. a Blog post)"
msgstr ""

#: ../../guides/notifications.rst:84
msgid "The notifications system saves this event into a notifications queue in the database"
msgstr ""

#: ../../guides/notifications.rst:85
msgid "When the pluging hook handler for the one-minute interval gets triggered, the event is taken from the queue and it gets processed"
msgstr ""

#: ../../guides/notifications.rst:87
msgid "Subscriptions are fetched for the user who triggered the event"
msgstr ""

#: ../../guides/notifications.rst:87
msgid "By default this includes all the users who have enabled any notification method for the user at ``www.site.com/notifications/personal/<username>``"
msgstr ""

#: ../../guides/notifications.rst:89
msgid "Plugins are allowed to alter the subscriptions using the ``[get, subscriptions]`` hook"
msgstr ""

#: ../../guides/notifications.rst:90
msgid "Plugins are allowed to terminate notifications queue processing with the ``[send:before, notifications]`` hook"
msgstr ""

#: ../../guides/notifications.rst:91
msgid "Plugins are allowed to alter the notification parameters with the ``[prepare, notification]`` hook"
msgstr ""

#: ../../guides/notifications.rst:92
msgid "Plugins are allowed to alter the notification subject/message/summary with the ``[prepare, notification:<action>:<type>:<subtype>]`` hook"
msgstr ""

#: ../../guides/notifications.rst:93
msgid "Plugins are allowed to format notification subject/message/summary for individual delivery methods with ``[format, notification:<method>]`` hook"
msgstr ""

#: ../../guides/notifications.rst:94
msgid "Notifications are sent to each subscriber using the methods they have chosen"
msgstr ""

#: ../../guides/notifications.rst:95
msgid "Plugins can take over or prevent sending of each individual notification with the ``[send, notification:<method>]`` hook"
msgstr ""

#: ../../guides/notifications.rst:96
msgid "The ``[send:after, notifications]`` hook is triggered for the event after all notifications have been sent"
msgstr ""

#: ../../guides/notifications.rst:101
#: ../../guides/notifications.rst:123
msgid "Example"
msgstr ""

#: ../../guides/notifications.rst:103
msgid "Tell Elgg to send notifications when a new object of subtype \"photo\" is created:"
msgstr ""

#: ../../guides/notifications.rst:116
msgid "In order to send the event-based notifications you must have the one-minute :doc:`CRON </admin/cron>` interval configured."
msgstr ""

#: ../../guides/notifications.rst:119
msgid "Contents of the notification message can be defined with the ``'prepare', 'notification:[action]:[type]:[subtype]'`` hook."
msgstr ""

#: ../../guides/notifications.rst:125
msgid "Tell Elgg to use the function ``photos_prepare_notification()`` to format the contents of the notification when a new objects of subtype 'photo' is created:"
msgstr ""

#: ../../guides/notifications.rst:173
msgid "Make sure the notification will be in the correct language by passing the reciepient's language into the ``elgg_echo()`` function."
msgstr ""

#: ../../guides/notifications.rst:177
msgid "Registering a new notification method"
msgstr ""

#: ../../guides/notifications.rst:179
msgid "By default Elgg has two notification methods: email and the bundled site_notifications plugin. You can register a new notification method with the `elgg_register_notification_method()`__ function."
msgstr ""

#: ../../guides/notifications.rst:188
msgid "Register a handler that will send the notifications via SMS."
msgstr ""

#: ../../guides/notifications.rst:199
msgid "After registering the new method, it will appear to the notification settings page at ``www.example.com/notifications/personal/[username]``."
msgstr ""

#: ../../guides/notifications.rst:203
msgid "Sending the notifications using your own method"
msgstr ""

#: ../../guides/notifications.rst:205
msgid "Besides registering the notification method, you also need to register a handler that takes care of actually sending the SMS notifications. This happens with the ``'send', 'notification:[method]'`` hook."
msgstr ""

#: ../../guides/notifications.rst:249
msgid "Subscriptions"
msgstr ""

#: ../../guides/notifications.rst:251
msgid "In most cases Elgg core takes care of handling the subscriptions, so notification plugins don't usually have to alter them."
msgstr ""

#: ../../guides/notifications.rst:256
msgid "Subscriptions can however be:"
msgstr ""

#: ../../guides/notifications.rst:255
msgid "Added using the `elgg_add_subscription()`__ function"
msgstr ""

#: ../../guides/notifications.rst:256
msgid "Removed using the `elgg_remove_subscription()`__ function"
msgstr ""

#: ../../guides/notifications.rst:261
msgid "It's possible to modify the recipients of a notification dynamically with the ``'get', 'subscriptions'`` hook."
msgstr ""

#: ../../guides/page-owner.rst:2
msgid "Page ownership"
msgstr ""

#: ../../guides/page-owner.rst:4
msgid "One recurring task of any plugin will be to determine the page ownership in order to decide which actions are allowed or not. Elgg has a number of functions related to page ownership and also offers plugin developers flexibility by letting the plugin handle page ownership requests as well. Determining the owner of a page can be determined with ``elgg_get_page_owner_guid()``, which will return the GUID of the owner. Alternatively, ``elgg_get_page_owner_entity()`` will retrieve the whole page owner entity. If the page already knows who the page owner is, but the system doesn't, the page can set the page owner by passing the GUID to ``elgg_set_page_owner_guid($guid)``."
msgstr ""

#: ../../guides/page-owner.rst:10
msgid "The page owner entity can be any ``ElggEntity``. If you wish to only apply some setting in case of a user or a group make sure you check that you have the correct entity."
msgstr ""

#: ../../guides/page-owner.rst:13
msgid "Custom page owner handlers"
msgstr ""

#: ../../guides/page-owner.rst:15
msgid "Plugin developers can create page owner handlers, which could be necessary in certain cases, for example when integrating third party functionality. The handler will be a function which will need to get registered with ``elgg_register_plugin_hook_handler('page_owner', 'system', 'your_page_owner_function_name');`` . The handler will only need to return a value (an integer GUID) when it knows for certain who the page owner is."
msgstr ""

#: ../../guides/page-owner.rst:17
msgid "By default, the system uses ``default_page_owner_handler()`` to determine the page_owner from the following elements:"
msgstr ""

#: ../../guides/page-owner.rst:19
msgid "The ``username`` URL parameter"
msgstr ""

#: ../../guides/page-owner.rst:20
msgid "The ``owner_guid`` URL parameter"
msgstr ""

#: ../../guides/page-owner.rst:21
msgid "The URL path"
msgstr ""

#: ../../guides/page-owner.rst:23
msgid "It then passes off to any page owner handlers defined using the :ref:`plugin hook <design/events#plugin-hooks>`. If no page owner can be determined, the page owner is set to 0, which is the same as the logged out user."
msgstr ""

#: ../../guides/pagehandler.rst:2
msgid "Page handler"
msgstr ""

#: ../../guides/pagehandler.rst:4
msgid "Elgg offers a facility to manage your plugin pages via a page handler, enabling custom urls like ``http://yoursite/your_plugin/section``. To add a page handler to a plugin, a handler function needs to be registered in the plugin's ``start.php`` file with ``elgg_register_page_handler()``:"
msgstr ""

#: ../../guides/pagehandler.rst:10
msgid "The plugin's page handler is passed two parameters:"
msgstr ""

#: ../../guides/pagehandler.rst:12
msgid "an array containing the sections of the URL exploded by '/'. With this information the handler will be able to apply any logic necessary, for example loading the appropriate view and returning its contents."
msgstr ""

#: ../../guides/pagehandler.rst:13
msgid "the handler, this is the handler that is currently used (in our example ``your_plugin``). If you don't register multiple page handlers to the same function you'll never need this."
msgstr ""

#: ../../guides/pagehandler.rst:16
msgid "Code flow"
msgstr ""

#: ../../guides/pagehandler.rst:18
msgid "Pages in plugins should be rendered via page handlers (not by using ``Elgg\\Application``). Generally the rendering is done by views with names starting with ``resources/``. The program flow is something like this:"
msgstr ""

#: ../../guides/pagehandler.rst:20
msgid "A user requests ``/plugin_name/section/entity``"
msgstr ""

#: ../../guides/pagehandler.rst:21
msgid "Elgg checks if ``plugin_name`` is registered to a page handler and calls that function, passing ``array('section', 'entity')`` as the first argument"
msgstr ""

#: ../../guides/pagehandler.rst:22
msgid "The page handler function determines which resource view will display the page."
msgstr ""

#: ../../guides/pagehandler.rst:23
msgid "The handler uses ``elgg_view_resource()`` to render the page, also passing in any relevant info to the view via the ``$vars`` argument."
msgstr ""

#: ../../guides/pagehandler.rst:24
msgid "The resource view combines many separate views, calls formatting functions like ``elgg_view_layout()`` and ``elgg_view_page()``, and then echos the final output"
msgstr ""

#: ../../guides/pagehandler.rst:25
msgid "The user sees a fully rendered page"
msgstr ""

#: ../../guides/pagehandler.rst:27
msgid "There is no syntax enforced on the URLs, but Elgg's coding standards suggests a certain format."
msgstr ""

#: ../../guides/permissions-check.rst:2
msgid "Permissions Check"
msgstr ""

#: ../../guides/permissions-check.rst:6
msgid "As stated in the page, this method works **only** for granting **write** access to entities. You **cannot** use this method to retrieve or view entities for which the user does not have read access."
msgstr ""

#: ../../guides/permissions-check.rst:8
msgid "Elgg provides a mechanism of overriding write permissions check through the :ref:`permissions_check plugin hook <guides/hooks-list#permission-hooks>` . This is useful for allowing plugin write to all accessible entities regardless of access settings. Entities that are hidden, however, will still be unavailable to the plugin."
msgstr ""

#: ../../guides/permissions-check.rst:11
msgid "Hooking permissions_check"
msgstr ""

#: ../../guides/permissions-check.rst:13
msgid "In your plugin, you must register the plugin hook for ``permissions_check``."
msgstr ""

#: ../../guides/permissions-check.rst:20
msgid "The override function"
msgstr ""

#: ../../guides/permissions-check.rst:22
msgid "Now create the function that will be called by the permissions check hook. In this function we determine if the entity (in parameters) has write access. Since it is important to keep Elgg secure, write access should be given only after checking a variety of situations including page context, logged in user, etc. Note that this function can return 3 values: true if the entity has write access, false if the entity does not, and null if this plugin doesn't care and the security system should consult other plugins."
msgstr ""

#: ../../guides/permissions-check.rst:40
msgid "Full Example"
msgstr ""

#: ../../guides/permissions-check.rst:42
msgid "This is a full example using the context to determine if the entity has write access."
msgstr ""

#: ../../guides/plugins.rst:4
msgid "Plugins must provide a start.php and manifest.xml file in the plugin root in order to be recognized by Elgg."
msgstr ""

#: ../../guides/plugins.rst:8
msgid "start.php"
msgstr ""

#: ../../guides/plugins.rst:10
msgid "The start.php file bootstraps plugin by registering event listeners and plugin hooks."
msgstr ""

#: ../../guides/plugins.rst:14
msgid "elgg-plugin.php"
msgstr ""

#: ../../guides/plugins.rst:16
msgid "This optional file is read by Elgg to configure various services, and must return an array if present. It should not be included by plugins and is not guaranteed to run at any particular time. Besides magic constants like ``__DIR__``, its return value should not change."
msgstr ""

#: ../../guides/plugins.rst:21
#: ../../guides/plugins.rst:53
msgid "Syntax"
msgstr ""

#: ../../guides/plugins.rst:23
msgid "Here's a trivial example configuring view locations via the ``views`` key:"
msgstr ""

#: ../../guides/plugins.rst:38
msgid "activate.php, deactivate.php"
msgstr ""

#: ../../guides/plugins.rst:40
msgid "The activate.php and deactivate.php files contain procedural code that will run upon plugin activation and deactivation. Use these files to perform one-time events such as registering a persistent admin notice, registering subtypes, or performing garbage collection when deactivated."
msgstr ""

#: ../../guides/plugins.rst:46
msgid "manifest.xml"
msgstr ""

#: ../../guides/plugins.rst:48
msgid "Elgg plugins are required to have a ``manifest.xml`` file in the root of a plugin."
msgstr ""

#: ../../guides/plugins.rst:50
msgid "The ``manifest.xml`` file includes information about the plugin itself, requirements to run the plugin, and optional information including where to display the plugin in the admin area and what APIs the plugin provides."
msgstr ""

#: ../../guides/plugins.rst:55
msgid "The manifest file is a standard XML file in UTF-8. Everything is a child of the ``<plugin_manifest>`` element."
msgstr ""

#: ../../guides/plugins.rst:62
msgid "The manifest syntax is as follows:"
msgstr ""

#: ../../guides/plugins.rst:68
msgid "Many elements can contain children attributes:"
msgstr ""

#: ../../guides/plugins.rst:78
msgid "Required Elements"
msgstr ""

#: ../../guides/plugins.rst:80
msgid "All plugins are required to define the following elements in their manifest files:"
msgstr ""

#: ../../guides/plugins.rst:82
msgid "id - This has the name as the directory that the plugin uses."
msgstr ""

#: ../../guides/plugins.rst:83
msgid "name - The display name of the plugin."
msgstr ""

#: ../../guides/plugins.rst:84
msgid "author - The name of the author who wrote the plugin."
msgstr ""

#: ../../guides/plugins.rst:85
msgid "version - The version of the plugin."
msgstr ""

#: ../../guides/plugins.rst:86
msgid "description - A description of the what the plugin provides, its features, and other relevant information"
msgstr ""

#: ../../guides/plugins.rst:87
msgid "requires - Each plugin must specify the release of Elgg it was developed for. See the plugin Dependencies page for more information."
msgstr ""

#: ../../guides/plugins.rst:90
msgid "Available Elements"
msgstr ""

#: ../../guides/plugins.rst:92
msgid "In addition to the require elements above, the follow elements are available to use:"
msgstr ""

#: ../../guides/plugins.rst:94
msgid "blurb - A short description of the plugin."
msgstr ""

#: ../../guides/plugins.rst:95
msgid "category - The category of the plugin. It is recommended to follow the [[Plugin_Guidelines|plugin guidelines]] and use one of the defined categories. There can be multiple entries."
msgstr ""

#: ../../guides/plugins.rst:96
msgid "conflicts - Specifies that the plugin conflicts with a certain system configuration."
msgstr ""

#: ../../guides/plugins.rst:97
msgid "copyright - The plugin's copyright information."
msgstr ""

#: ../../guides/plugins.rst:98
msgid "license - The plugin's license information."
msgstr ""

#: ../../guides/plugins.rst:99
msgid "provides - Specifies that this plugin provides the same functionality as another Elgg plugin or a PHP extension."
msgstr ""

#: ../../guides/plugins.rst:100
msgid "screenshot - Screenshots of the plugin. There can be multiple entries. See the advanced example for syntax."
msgstr ""

#: ../../guides/plugins.rst:101
msgid "suggests - Parallels the requires system, but doesn't affect if the plugin can be enabled. Used to suggest other plugins that interact or build on the plugin."
msgstr ""

#: ../../guides/plugins.rst:102
msgid "website - A link to the website for the plugin."
msgstr ""

#: ../../guides/plugins.rst:106
msgid ":doc:`plugins/dependencies`"
msgstr ""

#: ../../guides/plugins.rst:109
msgid "Simple Example"
msgstr ""

#: ../../guides/plugins.rst:111
msgid "This manifest file is the bare minimum a plugin must have."
msgstr ""

#: ../../guides/plugins.rst:129
msgid "Advanced example"
msgstr ""

#: ../../guides/plugins.rst:131
msgid "This example uses all of the available elements:"
msgstr ""

#: ../../guides/plugins.rst:173
#: ../../guides/views.rst:596
#: ../../guides/web-services.rst:388
msgid "Related"
msgstr ""

#: ../../guides/plugins/dependencies.rst:2
msgid "Plugin Dependencies"
msgstr ""

#: ../../guides/plugins/dependencies.rst:4
msgid "In Elgg 1.8 a plugin dependencies system was introduced to prevent plugins from being used on incompatible systems."
msgstr ""

#: ../../guides/plugins/dependencies.rst:13
msgid "The dependencies system is controlled through a plugin's ``manifest.xml`` file. Plugin authors can specify that a plugin:"
msgstr ""

#: ../../guides/plugins/dependencies.rst:15
msgid "Requires certain Elgg versions, Elgg plugins, PHP extensions, and PHP settings."
msgstr ""

#: ../../guides/plugins/dependencies.rst:16
msgid "Suggests certain Elgg versions, Elgg plugins, PHP extensions, and PHP settings."
msgstr ""

#: ../../guides/plugins/dependencies.rst:17
msgid "Conflicts with certain Elgg versions or Elgg plugins."
msgstr ""

#: ../../guides/plugins/dependencies.rst:18
msgid "Provides the equivalent of another Elgg plugin or PHP extension."
msgstr ""

#: ../../guides/plugins/dependencies.rst:20
msgid "The dependency system uses the four verbs above (``requires``, ``suggests``, ``conflicts``, and ``provides``) as parent elements to indicate what type of dependency is described by its children. All dependencies have a similar format with similar options:"
msgstr ""

#: ../../guides/plugins/dependencies.rst:32
msgid "``type`` is always required"
msgstr ""

#: ../../guides/plugins/dependencies.rst:35
msgid "Verbs"
msgstr ""

#: ../../guides/plugins/dependencies.rst:37
msgid "With the exception of ``provides``, all verbs use the same six types with differing effects, and the type options are the same among the verbs. ``provides`` only supports ``plugin`` and ``php_extension``."
msgstr ""

#: ../../guides/plugins/dependencies.rst:40
msgid "Requires"
msgstr ""

#: ../../guides/plugins/dependencies.rst:42
msgid "Using a ``requires`` dependency means that the plugin cannot be enabled unless the dependency is exactly met."
msgstr ""

#: ../../guides/plugins/dependencies.rst:45
msgid "Mandatory requires: elgg_release"
msgstr ""

#: ../../guides/plugins/dependencies.rst:47
msgid "Every plugin must have at least one requires: the version of Elgg the plugin is developed for. This is specified by the Elgg API ``release`` (1.8). The default comparison ``>=``, but you can specify your own by passing the ``<comparison>`` element."
msgstr ""

#: ../../guides/plugins/dependencies.rst:49
msgid "Using elgg_release:"
msgstr ""

#: ../../guides/plugins/dependencies.rst:59
msgid "Suggests"
msgstr ""

#: ../../guides/plugins/dependencies.rst:61
msgid "``suggests`` dependencies signify that the plugin author suggests a specific system configuration, but it is not required to use the plugin. The suggestions can also be another plugin itself which could interact, extend, or be extended by this plugin, but is not required for it to function."
msgstr ""

#: ../../guides/plugins/dependencies.rst:63
msgid "Suggest another plugin:"
msgstr ""

#: ../../guides/plugins/dependencies.rst:73
msgid "Suggest a certain PHP setting:"
msgstr ""

#: ../../guides/plugins/dependencies.rst:85
msgid "Conflicts"
msgstr ""

#: ../../guides/plugins/dependencies.rst:87
msgid "``conflicts`` dependencies mean the plugin cannot be used under a specific system configuration."
msgstr ""

#: ../../guides/plugins/dependencies.rst:89
msgid "Conflict with any version of the profile plugin:"
msgstr ""

#: ../../guides/plugins/dependencies.rst:98
msgid "Conflict with a specific release of Elgg:"
msgstr ""

#: ../../guides/plugins/dependencies.rst:109
msgid "Provides"
msgstr ""

#: ../../guides/plugins/dependencies.rst:111
msgid "``provides`` dependencies tell Elgg that this plugin is providing the functionality of another plugin or PHP extension. Unlike the other verbs, it only supports two types: ``plugin`` and ``php_extension``."
msgstr ""

#: ../../guides/plugins/dependencies.rst:113
msgid "The purpose of this is to provide interchangeable APIs implemented by different plugins. For example, the twitter_services plugin provides an API for other plugins to Tweet on behalf of the user via curl and Oauth. A plugin author could write a compatible plugin for servers without curl support that uses sockets streams and specify that it provides twitter_services. Any plugins that suggest or require twitter_services would then know they can work."
msgstr ""

#: ../../guides/plugins/dependencies.rst:125
msgid "All plugins provide themselves as their plugin id (directory name) at the version defined in the their manifest."
msgstr ""

#: ../../guides/plugins/dependencies.rst:128
msgid "Types"
msgstr ""

#: ../../guides/plugins/dependencies.rst:130
msgid "Every dependency verb has a mandatory ``<type>`` element that must be one of the following six values:"
msgstr ""

#: ../../guides/plugins/dependencies.rst:132
msgid "**elgg_release** - The release version of Elgg (1.8)"
msgstr ""

#: ../../guides/plugins/dependencies.rst:133
msgid "**plugin** - An Elgg plugin"
msgstr ""

#: ../../guides/plugins/dependencies.rst:134
msgid "**priority** - A plugin load priority"
msgstr ""

#: ../../guides/plugins/dependencies.rst:135
msgid "**php_extension** - A PHP extension"
msgstr ""

#: ../../guides/plugins/dependencies.rst:136
msgid "**php_ini** - A PHP setting"
msgstr ""

#: ../../guides/plugins/dependencies.rst:137
msgid "**php_version** - A PHP version"
msgstr ""

#: ../../guides/plugins/dependencies.rst:141
msgid "``provides`` only supports ``plugin`` and ``php_extension`` types."
msgstr ""

#: ../../guides/plugins/dependencies.rst:143
msgid "Every type is defined with a dependency verb as the parent element. Additional option elements are at the same level as the type element:"
msgstr ""

#: ../../guides/plugins/dependencies.rst:154
msgid "elgg_release"
msgstr ""

#: ../../guides/plugins/dependencies.rst:156
msgid "These concern the API and release versions of Elgg and requires the following option element:"
msgstr ""

#: ../../guides/plugins/dependencies.rst:158
msgid "**version** - The API or release version"
msgstr ""

#: ../../guides/plugins/dependencies.rst:160
#: ../../guides/plugins/dependencies.rst:219
msgid "The following option element is supported, but not required:"
msgstr ""

#: ../../guides/plugins/dependencies.rst:162
#: ../../guides/plugins/dependencies.rst:174
#: ../../guides/plugins/dependencies.rst:221
msgid "**comparison** - The comparison operator to use. Defaults to >= if not passed"
msgstr ""

#: ../../guides/plugins/dependencies.rst:165
msgid "plugin"
msgstr ""

#: ../../guides/plugins/dependencies.rst:167
msgid "Specifies an Elgg plugin by its ID (directory name). This requires the following option element:"
msgstr ""

#: ../../guides/plugins/dependencies.rst:169
msgid "**name** - The ID of the plugin"
msgstr ""

#: ../../guides/plugins/dependencies.rst:171
#: ../../guides/plugins/dependencies.rst:191
msgid "The following option elements are supported, but not required:"
msgstr ""

#: ../../guides/plugins/dependencies.rst:173
msgid "**version** - The version of the plugin"
msgstr ""

#: ../../guides/plugins/dependencies.rst:177
msgid "priority"
msgstr ""

#: ../../guides/plugins/dependencies.rst:179
msgid "This requires the plugin to be loaded before or after another plugin, if that plugin exists. ``requires`` should be used to require that a plugin exists. The following option elements are required:"
msgstr ""

#: ../../guides/plugins/dependencies.rst:181
msgid "**plugin** - The plugin ID to base the load order on"
msgstr ""

#: ../../guides/plugins/dependencies.rst:182
msgid "**priority** - The load order: 'before' or 'after'"
msgstr ""

#: ../../guides/plugins/dependencies.rst:185
msgid "php_extension"
msgstr ""

#: ../../guides/plugins/dependencies.rst:187
msgid "This checks PHP extensions. The follow option element is required:"
msgstr ""

#: ../../guides/plugins/dependencies.rst:189
msgid "**name** - The name of the PHP extension"
msgstr ""

#: ../../guides/plugins/dependencies.rst:193
msgid "**version** - The version of the extension"
msgstr ""

#: ../../guides/plugins/dependencies.rst:194
#: ../../guides/plugins/dependencies.rst:210
msgid "**comparison** - The comparison operator to use. Defaults to =="
msgstr ""

#: ../../guides/plugins/dependencies.rst:198
msgid "The format of extension versions varies greatly among PHP extensions and is sometimes not even set. This is generally worthless to check."
msgstr ""

#: ../../guides/plugins/dependencies.rst:201
msgid "php_ini"
msgstr ""

#: ../../guides/plugins/dependencies.rst:203
msgid "This checks PHP settings. The following option elements are required:"
msgstr ""

#: ../../guides/plugins/dependencies.rst:205
msgid "**name** - The name of the setting to check"
msgstr ""

#: ../../guides/plugins/dependencies.rst:206
msgid "**value** - The value of the setting to compare against"
msgstr ""

#: ../../guides/plugins/dependencies.rst:208
msgid "The following options are supported, but not required:"
msgstr ""

#: ../../guides/plugins/dependencies.rst:213
msgid "php_version"
msgstr ""

#: ../../guides/plugins/dependencies.rst:215
msgid "This checks the PHP version. The following option elements are required:"
msgstr ""

#: ../../guides/plugins/dependencies.rst:217
msgid "**version** - The PHP version"
msgstr ""

#: ../../guides/plugins/dependencies.rst:224
msgid "Comparison Operators"
msgstr ""

#: ../../guides/plugins/dependencies.rst:226
msgid "Dependencies that check versions support passing a custom operator via the ``<comparison>`` element."
msgstr ""

#: ../../guides/plugins/dependencies.rst:228
msgid "The follow are valid comparison operators:"
msgstr ""

#: ../../guides/plugins/dependencies.rst:230
msgid "< or lt"
msgstr ""

#: ../../guides/plugins/dependencies.rst:231
msgid "<= or le"
msgstr ""

#: ../../guides/plugins/dependencies.rst:232
msgid "=, ==, or eq"
msgstr ""

#: ../../guides/plugins/dependencies.rst:233
msgid "!=, <>, or ne"
msgstr ""

#: ../../guides/plugins/dependencies.rst:234
msgid "> or gt"
msgstr ""

#: ../../guides/plugins/dependencies.rst:235
msgid ">= or ge"
msgstr ""

#: ../../guides/plugins/dependencies.rst:237
msgid "If ``<comparison>`` is not passed, the follow are used as defaults, depending upon the dependency type:"
msgstr ""

#: ../../guides/plugins/dependencies.rst:239
msgid "requires->elgg_release: >="
msgstr ""

#: ../../guides/plugins/dependencies.rst:240
msgid "requires->plugin: >="
msgstr ""

#: ../../guides/plugins/dependencies.rst:241
msgid "requires->php_extension: ="
msgstr ""

#: ../../guides/plugins/dependencies.rst:242
msgid "requires->php_ini: ="
msgstr ""

#: ../../guides/plugins/dependencies.rst:243
msgid "all conflicts: ="
msgstr ""

#: ../../guides/plugins/dependencies.rst:247
msgid "You must escape < and > to ``&gt;`` and ``&lt;``. For comparisons that use these values, it is recommended you use the string equivalents instead!"
msgstr ""

#: ../../guides/plugins/dependencies.rst:250
msgid "Quick Examples"
msgstr ""

#: ../../guides/plugins/dependencies.rst:253
msgid "Requires Elgg 1.8.2 or higher"
msgstr ""

#: ../../guides/plugins/dependencies.rst:263
msgid "Requires the Groups plugin is active"
msgstr ""

#: ../../guides/plugins/dependencies.rst:273
msgid "Requires to be after the Profile plugin if Profile is active"
msgstr ""

#: ../../guides/plugins/dependencies.rst:284
msgid "Conflicts with The Wire plugin"
msgstr ""

#: ../../guides/plugins/dependencies.rst:294
msgid "Requires at least 256 MB memory in PHP"
msgstr ""

#: ../../guides/plugins/dependencies.rst:307
msgid "Requires at least PHP version 5.3"
msgstr ""

#: ../../guides/plugins/dependencies.rst:317
msgid "Suggest the TidyPics plugin is loaded"
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:2
msgid "Plugin skeleton"
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:4
msgid "The following is the standard for plugin structure in Elgg as of Elgg 2.0."
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:7
msgid "Example Structure"
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:9
msgid "The following is an example of a plugin with standard structure. For further explanation of this structure, see the details in the following sections. Your plugin may not need all the files listed"
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:11
msgid "The following files for plugin ``example`` would go in ``/mod/example/``"
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:69
msgid "Required Files"
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:71
msgid "Plugins **must** provide a ``start.php`` and ``manifest.xml`` file in the plugin root in order to be recognized by Elgg."
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:73
msgid "Therefore the following is the minimally compliant structure:"
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:84
msgid "Plugins *should* place scripts for actions an ``actions/`` directory, and furthermore *should* use the name of the action to determine the location within that directory."
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:86
msgid "For example, the action ``my/example/action`` would go in ``my_plugin/actions/my/example/action.php``. This makes it very obvious which script is associated with which action."
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:88
msgid "Similarly, the body of the form that submits to this action should be located in ``forms/my/example/action.php``. Not only does this make the connection b/w action handler, form code, and action name obvious, but it allows you to use the new (as of Elgg 1.8) ``elgg_view_form()`` function easily."
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:91
msgid "Text Files"
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:93
msgid "Plugins *may* provide various \\*.txt as additional documentation for the plugin. These files **must** be in Markdown syntax and will generate links on the plugin management sections."
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:96
msgid "README.txt"
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:96
msgid "*should* provide additional information about the plugin of an unspecified nature"
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:99
msgid "COPYRIGHT.txt"
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:99
msgid "If included, **must** provide an explanation of the plugin's copyright, besides what is included in ``manifest.xml``"
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:102
msgid "LICENSE.txt"
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:102
msgid "If included, **must** provide the text of the license that the plugin is released under."
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:105
msgid "INSTALL.txt"
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:105
msgid "If included, **must** provide additional instructions for installing the plugin if the process is sufficiently complicated (e.g. if it requires installing third party libraries on the host machine, or requires acquiring an API key from a third party)."
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:108
msgid "CHANGES.txt"
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:108
msgid "If included, **must** provide a list of changes for their plugin, grouped by version number, with the most recent version at the top."
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:110
msgid "Plugins *may* include additional \\*.txt files besides these, but no interface is given for reading them."
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:113
msgid "Pages"
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:115
msgid "To render full pages, plugins should use **resource views** (which have names beginning with ``resources/``). This allows other plugins to easily replace functionality via the view system."
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:120
msgid "The reason we encourage this structure is"
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:122
msgid "To form a logical relationship between urls and scripts, so that people examining the code can have an idea of what it does just by examining the structure."
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:123
msgid "To clean up the root plugin directory, which historically has quickly gotten cluttered with the page handling scripts."
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:126
msgid "Classes"
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:128
msgid "Elgg provides `PSR-0 <http://www.php-fig.org/psr/psr-0/>`_ autoloading out of every active plugin's ``classes/`` directory."
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:130
msgid "You're encouraged to follow the `PHP-FIG <http://www.php-fig.org/>`_ standards when writing your classes."
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:134
msgid "Files with a \".class.php\" extension will **not** be recognized by Elgg."
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:137
msgid "Vendors"
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:139
msgid "Included third-party libraries of any kind *should* be included in the ``vendors/`` folder in the plugin root. Though this folder has no special significance to the Elgg engine, this has historically been the location where Elgg core stores its third-party libraries, so we encourage the same format for the sake of consistency and familiarity."
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:144
msgid "In order to override core views, a plugin's views can be placed in ``views/``, or an ``elgg-plugin.php`` config file can be used for more detailed file/path mapping. See :doc:`/guides/views`."
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:146
msgid "Javascript and CSS will live in the views system. See :doc:`/guides/javascript`."
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:149
msgid "activate.php and deactivate.php"
msgstr ""

#: ../../guides/plugins/plugin-skeleton.rst:151
msgid "The ``activate.php`` and ``deactivate.php`` files contain procedural code that will run respectively upon plugin activation or deactivation. Use these files to perform one-time events such as registering a persistent admin notice, registering subtypes, or performing garbage collection when deactivated."
msgstr ""

#: ../../guides/river.rst:2
msgid "River"
msgstr ""

#: ../../guides/river.rst:4
msgid "Elgg natively supports the \"river\", an activity stream containing descriptions of activities performed by site members. This page gives an overview of adding events to the river in an Elgg plugin."
msgstr ""

#: ../../guides/river.rst:9
msgid "Pushing river items"
msgstr ""

#: ../../guides/river.rst:11
msgid "Items are pushed to the activity river through a function call, which you must include in your plugins for the items to appear."
msgstr ""

#: ../../guides/river.rst:14
msgid "Here we add a river item telling that a user has created a new blog post:"
msgstr ""

#: ../../guides/river.rst:27
msgid "All available parameters:"
msgstr ""

#: ../../guides/river.rst:29
msgid "``view`` => STR The view that will handle the river item (must exist)"
msgstr ""

#: ../../guides/river.rst:30
msgid "``action_type`` => STR An arbitrary string to define the action (e.g. 'create', 'update', 'vote', 'review', etc)"
msgstr ""

#: ../../guides/river.rst:31
msgid "``subject_guid`` => INT The GUID of the entity doing the action"
msgstr ""

#: ../../guides/river.rst:32
msgid "``object_guid`` => INT The GUID of the entity being acted upon"
msgstr ""

#: ../../guides/river.rst:33
msgid "``target_guid`` => INT The GUID of the the object entity's container (optional)"
msgstr ""

#: ../../guides/river.rst:34
msgid "``access_id`` => INT The access ID of the river item (default: same as the object)"
msgstr ""

#: ../../guides/river.rst:35
msgid "``posted`` => INT The UNIX epoch timestamp of the river item (default: now)"
msgstr ""

#: ../../guides/river.rst:36
msgid "``annotation_id`` => INT The annotation ID associated with this river entry (optional)"
msgstr ""

#: ../../guides/river.rst:38
msgid "When an item is deleted or changed, the river item will be updated automatically."
msgstr ""

#: ../../guides/river.rst:41
msgid "River views"
msgstr ""

#: ../../guides/river.rst:43
msgid "In order for events to appear in the river you need to provide a corresponding :doc:`view <views>` with the name specified in the function above."
msgstr ""

#: ../../guides/river.rst:46
msgid "We recommend ``/river/{type}/{subtype}/{action}``, where:"
msgstr ""

#: ../../guides/river.rst:48
msgid "{type} is the entity type of the content we're interested in (``object`` for objects, ``user`` for users, etc)"
msgstr ""

#: ../../guides/river.rst:49
msgid "{subtype} is the entity subtype of the content we're interested in (``blog`` for blogs, ``photo_album`` for albums, etc)"
msgstr ""

#: ../../guides/river.rst:50
msgid "{action} is the action that took place (''create'', ''update'', etc)"
msgstr ""

#: ../../guides/river.rst:52
msgid "River item information will be passed in an object called ``$vars['item']``, which contains the following important parameters:"
msgstr ""

#: ../../guides/river.rst:54
msgid "``$vars['item']->subject_guid`` The GUID of the user performing the action"
msgstr ""

#: ../../guides/river.rst:55
msgid "``$vars['item']->object_guid`` The GUID of the entity being acted upon"
msgstr ""

#: ../../guides/river.rst:57
msgid "Timestamps etc will be generated for you."
msgstr ""

#: ../../guides/river.rst:59
msgid "For example, the blog plugin uses the following code for its river view:"
msgstr ""

#: ../../guides/routing.rst:4
msgid "Elgg has two mechanisms to respond to HTTP requests that don't already go through the :doc:`/design/actions` and :doc:`/guides/views/simplecache` systems."
msgstr ""

#: ../../guides/routing.rst:8
msgid "URL Identifier and Segments"
msgstr ""

#: ../../guides/routing.rst:10
msgid "After removing the site URL, Elgg splits the URL path by ``/`` into an array. The first element, the **identifier**, is shifted off, and the remaining elements are called the **segments**. For example, if the site URL is ``http://example.com/elgg/``, the URL ``http://example.com/elgg/blog/owner/jane?foo=123`` produces:"
msgstr ""

#: ../../guides/routing.rst:15
msgid "Identifier: ``'blog'``. Segments: ``['owner', 'jane']``. (the query string parameters are available via ``get_input()``)"
msgstr ""

#: ../../guides/routing.rst:18
msgid "The site URL (home page) is a special case that produces an empty string identifier and an empty segments array."
msgstr ""

#: ../../guides/routing.rst:21
msgid "URL identifier/segments should be considered potentially dangerous user input. Elgg uses ``htmlspecialchars`` to escapes HTML entities in them."
msgstr ""

#: ../../guides/routing.rst:24
msgid "Page Handler"
msgstr ""

#: ../../guides/routing.rst:26
msgid "To handle all URLs that begin with a particular identifier, you can register a function to act as a :doc:`/guides/pagehandler`. When the handler is called, the segments array is passed in as the first argument."
msgstr ""

#: ../../guides/routing.rst:30
msgid "The following code registers a page handler for \"blog\" URLs and shows how one might route the request to a resource view."
msgstr ""

#: ../../guides/routing.rst:67
msgid "The ``route`` Plugin Hook"
msgstr ""

#: ../../guides/routing.rst:69
msgid "The ``route`` plugin hook is triggered before page handlers are called. The URL identifier is given as the type of the hook. This hook can be used to add some logic before the request is handled elsewhere, or take over page rendering completely."
msgstr ""

#: ../../guides/routing.rst:73
msgid "Generally devs should instead use a page handler unless they need to affect a single page or a wider variety of URLs."
msgstr ""

#: ../../guides/routing.rst:76
msgid "The following code results in ``/blog/all`` requests being completely handled by the plugin hook handler. For these requests the ``blog`` page handler is never called."
msgstr ""

#: ../../guides/routing.rst:99
msgid "As of 2.1, route modification should be done in the ``route:rewrite`` hook."
msgstr ""

#: ../../guides/routing.rst:102
msgid "The ``route:rewrite`` Plugin Hook"
msgstr ""

#: ../../guides/routing.rst:104
msgid "For URL rewriting, the ``route:rewrite`` hook (with similar arguments as ``route``) is triggered very early, and allows modifying the request URL path (relative to the Elgg site)."
msgstr ""

#: ../../guides/routing.rst:107
msgid "Here we rewrite requests for ``news/*`` to ``blog/*``:"
msgstr ""

#: ../../guides/routing.rst:120
msgid "The hook must be registered directly in your plugin ``start.php`` (the ``[init, system]`` event is too late)."
msgstr ""

#: ../../guides/routing.rst:124
msgid "Routing overview"
msgstr ""

#: ../../guides/routing.rst:126
msgid "For regular pages, Elgg's program flow is something like this:"
msgstr ""

#: ../../guides/routing.rst:128
msgid "A user requests ``http://example.com/news/owner/jane``."
msgstr ""

#: ../../guides/routing.rst:129
msgid "Plugins are initialized."
msgstr ""

#: ../../guides/routing.rst:130
msgid "Elgg parses the URL to identifier ``news`` and segments ``['owner', 'jane']``."
msgstr ""

#: ../../guides/routing.rst:131
msgid "Elgg triggers the plugin hook ``route:rewrite, news`` (see above)."
msgstr ""

#: ../../guides/routing.rst:132
msgid "Elgg triggers the plugin hook ``route, blog`` (was rewritten in the rewrite hook)."
msgstr ""

#: ../../guides/routing.rst:133
msgid "Elgg finds a registered page handler (see above) for ``blog``, and calls the function, passing in the segments."
msgstr ""

#: ../../guides/routing.rst:135
msgid "The page handler function determines it needs to render a single user's blog. It calls ``elgg_view_resource('blog/owner', $vars)`` where ``$vars`` contains the username."
msgstr ""

#: ../../guides/routing.rst:137
msgid "The ``resources/blog/owner`` view gets the username via ``$vars['username']``, and uses many other views and formatting functions like ``elgg_view_layout()`` and ``elgg_view_page()`` to create the entire HTML page."
msgstr ""

#: ../../guides/routing.rst:139
msgid "The page handler echos the view HTML and returns ``true`` to indicate it handled the request."
msgstr ""

#: ../../guides/routing.rst:140
msgid "PHP invokes Elgg's shutdown sequence."
msgstr ""

#: ../../guides/routing.rst:141
msgid "The user receives a fully rendered page."
msgstr ""

#: ../../guides/routing.rst:143
msgid "Elgg's coding standards suggest a particular URL layout, but there is no syntax enforced."
msgstr ""

#: ../../guides/services.rst:2
msgid "Services"
msgstr ""

#: ../../guides/services.rst:4
msgid "Elgg uses the ``Elgg\\Application`` class to load and bootstrap Elgg. In future releases this class will offer a set of service objects for plugins to use."
msgstr ""

#: ../../guides/services.rst:9
msgid "If you have a useful idea, you can :doc:`add a new service </contribute/services>`!"
msgstr ""

#: ../../guides/services.rst:14
msgid "``elgg()->menus`` provides low-level methods for constructing menus. In general, menus should be passed to ``elgg_view_menu`` for rendering instead of manual rendering."
msgstr ""

#: ../../guides/settings.rst:2
msgid "Plugin settings"
msgstr ""

#: ../../guides/settings.rst:4
msgid "You need to perform some extra steps if your plugin needs settings to be saved and controlled via the administration panel:"
msgstr ""

#: ../../guides/settings.rst:6
msgid "Create a file in your plugin’s default view folder called ``plugins/your_plugin/settings.php``, where ``your_plugin`` is the name of your plugin’s directory in the ``mod`` hierarchy"
msgstr ""

#: ../../guides/settings.rst:7
msgid "Fill this file with the form elements you want to display together with :doc:`internationalised <i18n>` text labels"
msgstr ""

#: ../../guides/settings.rst:8
msgid "Set the name attribute in your form components to ``param[`varname`]`` where ``varname`` is the name of the variable. These will be saved as private settings attached to a plugin entity. So, if your variable is called ``param[myparameter]`` your plugin (which is also passed to this view as ``$vars['entity']``) will be called ``$vars['entity']->myparameter``"
msgstr ""

#: ../../guides/settings.rst:10
msgid "An example ``settings.php`` would look like:"
msgstr ""

#: ../../guides/settings.rst:27
msgid "You don’t need to add a save button or the form, this will be handled by the framework."
msgstr ""

#: ../../guides/settings.rst:31
msgid "You cannot use form components that send no value when \"off.\" These include radio inputs and check boxes."
msgstr ""

#: ../../guides/settings.rst:34
msgid "User settings"
msgstr ""

#: ../../guides/settings.rst:36
msgid "Your plugin might need to store per user settings too, and you would like to have your plugin's options to appear in the user's settings page. This is also easy to do and follows the same pattern as setting up the global plugin configuration explained earlier. The only difference is that instead of using a ``settings`` file you will use ``usersettings``. So, the path to the user edit view for your plugin would be ``plugins/your_plugin/usersettings.php``."
msgstr ""

#: ../../guides/settings.rst:40
msgid "The title of the usersettings form will default to the plugin name. If you want to change this, add a translation for ``plugin_id:usersettings:title``."
msgstr ""

#: ../../guides/settings.rst:43
msgid "Retrieving settings in your code"
msgstr ""

#: ../../guides/settings.rst:45
msgid "To retrieve settings from your code use:"
msgstr ""

#: ../../guides/settings.rst:51
msgid "or for user settings"
msgstr ""

#: ../../guides/settings.rst:57
msgid "where:"
msgstr ""

#: ../../guides/settings.rst:59
msgid "``$name`` Is the value you want to retrieve"
msgstr ""

#: ../../guides/settings.rst:60
msgid "``$user_guid`` Is the user you want to retrieve these for (defaults to the currently logged in user)"
msgstr ""

#: ../../guides/settings.rst:61
msgid "``$plugin_name`` Is the name of the plugin (detected if run from within a plugin)"
msgstr ""

#: ../../guides/settings.rst:64
msgid "Setting values while in code"
msgstr ""

#: ../../guides/settings.rst:66
msgid "Values may also be set from within your plugin code, to do this use one of the following functions:"
msgstr ""

#: ../../guides/settings.rst:72
msgid "or"
msgstr ""

#: ../../guides/settings.rst:80
msgid "The ``$plugin_id`` needs to be provided when setting plugin (user)settings."
msgstr ""

#: ../../guides/themes.rst:2
msgid "Themes"
msgstr ""

#: ../../guides/themes.rst:4
msgid "Customize the look and feel of Elgg."
msgstr ""

#: ../../guides/themes.rst:6
msgid "A theme is a type of :doc:`plugin </admin/plugins>` that overrides display aspects of Elgg."
msgstr ""

#: ../../guides/themes.rst:10
msgid "This guide assumes you are familiar with:"
msgstr ""

#: ../../guides/themes.rst:17
msgid "Create your plugin"
msgstr ""

#: ../../guides/themes.rst:19
msgid "Create your plugin as described in the :doc:`developer guide </guides/index>`."
msgstr ""

#: ../../guides/themes.rst:21
msgid "Create a new directory under mod/"
msgstr ""

#: ../../guides/themes.rst:22
msgid "Create a new start.php"
msgstr ""

#: ../../guides/themes.rst:23
msgid "Create a manifest.xml file describing your theme."
msgstr ""

#: ../../guides/themes.rst:26
msgid "Customize the CSS"
msgstr ""

#: ../../guides/themes.rst:28
msgid "As of Elgg 1.8, the css is split into several files based on what aspects of the site you're theming. This allows you to tackle them one at a time, giving you a chance to make real progress without getting overwhelmed."
msgstr ""

#: ../../guides/themes.rst:33
msgid "Here is a list of the existing CSS views:"
msgstr ""

#: ../../guides/themes.rst:35
msgid "elements/buttons.css: Provides a way to style all the different kinds of buttons your site will use. There are 5 kinds of buttons that plugins will expect to be available: action, cancel, delete, submit, and special."
msgstr ""

#: ../../guides/themes.rst:36
msgid "elements/chrome.css: This file has some miscellaneous look-and-feel classes."
msgstr ""

#: ../../guides/themes.rst:37
msgid "elements/components.css: This file contains many “css objects” that are used all over the site: media block, list, gallery, table, owner block, system messages, river, tags, photo, and comments."
msgstr ""

#: ../../guides/themes.rst:38
msgid "elements/forms.css: This file determines what your forms and input elements will look like."
msgstr ""

#: ../../guides/themes.rst:39
msgid "elements/icons.css: Contains styles for the icons and avatars used on your site."
msgstr ""

#: ../../guides/themes.rst:40
msgid "elements/layout.css: Determines what your page layout will look like: sidebars, page wrapper, main body, header, footer, etc."
msgstr ""

#: ../../guides/themes.rst:41
msgid "elements/modules.css: Lots of content in Elgg is displayed in boxes with a title and a content body. We called these modules. There are a few kinds: info, aside, featured, dropdown, popup, widget. Widget styles are included in this file too, since they are a subset of modules."
msgstr ""

#: ../../guides/themes.rst:42
msgid "elements/navigation.css: This file determines what all your menus will look like."
msgstr ""

#: ../../guides/themes.rst:43
msgid "elements/typography.css: This file determines what the content and headings of your site will look like."
msgstr ""

#: ../../guides/themes.rst:44
msgid "rtl.css: Custom rules for users viewing your site in a right-to-left language."
msgstr ""

#: ../../guides/themes.rst:45
msgid "admin.css: A completely separate theme for the admin area (usually not overridden)."
msgstr ""

#: ../../guides/themes.rst:46
msgid "elgg.css: Compiles all the core elements/\\* files into one file (DO NOT OVERRIDE)."
msgstr ""

#: ../../guides/themes.rst:47
msgid "elements/core.css: Contains base styles for the more complicated “css objects”. If you find yourself wanting to override this, you probably need to report a bug to Elgg core instead (DO NOT OVERRIDE)."
msgstr ""

#: ../../guides/themes.rst:48
msgid "elements/reset.css: Contains a reset stylesheet that forces elements to have the same default"
msgstr ""

#: ../../guides/themes.rst:52
msgid "View extension"
msgstr ""

#: ../../guides/themes.rst:54
msgid "There are two ways you can modify views:"
msgstr ""

#: ../../guides/themes.rst:56
msgid "The first way is to add extra stuff to an existing view via the extend view function from within your start.php’s initialization function."
msgstr ""

#: ../../guides/themes.rst:59
msgid "For example, the following start.php will add mytheme/css to Elgg's core css file:"
msgstr ""

#: ../../guides/themes.rst:74
msgid "View overloading"
msgstr ""

#: ../../guides/themes.rst:76
msgid "Plugins can have a view hierarchy, any file that exists here will replace any files in the existing core view hierarchy... so for example, if my plugin has a file:"
msgstr ""

#: ../../guides/themes.rst:80
msgid "``/mod/myplugin/views/default/elements/typography.css``"
msgstr ""

#: ../../guides/themes.rst:82
msgid "it will replace:"
msgstr ""

#: ../../guides/themes.rst:84
msgid "``/views/default/elements/typography.css``"
msgstr ""

#: ../../guides/themes.rst:86
msgid "But only when the plugin is active."
msgstr ""

#: ../../guides/themes.rst:88
msgid "This gives you total control over the way Elgg looks and behaves. It gives you the option to either slightly modify or totally replace existing views."
msgstr ""

#: ../../guides/themes.rst:93
msgid "Icons"
msgstr ""

#: ../../guides/themes.rst:95
msgid "As of Elgg 2.0 the default Elgg icons come from the FontAwesome_ library. You can use any of these icons by calling:"
msgstr ""

#: ../../guides/themes.rst:98
msgid "``elgg_view_icon('icon-name');``"
msgstr ""

#: ../../guides/themes.rst:100
msgid "``icon-name`` can be any of the `FontAwesome icons`_ without the ``fa-``-prefix."
msgstr ""

#: ../../guides/themes.rst:106
msgid "Tools"
msgstr ""

#: ../../guides/themes.rst:108
msgid "Starting in Elgg 1.8, we've provided you with some development tools to help you with theming: Turn on the “Developers” plugin and go to the “Theme Preview” page to start tracking your theme's progress."
msgstr ""

#: ../../guides/themes.rst:113
msgid "Customizing the front page"
msgstr ""

#: ../../guides/themes.rst:114
msgid "The main Elgg index page runs a plugin hook called 'index,system'. If this returns true, it assumes that another front page has been drawn and doesn't display the default page."
msgstr ""

#: ../../guides/themes.rst:118
msgid "Therefore, you can override it by registering a function to the 'index,system' plugin hook and then returning true from that function."
msgstr ""

#: ../../guides/themes.rst:121
msgid "Here's a quick overview:"
msgstr ""

#: ../../guides/themes.rst:123
msgid "Create your new plugin"
msgstr ""

#: ../../guides/themes.rst:125
msgid "In the start.php you will need something like the following:"
msgstr ""

#: ../../guides/themes.rst:147
msgid "Then, create an index page (/pluginname/pages/index.php) and use that to put the content you would like on the front page of your Elgg site."
msgstr ""

#: ../../guides/upgrading.rst:2
msgid "Upgrading Plugins"
msgstr ""

#: ../../guides/upgrading.rst:4
msgid "Prepare your plugin for the next version of Elgg."
msgstr ""

#: ../../guides/upgrading.rst:6
msgid "See the administrator guides for :doc:`how to upgrade a live site </admin/upgrading>`."
msgstr ""

#: ../../guides/upgrading.rst:14
msgid "From 2.2 to 2.3"
msgstr ""

#: ../../guides/upgrading.rst:17
msgid "PHP Version"
msgstr ""

#: ../../guides/upgrading.rst:19
msgid "PHP 5.5 has reached end of life in July 2016. To ensure that Elgg sites are secure, we now require PHP 5.6 for new installations."
msgstr ""

#: ../../guides/upgrading.rst:21
msgid "Existing installations can continue using PHP 5.5 until Elgg 3.0."
msgstr ""

#: ../../guides/upgrading.rst:23
msgid "In order to upgrade Elgg to 2.3 using composer while using PHP 5.5, you may need to use ``--ignore-platform-reqs`` flag."
msgstr ""

#: ../../guides/upgrading.rst:26
#: ../../guides/upgrading.rst:154
#: ../../guides/upgrading.rst:215
msgid "Deprecated APIs"
msgstr ""

#: ../../guides/upgrading.rst:28
msgid "Registering for ``to:object`` hook by the extender name: Use ``to:object, annotation`` and ``to:object, metadata`` hooks instead."
msgstr ""

#: ../../guides/upgrading.rst:29
msgid "``ajax_forward_hook()``: No longer used as handler for `'forward','all'` hook. Ajax response is now wrapped by the ``ResponseFactory``"
msgstr ""

#: ../../guides/upgrading.rst:30
msgid "``ajax_action_hook()``: No longer used as handler for `'action','all'` hook. Output buffering now starts before the hook is triggered in ``ActionsService``"
msgstr ""

#: ../../guides/upgrading.rst:31
msgid "``elgg_error_page_handler()``: No longer used as a handler for `'forward',<error_code>` hooks"
msgstr ""

#: ../../guides/upgrading.rst:32
msgid "``get_uploaded_file()``: Use new file uploads API instead"
msgstr ""

#: ../../guides/upgrading.rst:33
msgid "``get_user_notification_settings()``: Use ``ElggUser::getNotificationSettings()``"
msgstr ""

#: ../../guides/upgrading.rst:34
msgid "``set_user_notification_setting()``: Use ``ElggUser::setNotificationSetting()``"
msgstr ""

#: ../../guides/upgrading.rst:35
msgid "``pagesetup, system`` event: Use the menu or page shell hooks instead."
msgstr ""

#: ../../guides/upgrading.rst:36
msgid "``elgg.walled_garden`` JavaScript is deprecated: Use ``elgg/walled_garden`` AMD module instead."
msgstr ""

#: ../../guides/upgrading.rst:37
msgid "``elgg()->getDb()->getTableprefix()``: Use ``elgg_get_config('dbprefix')``."
msgstr ""

#: ../../guides/upgrading.rst:38
msgid "Private ``update_entity_last_action()``: Refrain from manually updating last action timestamp."
msgstr ""

#: ../../guides/upgrading.rst:39
msgid "Setting non-public ``access_id`` on metadata is deprecated. See below."
msgstr ""

#: ../../guides/upgrading.rst:40
msgid "``get_resized_image_from_existing_file()``: Use ``elgg_save_resized_image()``."
msgstr ""

#: ../../guides/upgrading.rst:41
msgid "``get_resized_image_from_uploaded_file()``: Use ``elgg_save_resized_image()`` in combination with upload API."
msgstr ""

#: ../../guides/upgrading.rst:42
msgid "``get_image_resize_parameters()`` will be removed."
msgstr ""

#: ../../guides/upgrading.rst:43
msgid "``elgg_view_input()``: Use ``elgg_view_field()``. Apologies for the API churn."
msgstr ""

#: ../../guides/upgrading.rst:46
#: ../../guides/upgrading.rst:164
msgid "Deprecated Views"
msgstr ""

#: ../../guides/upgrading.rst:48
msgid "``resources/file/world``: Use the ``resources/file/all`` view instead."
msgstr ""

#: ../../guides/upgrading.rst:49
msgid "``resources/pages/world``: Use the ``resources/pages/all`` view instead."
msgstr ""

#: ../../guides/upgrading.rst:50
msgid "``walled_garden.js``: Use the ``elgg/walled_garden`` module instead."
msgstr ""

#: ../../guides/upgrading.rst:53
msgid "New API for page and action handling"
msgstr ""

#: ../../guides/upgrading.rst:55
msgid "Page handlers and action script files should now return an instance of ``\\Elgg\\Http\\ResponseBuilder``. Plugins should use the following convenience functions to build responses:"
msgstr ""

#: ../../guides/upgrading.rst:58
msgid "``elgg_ok_response()`` sends a 2xx response with HTML (page handler) or JSON data (actions)"
msgstr ""

#: ../../guides/upgrading.rst:59
msgid "``elgg_error_response()`` sends a 4xx or 5xx response without content/data"
msgstr ""

#: ../../guides/upgrading.rst:60
msgid "``elgg_redirect_response()`` silently redirects the request"
msgstr ""

#: ../../guides/upgrading.rst:63
msgid "New API for working with file uploads"
msgstr ""

#: ../../guides/upgrading.rst:65
msgid "``elgg_get_uploaded_files()`` - returns an array of Symfony uploaded file objects"
msgstr ""

#: ../../guides/upgrading.rst:66
msgid "``ElggFile::acceptUploadedFile()`` - moves an uploaded file to Elgg's filestore"
msgstr ""

#: ../../guides/upgrading.rst:69
msgid "New API for manipulating images"
msgstr ""

#: ../../guides/upgrading.rst:71
msgid "New image manipulation service implements a more efficient approach to cropping and resizing images."
msgstr ""

#: ../../guides/upgrading.rst:73
msgid "``elgg_save_resized_image()`` - crops and resizes an image to preferred dimensions"
msgstr ""

#: ../../guides/upgrading.rst:76
msgid "New API for events"
msgstr ""

#: ../../guides/upgrading.rst:78
msgid "``elgg_clear_event_handlers()`` - similar to ``elgg_clear_plugin_hook_handlers`` this functions removes all registered event handlers"
msgstr ""

#: ../../guides/upgrading.rst:81
msgid "New API for signing URLs"
msgstr ""

#: ../../guides/upgrading.rst:83
msgid "URLs can now be signed with a SHA-256 HMAC key and validated at any time before URL expiry. This feature can be used to tokenize action URLs in email notifications, as well as other uses outside of the Elgg installation."
msgstr ""

#: ../../guides/upgrading.rst:85
msgid "``elgg_http_get_signed_url()`` - signs the URL with HMAC key"
msgstr ""

#: ../../guides/upgrading.rst:86
msgid "``elgg_http_validate_signed_url()`` - validates the signed URL"
msgstr ""

#: ../../guides/upgrading.rst:87
msgid "``elgg_signed_request_gatekeeper()`` - gatekeeper that validates the signature of the current request"
msgstr ""

#: ../../guides/upgrading.rst:90
msgid "Extendable form views"
msgstr ""

#: ../../guides/upgrading.rst:92
msgid "Form footer rendering can now be deferred until the form view and its extensions have finished rendering. This allows plugins to collaborate on form views without breaking the markup logic."
msgstr ""

#: ../../guides/upgrading.rst:94
msgid "``elgg_set_form_footer()`` - sets form footer for deferred rendering"
msgstr ""

#: ../../guides/upgrading.rst:95
msgid "``elgg_get_form_footer()`` - returns currently set form footer"
msgstr ""

#: ../../guides/upgrading.rst:98
msgid "Metadata ``access_id``"
msgstr ""

#: ../../guides/upgrading.rst:100
msgid "It's now deprecated to create metadata with an explicit ``access_id`` value other than ``ACCESS_PUBLIC``."
msgstr ""

#: ../../guides/upgrading.rst:102
msgid "In Elgg 3.0, metadata will not be access controlled, and will be available in all contexts. If your plugin relies on access control of metadata, it would be wise to migrate storage to annotations or entities instead."
msgstr ""

#: ../../guides/upgrading.rst:105
msgid "New API for extracting class names from arrays"
msgstr ""

#: ../../guides/upgrading.rst:107
msgid "Similar to ``elgg_extract()``, ``elgg_extract_class()`` extracts the \"class\" key (if present), merges into existing class names, and always returns an array."
msgstr ""

#: ../../guides/upgrading.rst:112
msgid "A high level ``'prepare','notification'`` hook is now triggered for instant and subscription notifications and can be used to alter notification objects irrespective of their type."
msgstr ""

#: ../../guides/upgrading.rst:113
msgid "``'format','notification:<method>'`` hook is now triggered for instant and subscription notifications and can be used to format the notification (e.g. strip HTML tags, wrap the notification body in a template etc)."
msgstr ""

#: ../../guides/upgrading.rst:114
msgid "Instant notifications are now handled by the notifications service, hence almost all hooks applicable to subscription notifications also apply to instant notifications."
msgstr ""

#: ../../guides/upgrading.rst:115
msgid "``elgg_get_notification_methods()`` can be used to obtain registered notification methods"
msgstr ""

#: ../../guides/upgrading.rst:116
msgid "Added ``ElggUser::getNotificationSettings()`` and ``ElggUser::setNotificationSetting()``"
msgstr ""

#: ../../guides/upgrading.rst:119
msgid "Entity list functions can output tables"
msgstr ""

#: ../../guides/upgrading.rst:121
msgid "In functions like ``elgg_list_entities($options)``, table output is possible by setting ``$options['list_type'] = 'table'`` and providing an array of table columns as ``$options['columns']``. Each column is an ``Elgg\\Views\\TableColumn`` object, usually created via methods on the service ``elgg()->table_columns``."
msgstr ""

#: ../../guides/upgrading.rst:126
msgid "Plugins can provide or alter these factory methods (see ``Elgg\\Views\\TableColumn\\ColumnFactory``). See the view ``admin/users/newest`` for a usage example."
msgstr ""

#: ../../guides/upgrading.rst:130
msgid "Inline tabs components"
msgstr ""

#: ../../guides/upgrading.rst:132
msgid "Inline tabs component can now be rendered with ``page/components/tabs`` view. The components allows to switch between pre-poluated and ajax-loaded. See ``page/components/tabs`` in core views and ``theme_sandbox/components/tabs`` in developers plugin for usage instructions and examples."
msgstr ""

#: ../../guides/upgrading.rst:136
msgid "API to alter registration and login URL"
msgstr ""

#: ../../guides/upgrading.rst:138
msgid "``elgg_get_registration_url()`` should be used to obtain site's registration URL"
msgstr ""

#: ../../guides/upgrading.rst:139
msgid "``elgg_get_login_url()`` should be used to obtain site's login URL"
msgstr ""

#: ../../guides/upgrading.rst:140
msgid "``registration_url, site`` hook can be used to alter the default registration URL"
msgstr ""

#: ../../guides/upgrading.rst:141
msgid "``login_url, site`` hook can be used to alter the default login URL"
msgstr ""

#: ../../guides/upgrading.rst:144
msgid "Support for fieldsets in forms"
msgstr ""

#: ../../guides/upgrading.rst:146
msgid "``elgg_view_field()`` replaces ``elgg_view_input()``. It has a similar API, but accepts a single array."
msgstr ""

#: ../../guides/upgrading.rst:147
msgid "``elgg_view_field()`` supports ``#type``, ``#label``, ``#help`` and ``#class``, allowing unprefixed versions to be sent to the input view ``$vars``."
msgstr ""

#: ../../guides/upgrading.rst:148
msgid "The new view ``input/fieldset`` can be used to render a set of fields, each rendered with ``elgg_view_field()``."
msgstr ""

#: ../../guides/upgrading.rst:151
msgid "From 2.1 to 2.2"
msgstr ""

#: ../../guides/upgrading.rst:156
msgid "``elgg.ui.river`` JavaScript library: Remove calls to ``elgg_load_js('elgg.ui.river')`` from plugin code. Update ``core/river/filter`` and ``forms/comment/save``, if overwritten, to require component AMD modules"
msgstr ""

#: ../../guides/upgrading.rst:157
msgid "``elgg.ui.popupOpen()`` and ``elgg.ui.popupClose()`` methods in ``elgg.ui`` JS library: Use ``elgg/popup`` module instead."
msgstr ""

#: ../../guides/upgrading.rst:158
msgid "``lightbox.js`` library: Do not use ``elgg_load_js('lightbox.js');`` unless your code references deprecated ``elgg.ui.lightbox`` namespace. Use ``elgg/lightbox`` AMD module instead."
msgstr ""

#: ../../guides/upgrading.rst:159
msgid "``elgg.embed`` library and ``elgg.embed`` object: Do not use ``elgg_load_js('elgg.embed')``. Use ``elgg/embed`` AMD module instead"
msgstr ""

#: ../../guides/upgrading.rst:160
msgid "Accessing ``icons_sizes`` config value directly: Use ``elgg_get_icon_sizes()``"
msgstr ""

#: ../../guides/upgrading.rst:161
msgid "``can_write_to_container()``: Use ``ElggEntity::canWriteToContainer()``"
msgstr ""

#: ../../guides/upgrading.rst:166
msgid "``elgg/ui.river.js`` is deprecated: Do not rely on simplecache URLs to work."
msgstr ""

#: ../../guides/upgrading.rst:167
msgid "``groups/js`` is deprecated: Use ``groups/navigation`` AMD module as a menu item dependency for \"feature\" and \"unfeature\" menu items instead."
msgstr ""

#: ../../guides/upgrading.rst:168
msgid "``lightbox/settings.js`` is deprecated: Use ``getOptions, ui.lightbox`` JS plugin hook or ``data-colorbox-opts`` attribute."
msgstr ""

#: ../../guides/upgrading.rst:169
msgid "``elgg/ckeditor/insert.js`` is deprecated: You no longer need to include it, hook registration takes place in ``elgg/ckeditor`` module"
msgstr ""

#: ../../guides/upgrading.rst:170
msgid "``embed/embed.js`` is deprecated: Use ``elgg/embed`` AMD module."
msgstr ""

#: ../../guides/upgrading.rst:173
msgid "Added ``elgg/popup`` module"
msgstr ""

#: ../../guides/upgrading.rst:175
msgid "New :doc:`elgg/popup module <javascript>` can be used to build out more complex trigger-popup interactions, including binding custom anchor types and opening/closing popups programmatically."
msgstr ""

#: ../../guides/upgrading.rst:178
msgid "Added ``elgg/lightbox`` module"
msgstr ""

#: ../../guides/upgrading.rst:180
msgid "New :doc:`elgg/lightbox module <javascript>` can be used to open and close the lightbox programmatically."
msgstr ""

#: ../../guides/upgrading.rst:183
msgid "Added ``elgg/embed`` module"
msgstr ""

#: ../../guides/upgrading.rst:185
msgid "Even though rarely necessary, ``elgg/embed`` AMD module can be used to access the embed methods programmatically. The module bootstraps itself when necessary and is unlikely to require further decoration."
msgstr ""

#: ../../guides/upgrading.rst:188
msgid "New API for handling entity icons"
msgstr ""

#: ../../guides/upgrading.rst:190
msgid "``ElggEntity`` now implements ``\\Elgg\\EntityIcon`` interface"
msgstr ""

#: ../../guides/upgrading.rst:191
msgid "``elgg_get_icon_sizes()`` - return entity type/subtype specific icon sizes"
msgstr ""

#: ../../guides/upgrading.rst:192
msgid "``ElggEntity::saveIconFromUploadedFile()`` - creates icons from an uploaded file"
msgstr ""

#: ../../guides/upgrading.rst:193
msgid "``ElggEntity::saveIconFromLocalFile()`` - creates icons from a local file"
msgstr ""

#: ../../guides/upgrading.rst:194
msgid "``ElggEntity::saveIconFromElggFile()`` - creates icons from an instance of ``ElggFile``"
msgstr ""

#: ../../guides/upgrading.rst:195
msgid "``ElggEntity::getIcon()`` - returns an instanceof ``ElggIcon`` that points to entity icon location on filestore (this may be just a placeholder, use ``ElggEntity::hasIcon()`` to validate if file has been written)"
msgstr ""

#: ../../guides/upgrading.rst:196
msgid "``ElggEntity::deleteIcon()`` - deletes entity icons"
msgstr ""

#: ../../guides/upgrading.rst:197
msgid "``ElggEntity::getIconLastChange()`` - return modified time of the icon file"
msgstr ""

#: ../../guides/upgrading.rst:198
msgid "``ElggEntity::hasIcon()`` - checks if an icon with given size has been created"
msgstr ""

#: ../../guides/upgrading.rst:199
msgid "``elgg_get_embed_url()`` - can be used to return an embed URL for an entity's icon (served via `/serve-icon` handler)"
msgstr ""

#: ../../guides/upgrading.rst:202
msgid "Removed APIs"
msgstr ""

#: ../../guides/upgrading.rst:204
msgid "Just a warning that the private entity cache functions (e.g. ``_elgg_retrieve_cached_entity``) have been removed. Some plugins may have been using them. Plugins should not use private APIs as they will more often be removed without notice."
msgstr ""

#: ../../guides/upgrading.rst:207
msgid "Improved ``elgg/ckeditor`` module"
msgstr ""

#: ../../guides/upgrading.rst:209
msgid ":doc:`elgg/ckeditor module <javascript>` can now be used to add WYSIWYG to a textarea programmatically with ``elgg/ckeditor#bind``."
msgstr ""

#: ../../guides/upgrading.rst:212
msgid "From 2.0 to 2.1"
msgstr ""

#: ../../guides/upgrading.rst:217
msgid "``ElggFile::setFilestore``"
msgstr ""

#: ../../guides/upgrading.rst:218
msgid "``get_default_filestore``"
msgstr ""

#: ../../guides/upgrading.rst:219
msgid "``set_default_filestore``"
msgstr ""

#: ../../guides/upgrading.rst:220
msgid "``elgg_get_config('siteemail')``: Use ``elgg_get_site_entity()->email``"
msgstr ""

#: ../../guides/upgrading.rst:221
msgid "URLs starting with ``/css/`` and ``/js/``: ``Use elgg_get_simplecache_url()``"
msgstr ""

#: ../../guides/upgrading.rst:222
msgid "``elgg.ui.widgets`` JavaScript object is deprecated by ``elgg/widgets`` AMD module"
msgstr ""

#: ../../guides/upgrading.rst:225
msgid "``Application::getDb()`` changes"
msgstr ""

#: ../../guides/upgrading.rst:227
msgid "If you're using this low-level API, do not expect it to return an ``Elgg\\Database`` instance in 3.0. It now returns an ``Elgg\\Application\\Database`` with many deprecated. These methods were never meant to be made public API, but we will do our best to support them in 2.x."
msgstr ""

#: ../../guides/upgrading.rst:232
msgid "Added ``elgg/widgets`` module"
msgstr ""

#: ../../guides/upgrading.rst:234
msgid "If your plugin code calls ``elgg.ui.widgets.init()``, instead use the :doc:`elgg/widgets module <javascript>`."
msgstr ""

#: ../../guides/upgrading.rst:237
msgid "From 1.x to 2.0"
msgstr ""

#: ../../guides/upgrading.rst:240
msgid "Elgg can be now installed as a composer dependency instead of at document root"
msgstr ""

#: ../../guides/upgrading.rst:242
msgid "That means an Elgg site can look something like this:"
msgstr ""

#: ../../guides/upgrading.rst:259
msgid "``elgg_get_root_path`` and ``$CONFIG->path`` will return the path to the application root directory, which is not necessarily the same as Elgg core's root directory (which in this case is ``vendor/elgg/elgg/``)."
msgstr ""

#: ../../guides/upgrading.rst:263
msgid "Do not attempt to access the core Elgg from your plugin directly, since you cannot rely on its location on the filesystem."
msgstr ""

#: ../../guides/upgrading.rst:266
msgid "In particular, don't try load ``engine/start.php``."
msgstr ""

#: ../../guides/upgrading.rst:273
msgid "To boot Elgg manually, you can use the class ``Elgg\\Application``."
msgstr ""

#: ../../guides/upgrading.rst:281
msgid "However, use this approach sparingly. Prefer :doc:`routing` instead whenever possible as that keeps your public URLs and your filesystem layout decoupled."
msgstr ""

#: ../../guides/upgrading.rst:284
msgid "Also, don't try to access the ``_graphics`` files directly."
msgstr ""

#: ../../guides/upgrading.rst:290
msgid "Use :doc:`views` instead:"
msgstr ""

#: ../../guides/upgrading.rst:298
msgid "Cacheable views must have a file extension in their names"
msgstr ""

#: ../../guides/upgrading.rst:300
msgid "This requirement makes it possibile for us to serve assets directly from disk for performance, instead of serving them through PHP."
msgstr ""

#: ../../guides/upgrading.rst:303
msgid "It also makes it much easier to explore the available cached resources by navigating to dataroot/views_simplecache and browsing around."
msgstr ""

#: ../../guides/upgrading.rst:306
#: ../../guides/views.rst:87
msgid "Bad: ``my/cool/template``"
msgstr ""

#: ../../guides/upgrading.rst:307
#: ../../guides/views.rst:88
msgid "Good: ``my/cool/template.html``"
msgstr ""

#: ../../guides/upgrading.rst:309
msgid "We now cache assets by ``\"$viewtype/$view\"``, not ``md5(\"$viewtype|$view\")``, which can result in conflicts between cacheable views that don't have file extensions to disambiguate files from directories."
msgstr ""

#: ../../guides/upgrading.rst:315
msgid "Dropped ``jquery-migrate`` and upgraded ``jquery`` to ^2.1.4"
msgstr ""

#: ../../guides/upgrading.rst:317
msgid "jQuery 2.x is API-compatible with 1.x, but drops support for IE8-, which Elgg hasn't supported for some time anyways."
msgstr ""

#: ../../guides/upgrading.rst:320
msgid "See http://jquery.com/upgrade-guide/1.9/ for how to move off jquery-migrate."
msgstr ""

#: ../../guides/upgrading.rst:322
msgid "If you'd prefer to just add it back, you can use this code in your plugin's init:"
msgstr ""

#: ../../guides/upgrading.rst:330
msgid "Also, define a ``jquery-migrate.js`` view containing the contents of the script."
msgstr ""

#: ../../guides/upgrading.rst:333
msgid "JS and CSS views have been moved out of the js/ and css/ directories"
msgstr ""

#: ../../guides/upgrading.rst:335
msgid "They also have been given .js and .css extensions respectively if they didn't already have them:"
msgstr ""

#: ../../guides/upgrading.rst:339
msgid "Old view"
msgstr ""

#: ../../guides/upgrading.rst:339
msgid "New view"
msgstr ""

#: ../../guides/upgrading.rst:341
msgid "``js/view``"
msgstr ""

#: ../../guides/upgrading.rst:341
msgid "``view.js``"
msgstr ""

#: ../../guides/upgrading.rst:342
msgid "``js/other.js``"
msgstr ""

#: ../../guides/upgrading.rst:342
msgid "``other.js``"
msgstr ""

#: ../../guides/upgrading.rst:343
msgid "``css/view``"
msgstr ""

#: ../../guides/upgrading.rst:343
msgid "``view.css``"
msgstr ""

#: ../../guides/upgrading.rst:344
msgid "``css/other.css``"
msgstr ""

#: ../../guides/upgrading.rst:344
msgid "``other.css``"
msgstr ""

#: ../../guides/upgrading.rst:345
msgid "``js/img.png``"
msgstr ""

#: ../../guides/upgrading.rst:345
msgid "``img.png``"
msgstr ""

#: ../../guides/upgrading.rst:348
msgid "The main benefit this brings is being able to co-locate related assets. So a template (``view.php``) can have its CSS/JS dependencies right next to it (``view.css``, ``view.js``)."
msgstr ""

#: ../../guides/upgrading.rst:352
msgid "Care has been taken to make this change as backwards-compatible as possible, so you should not need to update any view references right away. However, you are certainly encouraged to move your JS and CSS views to their new, canonical locations."
msgstr ""

#: ../../guides/upgrading.rst:357
msgid "Practically speaking, this carries a few gotchas:"
msgstr ""

#: ../../guides/upgrading.rst:359
msgid "The ``view_vars, $view_name`` and ``view, $view_name`` hooks will operate on the *canonical* view name:"
msgstr ""

#: ../../guides/upgrading.rst:368
msgid "Using the ``view, all`` hook and checking for individual views may not work as intended:"
msgstr ""

#: ../../guides/upgrading.rst:384
msgid "Please let us know about any other BC issues this change causes. We'd like to fix as many as possible to make the transition smooth."
msgstr ""

#: ../../guides/upgrading.rst:388
msgid "``fxp/composer-asset-plugin`` is now required to install Elgg from source"
msgstr ""

#: ../../guides/upgrading.rst:390
msgid "We use ``fxp/composer-asset-plugin`` to manage our browser assets (js, css, html) with Composer, but it must be installed globally *before installing Elgg* in order for the ``bower-asset/*`` packages to be recognized. To install it, run:"
msgstr ""

#: ../../guides/upgrading.rst:398
msgid "If you don't do this before running ``composer install`` or ``composer create-project``, you will get an error message:"
msgstr ""

#: ../../guides/upgrading.rst:408
msgid "List of deprecated views and view arguments that have been removed"
msgstr ""

#: ../../guides/upgrading.rst:410
msgid "We dropped support for and/or removed the following views:"
msgstr ""

#: ../../guides/upgrading.rst:412
msgid "canvas/layouts/*"
msgstr ""

#: ../../guides/upgrading.rst:413
msgid "categories"
msgstr ""

#: ../../guides/upgrading.rst:414
msgid "categories/view"
msgstr ""

#: ../../guides/upgrading.rst:415
msgid "core/settings/tools"
msgstr ""

#: ../../guides/upgrading.rst:416
msgid "embed/addcontentjs"
msgstr ""

#: ../../guides/upgrading.rst:417
msgid "footer/analytics (Use page/elements/foot instead)"
msgstr ""

#: ../../guides/upgrading.rst:418
msgid "groups/left_column"
msgstr ""

#: ../../guides/upgrading.rst:419
msgid "groups/right_column"
msgstr ""

#: ../../guides/upgrading.rst:420
msgid "groups/search/finishblurb"
msgstr ""

#: ../../guides/upgrading.rst:421
msgid "groups/search/startblurb"
msgstr ""

#: ../../guides/upgrading.rst:422
msgid "input/calendar (Use input/date instead)"
msgstr ""

#: ../../guides/upgrading.rst:423
msgid "input/datepicker (Use input/date instead)"
msgstr ""

#: ../../guides/upgrading.rst:424
msgid "input/pulldown (Use input/select instead)"
msgstr ""

#: ../../guides/upgrading.rst:425
msgid "invitefriends/formitems"
msgstr ""

#: ../../guides/upgrading.rst:426
msgid "js/admin (Use AMD and ``elgg_require_js`` instead of extending JS views)"
msgstr ""

#: ../../guides/upgrading.rst:427
msgid "js/initialise_elgg (Use AMD and ``elgg_require_js`` instead of extending JS views)"
msgstr ""

#: ../../guides/upgrading.rst:428
msgid "members/nav"
msgstr ""

#: ../../guides/upgrading.rst:429
msgid "metatags (Use the 'head', 'page' plugin hook instead)"
msgstr ""

#: ../../guides/upgrading.rst:430
msgid "navigation/topbar_tools"
msgstr ""

#: ../../guides/upgrading.rst:431
msgid "navigation/viewtype"
msgstr ""

#: ../../guides/upgrading.rst:432
msgid "notifications/subscriptions/groupsform"
msgstr ""

#: ../../guides/upgrading.rst:433
msgid "object/groupforumtopic"
msgstr ""

#: ../../guides/upgrading.rst:434
msgid "output/calendar (Use output/date instead)"
msgstr ""

#: ../../guides/upgrading.rst:435
msgid "output/confirmlink (Use output/url instead)"
msgstr ""

#: ../../guides/upgrading.rst:436
msgid "page_elements/contentwrapper"
msgstr ""

#: ../../guides/upgrading.rst:437
msgid "page/elements/shortcut_icon (Use the 'head', 'page' plugin hook instead)"
msgstr ""

#: ../../guides/upgrading.rst:438
msgid "page/elements/wrapper"
msgstr ""

#: ../../guides/upgrading.rst:439
msgid "profile/icon (Use ``elgg_get_entity_icon``)"
msgstr ""

#: ../../guides/upgrading.rst:440
msgid "river/object/groupforumtopic/create"
msgstr ""

#: ../../guides/upgrading.rst:441
msgid "settings/{plugin}/edit (Use plugins/{plugin}/settings instead)"
msgstr ""

#: ../../guides/upgrading.rst:442
msgid "user/search/finishblurb"
msgstr ""

#: ../../guides/upgrading.rst:443
msgid "user/search/startblurb"
msgstr ""

#: ../../guides/upgrading.rst:444
msgid "usersettings/{plugin}/edit (Use plugins/{plugin}/usersettings instead)"
msgstr ""

#: ../../guides/upgrading.rst:445
msgid "widgets/{handler}/view (Use widgets/{handler}/content instead)"
msgstr ""

#: ../../guides/upgrading.rst:447
msgid "We also dropped the following arguments to views:"
msgstr ""

#: ../../guides/upgrading.rst:449
msgid "\"value\" in output/iframe (Use \"src\" instead)"
msgstr ""

#: ../../guides/upgrading.rst:450
msgid "\"area2\" and \"area3\" in page/elements/sidebar (Use \"sidebar\" or view extension instead)"
msgstr ""

#: ../../guides/upgrading.rst:451
msgid "\"js\" in icon views (e.g. icon/user/default)"
msgstr ""

#: ../../guides/upgrading.rst:452
msgid "\"options\" to input/radio and input/checkboxes which aren't key-value pairs will no longer be acceptable."
msgstr ""

#: ../../guides/upgrading.rst:457
msgid "All scripts moved to bottom of page"
msgstr ""

#: ../../guides/upgrading.rst:459
msgid "You should test your plugin **with the JavaScript error console visible**. For performance reasons, Elgg no longer supports ``script`` elements in the ``head`` element or in HTML views. ``elgg_register_js`` will now load *all* scripts at the end of the ``body`` element."
msgstr ""

#: ../../guides/upgrading.rst:463
msgid "You must convert inline scripts to :doc:`AMD </guides/javascript>` or to external scripts loaded with ``elgg_load_js``."
msgstr ""

#: ../../guides/upgrading.rst:466
msgid "Early in the page, Elgg provides a shim of the RequireJS ``require()`` function that simply queues code until the AMD ``elgg`` and ``jQuery`` modules are defined. This provides a straightforward way to convert many inline scripts to use ``require()``."
msgstr ""

#: ../../guides/upgrading.rst:470
msgid "Inline code which will fail because the stack is not yet loaded:"
msgstr ""

#: ../../guides/upgrading.rst:480
msgid "This should work in Elgg 2.0:"
msgstr ""

#: ../../guides/upgrading.rst:493
msgid "Attribute formatter removes keys with underscores"
msgstr ""

#: ../../guides/upgrading.rst:495
msgid "``elgg_format_attributes()`` (and all APIs that use it) now filter out attributes whose name contains an underscore. If the attribute begins with ``data-``, however, it will not be removed."
msgstr ""

#: ../../guides/upgrading.rst:499
msgid "Breadcrumbs"
msgstr ""

#: ../../guides/upgrading.rst:501
msgid "Breadcrumb display now removes the last item if it does not contain a link. To restore the previous behavior, replace the plugin hook handler ``elgg_prepare_breadcrumbs`` with your own:"
msgstr ""

#: ../../guides/upgrading.rst:518
msgid "Callbacks in Queries"
msgstr ""

#: ../../guides/upgrading.rst:520
msgid "Make sure to use only valid *callable* values for \"callback\" argument/options in the API."
msgstr ""

#: ../../guides/upgrading.rst:522
msgid "Querying functions will now will throw a ``RuntimeException`` if ``is_callable()`` returns ``false`` for the given callback value. This includes functions such as ``elgg_get_entities()``, ``get_data()``, and many more."
msgstr ""

#: ../../guides/upgrading.rst:526
msgid "Comments plugin hook"
msgstr ""

#: ../../guides/upgrading.rst:528
msgid "Plugins can now return an empty string from ``'comments',$entity_type`` hook in order to override the default comments component view. To force the default comments component, your plugin must return ``false``. If you were using empty strings to force the default comments view, you need to update your hook handlers to return ``false``."
msgstr ""

#: ../../guides/upgrading.rst:531
msgid "Container permissions hook"
msgstr ""

#: ../../guides/upgrading.rst:533
msgid "The behavior of the ``container_permissions_check`` hook has changed when an entity is being created: Before 2.0, the hook would be called twice if the entity's container was not the owner. On the first call, the entity's owner would be passed in as ``$params['container']``, which could confuse handlers."
msgstr ""

#: ../../guides/upgrading.rst:535
msgid "In 2.0, when an entity is created in a container like a group, if the owner is the same as the logged in user (almost always the case), this first check is bypassed. So the ``container_permissions_check`` hook will almost always be called once with ``$params['container']`` being the correct container of the entity."
msgstr ""

#: ../../guides/upgrading.rst:538
msgid "Creating or deleting a relationship triggers only one event"
msgstr ""

#: ../../guides/upgrading.rst:540
msgid "The \"create\" and \"delete\" relationship events are now only fired once, with ``\"relationship\"`` as the object type."
msgstr ""

#: ../../guides/upgrading.rst:542
msgid "E.g. Listening for the ``\"create\", \"member\"`` or ``\"delete\", \"member\"`` event(s) will no longer capture group membership additions/removals. Use the ``\"create\", \"relationship\"`` or ``\"delete\", \"relationship\"`` events."
msgstr ""

#: ../../guides/upgrading.rst:545
msgid "Discussion feature has been pulled from groups into its own plugin"
msgstr ""

#: ../../guides/upgrading.rst:547
msgid "The ``object, groupforumtopic`` subtype has been replaced with the ``object, discussion`` subtype. If your plugin is using or altering the old discussion feature, you should upgrade it to use the new subtype."
msgstr ""

#: ../../guides/upgrading.rst:552
msgid "Nothing changes from the group owners' point of view. The discussion feature is still available as a group tool and all old discussions are intact."
msgstr ""

#: ../../guides/upgrading.rst:557
msgid "Dropped login-over-https feature"
msgstr ""

#: ../../guides/upgrading.rst:559
msgid "For the best security and performance, serve all pages over HTTPS by switching the scheme in your site's wwwroot to ``https`` at http://yoursite.tld/admin/settings/advanced"
msgstr ""

#: ../../guides/upgrading.rst:565
msgid "Elgg has migrated from ext/mysql to PDO MySQL"
msgstr ""

#: ../../guides/upgrading.rst:567
msgid "Elgg now uses a ``PDO_MYSQL`` connection and no longer uses any ext/mysql functions. If you use ``mysql_*`` functions, implicitly relying on an open connection, these will fail."
msgstr ""

#: ../../guides/upgrading.rst:570
msgid "If your code uses one of the following functions, read below."
msgstr ""

#: ../../guides/upgrading.rst:572
msgid "``execute_delayed_write_query()``"
msgstr ""

#: ../../guides/upgrading.rst:573
msgid "``execute_delayed_read_query()``"
msgstr ""

#: ../../guides/upgrading.rst:575
msgid "If you provide a callable ``$handler`` to be called with the results, your handler will now receive a ``\\Doctrine\\DBAL\\Driver\\Statement`` object. Formerly this was an ext/mysql ``result`` resource."
msgstr ""

#: ../../guides/upgrading.rst:580
msgid "Event/Hook calling order may change"
msgstr ""

#: ../../guides/upgrading.rst:582
msgid "When registering for events/hooks, the ``all`` keyword for wildcard matching no longer has any effect on the order that handlers are called. To ensure your handler is called last, you must give it the highest priority of all matching handlers, or to ensure your handler is called first, you must give it the lowest priority of all matching handlers."
msgstr ""

#: ../../guides/upgrading.rst:587
msgid "If handlers were registered with the same priority, these are called in the order they were registered."
msgstr ""

#: ../../guides/upgrading.rst:589
msgid "To emulate prior behavior, Elgg core handlers registered with the ``all`` keyword have been raised in priority. Some of these handlers will most likely be called in a different order."
msgstr ""

#: ../../guides/upgrading.rst:593
msgid "``export/`` URLs are no longer available"
msgstr ""

#: ../../guides/upgrading.rst:595
msgid "Elgg no longer provides this endpoint for exposing resource data."
msgstr ""

#: ../../guides/upgrading.rst:598
msgid "Icons migrated to Font Awesome"
msgstr ""

#: ../../guides/upgrading.rst:600
msgid "Elgg's sprites and most of the CSS classes beginning with ``elgg-icon-`` `have been removed <https://github.com/Elgg/Elgg/pull/8578/files#diff-b3912b37ca7bd6c53a2968ccb6c22a94L22>`_."
msgstr ""

#: ../../guides/upgrading.rst:603
msgid "Usage of ``elgg_view_icon()`` is backward compatible, but static HTML using the ``elgg-icon`` classes will have to be updated to the new markup."
msgstr ""

#: ../../guides/upgrading.rst:607
msgid "Increase of z-index value in elgg-menu-site class"
msgstr ""

#: ../../guides/upgrading.rst:609
msgid "The value of z-index in the elgg-menu-site class has been increased from 1 to 50 to allow for page elements in the content area to use the z-index property without the \"More\" site menu's dropdown being displayed behind these elements. If your plugin/theme overrides the elgg-menu-site class or views/default/elements/navigation.css please adjust the z-index value in your modified CSS file accordingly."
msgstr ""

#: ../../guides/upgrading.rst:615
msgid "input/autocomplete view"
msgstr ""

#: ../../guides/upgrading.rst:617
msgid "Plugins that override the ``input/autocomplete`` view will need to include the source URL in the ``data-source`` attribute of the input element, require the new ``elgg/autocomplete`` AMD module, and call its ``init`` method. The 1.x javascript library ``elgg.autocomplete`` is no longer used."
msgstr ""

#: ../../guides/upgrading.rst:620
msgid "Introduced third-party library for sending email"
msgstr ""

#: ../../guides/upgrading.rst:622
msgid "We are using the excellent ``Zend\\Mail`` library to send emails in Elgg 2.0. There are likely edge cases that the library handles differently than Elgg 1.x. Take care to test your email notifications carefully when upgrading to 2.0."
msgstr ""

#: ../../guides/upgrading.rst:627
msgid "Label elements"
msgstr ""

#: ../../guides/upgrading.rst:629
msgid "The following views received ``label`` elements around some of the input fields. If your plugin/theme overrides these views please check for the new content."
msgstr ""

#: ../../guides/upgrading.rst:631
msgid "views/default/core/river/filter.php"
msgstr ""

#: ../../guides/upgrading.rst:632
msgid "views/default/forms/admin/plugins/filter.php"
msgstr ""

#: ../../guides/upgrading.rst:633
msgid "views/default/forms/admin/plugins/sort.php"
msgstr ""

#: ../../guides/upgrading.rst:634
msgid "views/default/forms/login.php"
msgstr ""

#: ../../guides/upgrading.rst:637
msgid "Plugin Aalborg Theme"
msgstr ""

#: ../../guides/upgrading.rst:639
msgid "The view ``page/elements/navbar`` now uses a Font Awesome icon for the mobile menu selector instead of an image. The ``bars.png`` image and supporting CSS for the 1.12 rendering has been removed, so update your theme accordingly."
msgstr ""

#: ../../guides/upgrading.rst:642
msgid "Plugin Likes"
msgstr ""

#: ../../guides/upgrading.rst:644
msgid "Objects are no longer likable by default. To support liking, you can register a handler to permit the annotation, or more simply register for the hook ``[\"likes:is_likable\", \"<type>:<subtype>\"]`` and return true. E.g."
msgstr ""

#: ../../guides/upgrading.rst:651
msgid "Just as before, the ``permissions_check:annotate`` hook is still called and may be used to override default behavior."
msgstr ""

#: ../../guides/upgrading.rst:654
msgid "Plugin Messages"
msgstr ""

#: ../../guides/upgrading.rst:656
msgid "If you've removed or replaced the handler function ``messages_notifier`` to hide/alter the inbox icon, you'll instead need to do the same for the topbar menu handler ``messages_register_topbar``. ``messages_notifier`` is no longer used to add the menu link."
msgstr ""

#: ../../guides/upgrading.rst:659
msgid "Messages will no longer get the metadata 'msg' for newly created messages. This means you can not rely on that metadata to exist."
msgstr ""

#: ../../guides/upgrading.rst:662
msgid "Plugin Blog"
msgstr ""

#: ../../guides/upgrading.rst:664
msgid "The blog pages showing 'Mine' or 'Friends' listings of blogs have been changed to list all the blogs owned by the users (including those created in groups)."
msgstr ""

#: ../../guides/upgrading.rst:667
msgid "Plugin Bookmarks"
msgstr ""

#: ../../guides/upgrading.rst:669
msgid "The bookmark pages showing 'Mine' or 'Friends' listings of bookmarks have been changed to list all the bookmarks owned by the users (including those created in groups)."
msgstr ""

#: ../../guides/upgrading.rst:672
msgid "Plugin File"
msgstr ""

#: ../../guides/upgrading.rst:674
msgid "The file pages showing 'Mine' or 'Friends' listings of files have been changed to list all the files owned by the users (including those created in groups)."
msgstr ""

#: ../../guides/upgrading.rst:677
msgid "Removed Classes"
msgstr ""

#: ../../guides/upgrading.rst:679
msgid "``ElggInspector``"
msgstr ""

#: ../../guides/upgrading.rst:680
msgid "``Notable``"
msgstr ""

#: ../../guides/upgrading.rst:681
msgid "``FilePluginFile``: replace with ``ElggFile`` (or load with ``get_entity()``)"
msgstr ""

#: ../../guides/upgrading.rst:684
msgid "Removed keys available via ``elgg_get_config()``"
msgstr ""

#: ../../guides/upgrading.rst:686
msgid "``allowed_ajax_views``"
msgstr ""

#: ../../guides/upgrading.rst:687
msgid "``dataroot_in_settings``"
msgstr ""

#: ../../guides/upgrading.rst:688
msgid "``externals``"
msgstr ""

#: ../../guides/upgrading.rst:689
msgid "``externals_map``"
msgstr ""

#: ../../guides/upgrading.rst:690
msgid "``i18n_loaded_from_cache``"
msgstr ""

#: ../../guides/upgrading.rst:691
msgid "``language_paths``"
msgstr ""

#: ../../guides/upgrading.rst:692
msgid "``pagesetupdone``"
msgstr ""

#: ../../guides/upgrading.rst:693
msgid "``registered_tag_metadata_names``"
msgstr ""

#: ../../guides/upgrading.rst:694
msgid "``simplecache_enabled_in_settings``"
msgstr ""

#: ../../guides/upgrading.rst:695
msgid "``translations``"
msgstr ""

#: ../../guides/upgrading.rst:696
msgid "``viewpath``"
msgstr ""

#: ../../guides/upgrading.rst:697
msgid "``views``"
msgstr ""

#: ../../guides/upgrading.rst:698
msgid "``view_path``"
msgstr ""

#: ../../guides/upgrading.rst:699
msgid "``viewtype``"
msgstr ""

#: ../../guides/upgrading.rst:700
msgid "``wordblacklist``"
msgstr ""

#: ../../guides/upgrading.rst:702
msgid "Also note that plugins should not be accessing the global ``$CONFIG`` variable except for in ``settings.php``."
msgstr ""

#: ../../guides/upgrading.rst:705
msgid "Removed Functions"
msgstr ""

#: ../../guides/upgrading.rst:707
msgid "``blog_get_page_content_friends``"
msgstr ""

#: ../../guides/upgrading.rst:708
msgid "``blog_get_page_content_read``"
msgstr ""

#: ../../guides/upgrading.rst:709
msgid "``count_unread_messages()``"
msgstr ""

#: ../../guides/upgrading.rst:710
msgid "``delete_entities()``"
msgstr ""

#: ../../guides/upgrading.rst:711
msgid "``delete_object_entity()``"
msgstr ""

#: ../../guides/upgrading.rst:712
msgid "``delete_user_entity()``"
msgstr ""

#: ../../guides/upgrading.rst:713
msgid "``elgg_get_view_location()``"
msgstr ""

#: ../../guides/upgrading.rst:714
msgid "``elgg_validate_action_url()``"
msgstr ""

#: ../../guides/upgrading.rst:715
msgid "``execute_delayed_query()``"
msgstr ""

#: ../../guides/upgrading.rst:716
msgid "``extend_view()``"
msgstr ""

#: ../../guides/upgrading.rst:717
msgid "``get_db_error()``"
msgstr ""

#: ../../guides/upgrading.rst:718
msgid "``get_db_link()``"
msgstr ""

#: ../../guides/upgrading.rst:719
msgid "``get_entities()``"
msgstr ""

#: ../../guides/upgrading.rst:720
msgid "``get_entities_from_access_id()``"
msgstr ""

#: ../../guides/upgrading.rst:721
msgid "``get_entities_from_access_collection()``"
msgstr ""

#: ../../guides/upgrading.rst:722
msgid "``get_entities_from_annotations()``"
msgstr ""

#: ../../guides/upgrading.rst:723
msgid "``get_entities_from_metadata()``"
msgstr ""

#: ../../guides/upgrading.rst:724
msgid "``get_entities_from_metadata_multi()``"
msgstr ""

#: ../../guides/upgrading.rst:725
msgid "``get_entities_from_relationship()``"
msgstr ""

#: ../../guides/upgrading.rst:726
msgid "``get_filetype_cloud()``"
msgstr ""

#: ../../guides/upgrading.rst:727
msgid "``get_library_files()``"
msgstr ""

#: ../../guides/upgrading.rst:728
msgid "``get_views()``"
msgstr ""

#: ../../guides/upgrading.rst:729
msgid "``is_ip_in_array()``"
msgstr ""

#: ../../guides/upgrading.rst:730
msgid "``list_entities()``"
msgstr ""

#: ../../guides/upgrading.rst:731
msgid "``list_entities_from_annotations()``"
msgstr ""

#: ../../guides/upgrading.rst:732
msgid "``list_group_search()``"
msgstr ""

#: ../../guides/upgrading.rst:733
msgid "``list_registered_entities()``"
msgstr ""

#: ../../guides/upgrading.rst:734
msgid "``list_user_search()``"
msgstr ""

#: ../../guides/upgrading.rst:735
msgid "``load_plugins()``"
msgstr ""

#: ../../guides/upgrading.rst:736
msgid "``menu_item()``"
msgstr ""

#: ../../guides/upgrading.rst:737
msgid "``make_register_object()``"
msgstr ""

#: ../../guides/upgrading.rst:738
msgid "``mysql_*()``: Elgg :ref:`no longer uses ext/mysql<migrated-to-pdo>`"
msgstr ""

#: ../../guides/upgrading.rst:739
msgid "``remove_blacklist()``"
msgstr ""

#: ../../guides/upgrading.rst:740
msgid "``search_for_group()``"
msgstr ""

#: ../../guides/upgrading.rst:741
msgid "``search_for_object()``"
msgstr ""

#: ../../guides/upgrading.rst:742
msgid "``search_for_site()``"
msgstr ""

#: ../../guides/upgrading.rst:743
msgid "``search_for_user()``"
msgstr ""

#: ../../guides/upgrading.rst:744
msgid "``search_list_objects_by_name()``"
msgstr ""

#: ../../guides/upgrading.rst:745
msgid "``search_list_groups_by_name()``"
msgstr ""

#: ../../guides/upgrading.rst:746
msgid "``search_list_users_by_name()``"
msgstr ""

#: ../../guides/upgrading.rst:747
msgid "``set_template_handler()``"
msgstr ""

#: ../../guides/upgrading.rst:748
msgid "``test_ip()``"
msgstr ""

#: ../../guides/upgrading.rst:751
msgid "Removed methods"
msgstr ""

#: ../../guides/upgrading.rst:753
msgid "``ElggCache::set_variable()``"
msgstr ""

#: ../../guides/upgrading.rst:754
msgid "``ElggCache::get_variable()``"
msgstr ""

#: ../../guides/upgrading.rst:755
msgid "``ElggData::initialise_attributes()``"
msgstr ""

#: ../../guides/upgrading.rst:756
msgid "``ElggData::getObjectOwnerGUID()``"
msgstr ""

#: ../../guides/upgrading.rst:757
msgid "``ElggDiskFilestore::make_directory_root()``"
msgstr ""

#: ../../guides/upgrading.rst:758
msgid "``ElggDiskFilestore::make_file_matrix()``"
msgstr ""

#: ../../guides/upgrading.rst:759
msgid "``ElggDiskFilestore::user_file_matrix()``"
msgstr ""

#: ../../guides/upgrading.rst:760
msgid "``ElggDiskFilestore::mb_str_split()``"
msgstr ""

#: ../../guides/upgrading.rst:761
msgid "``ElggEntity::clearMetadata()``"
msgstr ""

#: ../../guides/upgrading.rst:762
msgid "``ElggEntity::clearRelationships()``"
msgstr ""

#: ../../guides/upgrading.rst:763
msgid "``ElggEntity::clearAnnotations()``"
msgstr ""

#: ../../guides/upgrading.rst:764
msgid "``ElggEntity::getOwner()``"
msgstr ""

#: ../../guides/upgrading.rst:765
msgid "``ElggEntity::setContainer()``"
msgstr ""

#: ../../guides/upgrading.rst:766
msgid "``ElggEntity::getContainer()``"
msgstr ""

#: ../../guides/upgrading.rst:767
msgid "``ElggEntity::getIcon()``"
msgstr ""

#: ../../guides/upgrading.rst:768
msgid "``ElggEntity::setIcon()``"
msgstr ""

#: ../../guides/upgrading.rst:769
msgid "``ElggExtender::getOwner()``"
msgstr ""

#: ../../guides/upgrading.rst:770
msgid "``ElggFileCache::create_file()``"
msgstr ""

#: ../../guides/upgrading.rst:771
msgid "``ElggObject::addToSite()``: parent function in ElggEntity still available"
msgstr ""

#: ../../guides/upgrading.rst:772
msgid "``ElggObject::getSites()``: parent function in ElggEntity still available"
msgstr ""

#: ../../guides/upgrading.rst:773
msgid "``ElggSite::getCollections()``"
msgstr ""

#: ../../guides/upgrading.rst:774
msgid "``ElggUser::addToSite()``: parent function in ElggEntity still available"
msgstr ""

#: ../../guides/upgrading.rst:775
msgid "``ElggUser::getCollections()``"
msgstr ""

#: ../../guides/upgrading.rst:776
msgid "``ElggUser::getOwner()``"
msgstr ""

#: ../../guides/upgrading.rst:777
msgid "``ElggUser::getSites()``: parent function in ElggEntity still available"
msgstr ""

#: ../../guides/upgrading.rst:778
msgid "``ElggUser::listFriends()``"
msgstr ""

#: ../../guides/upgrading.rst:779
msgid "``ElggUser::listGroups()``"
msgstr ""

#: ../../guides/upgrading.rst:780
msgid "``ElggUser::removeFromSite()``: parent function in ElggEntity still available"
msgstr ""

#: ../../guides/upgrading.rst:782
msgid "The following arguments have also been dropped:"
msgstr ""

#: ../../guides/upgrading.rst:784
msgid "``ElggSite::getMembers()`` - 2: ``$offset``"
msgstr ""

#: ../../guides/upgrading.rst:786
msgid "``elgg_view_entity_list()`` - 3: ``$offset`` - 4: ``$limit`` - 5: ``$full_view`` - 6: ``$list_type_toggle`` - 7: ``$pagination``"
msgstr ""

#: ../../guides/upgrading.rst:794
msgid "Removed Plugin Hooks"
msgstr ""

#: ../../guides/upgrading.rst:796
msgid "``[display, view]``: See the :ref:`new plugin hook<guides/views#altering-view-output>`."
msgstr ""

#: ../../guides/upgrading.rst:799
msgid "Removed Actions"
msgstr ""

#: ../../guides/upgrading.rst:801
msgid "``widgets/upgrade``"
msgstr ""

#: ../../guides/upgrading.rst:804
msgid "Removed Views"
msgstr ""

#: ../../guides/upgrading.rst:806
msgid "``forms/admin/plugins/change_state``"
msgstr ""

#: ../../guides/upgrading.rst:809
msgid "Removed View Variables"
msgstr ""

#: ../../guides/upgrading.rst:811
msgid "During rendering, the view system no longer injects these into the scope:"
msgstr ""

#: ../../guides/upgrading.rst:813
msgid "``$vars['url']``: replace with ``elgg_get_site_url()``"
msgstr ""

#: ../../guides/upgrading.rst:814
msgid "``$vars['user']``: replace with ``elgg_get_logged_in_user_entity()``"
msgstr ""

#: ../../guides/upgrading.rst:815
msgid "``$vars['config']``: use ``elgg_get_config()`` and ``elgg_set_config()``"
msgstr ""

#: ../../guides/upgrading.rst:816
msgid "``$CONFIG``: use ``elgg_get_config()`` and ``elgg_set_config()``"
msgstr ""

#: ../../guides/upgrading.rst:818
msgid "Also several workarounds for very old views are no longer performed. Make these changes:"
msgstr ""

#: ../../guides/upgrading.rst:820
msgid "Set ``$vars['full_view']`` instead of ``$vars['full']``."
msgstr ""

#: ../../guides/upgrading.rst:821
msgid "Set ``$vars['name']`` instead of ``$vars['internalname']``."
msgstr ""

#: ../../guides/upgrading.rst:822
msgid "Set ``$vars['id']`` instead of ``$vars['internalid']``."
msgstr ""

#: ../../guides/upgrading.rst:825
msgid "Removed libraries"
msgstr ""

#: ../../guides/upgrading.rst:827
msgid "``elgg:markdown``: Elgg no longer provides a markdown implementation. You must provide your own."
msgstr ""

#: ../../guides/upgrading.rst:830
msgid "Specifying View via Properties"
msgstr ""

#: ../../guides/upgrading.rst:832
msgid "The metadata ``$entity->view`` no longer specifies the view used to render in ``elgg_view_entity()``."
msgstr ""

#: ../../guides/upgrading.rst:834
msgid "Similarly the property ``$annotation->view`` no longer has an effect within ``elgg_view_annotation()``."
msgstr ""

#: ../../guides/upgrading.rst:837
msgid "Viewtype is static after the initial ``elgg_get_viewtype()`` call"
msgstr ""

#: ../../guides/upgrading.rst:839
msgid "``elgg_set_viewtype()`` must be used to set the viewtype at runtime. Although Elgg still checks the ``view`` input and ``$CONFIG->view`` initially, this is only done once per request."
msgstr ""

#: ../../guides/upgrading.rst:844
msgid "Deprecations"
msgstr ""

#: ../../guides/upgrading.rst:846
msgid "It's deprecated to read or write to metadata keys starting with ``filestore::`` on ``ElggFile`` objects. In Elgg 3.0 this metadata will be deleted if it points to the current data root path, so few file objects will have it. Plugins should only use ``ElggFile::setFilestore`` if files need to be stored in a custom location."
msgstr ""

#: ../../guides/upgrading.rst:848
msgid "This is not the only deprecation in Elgg 2.0. Plugin developers should watch their site error logs."
msgstr ""

#: ../../guides/upgrading.rst:851
msgid "From 1.10 to 1.11"
msgstr ""

#: ../../guides/upgrading.rst:854
msgid "Comment highlighting"
msgstr ""

#: ../../guides/upgrading.rst:856
msgid "If your theme is using the file ``views/default/css/elements/components.php``, you must add the following style definitions in it to enable highlighting for comments and discussion replies:"
msgstr ""

#: ../../guides/upgrading.rst:874
msgid "From 1.9 to 1.10"
msgstr ""

#: ../../guides/upgrading.rst:877
msgid "File uploads"
msgstr ""

#: ../../guides/upgrading.rst:879
msgid "If your plugin is using a snippet copied from the ``file/upload`` action to fix detected mime types for Microsoft zipped formats, it can now be safely removed."
msgstr ""

#: ../../guides/upgrading.rst:881
msgid "If your upload action performs other manipulations on detected mime and simple types, it is recommended to make use of available plugin hooks:"
msgstr ""

#: ../../guides/upgrading.rst:883
msgid "``'mime_type','file'`` for filtering detected mime types"
msgstr ""

#: ../../guides/upgrading.rst:884
msgid "``'simple_type','file'`` for filtering parsed simple types"
msgstr ""

#: ../../guides/upgrading.rst:887
msgid "From 1.8 to 1.9"
msgstr ""

#: ../../guides/upgrading.rst:889
msgid "In the examples we are upgrading an imaginary \"Photos\" plugin."
msgstr ""

#: ../../guides/upgrading.rst:891
msgid "Only the key changes are included. For example some of the deprecated functions are not mentioned here separately."
msgstr ""

#: ../../guides/upgrading.rst:893
msgid "Each section will include information whether the change is backwards compatible with Elgg 1.8."
msgstr ""

#: ../../guides/upgrading.rst:896
msgid "The manifest file"
msgstr ""

#: ../../guides/upgrading.rst:898
msgid "No changes are needed if your plugin is compatible with 1.8."
msgstr ""

#: ../../guides/upgrading.rst:900
msgid "It's however recommended to add the ``<id>`` tag. It's value should be the name of the directory where the plugin is located inside the ``mod/`` directory."
msgstr ""

#: ../../guides/upgrading.rst:902
msgid "If you make changes that break BC, you must update the plugin version and the required Elgg release."
msgstr ""

#: ../../guides/upgrading.rst:904
msgid "Example of (shortened) old version:"
msgstr ""

#: ../../guides/upgrading.rst:920
msgid "Example of (shortened) new version:"
msgstr ""

#: ../../guides/upgrading.rst:938
msgid "$CONFIG and $vars['config']"
msgstr ""

#: ../../guides/upgrading.rst:940
msgid "Both the global ``$CONFIG`` variable and the ``$vars['config']`` parameter have been deprecated. They should be replaced with the ``elgg_get_config()`` function."
msgstr ""

#: ../../guides/upgrading.rst:942
msgid "Example of old code:"
msgstr ""

#: ../../guides/upgrading.rst:953
msgid "Example of new code:"
msgstr ""

#: ../../guides/upgrading.rst:961
#: ../../guides/upgrading.rst:1150
msgid "Compatible with 1.8"
msgstr ""

#: ../../guides/upgrading.rst:965
msgid "See how the community_plugins plugin was updated: https://github.com/Elgg/community_plugins/commit/f233999bbd1478a200ee783679c2e2897c9a0483"
msgstr ""

#: ../../guides/upgrading.rst:968
msgid "Language files"
msgstr ""

#: ../../guides/upgrading.rst:970
msgid "In Elgg 1.8 the language files needed to use the ``add_translation()`` function. In 1.9 it is enough to just return the array that was previously passed to the function as a parameter. Elgg core will use the file name (e.g. en.php) to tell which language the file contains."
msgstr ""

#: ../../guides/upgrading.rst:973
msgid "Example of the old way in ``languages/en.php``:"
msgstr ""

#: ../../guides/upgrading.rst:982
msgid "Example of new way:"
msgstr ""

#: ../../guides/upgrading.rst:992
#: ../../guides/upgrading.rst:1082
#: ../../guides/upgrading.rst:1178
#: ../../guides/upgrading.rst:1240
msgid "Not compatible with 1.8"
msgstr ""

#: ../../guides/upgrading.rst:997
msgid "One of the biggest changes in Elgg 1.9 is the notifications system. The new system allows more flexible and scalable way of sending notifications."
msgstr ""

#: ../../guides/upgrading.rst:999
#: ../../guides/upgrading.rst:1100
#: ../../guides/upgrading.rst:1185
msgid "Example of the old way:"
msgstr ""

#: ../../guides/upgrading.rst:1038
#: ../../guides/upgrading.rst:1120
#: ../../guides/upgrading.rst:1206
msgid "Example of the new way:"
msgstr ""

#: ../../guides/upgrading.rst:1086
msgid "See how the community_plugins plugin was updated to use the new system: https://github.com/Elgg/community_plugins/commit/bfa356cfe8fb99ebbca4109a1b8a1383b70ff123"
msgstr ""

#: ../../guides/upgrading.rst:1088
msgid "Notifications can also be sent with the ``notify_user()`` function."
msgstr ""

#: ../../guides/upgrading.rst:1090
msgid "It has however been updated to support three new optional parameters passed inside an array as the fifth parameter."
msgstr ""

#: ../../guides/upgrading.rst:1092
msgid "The parameters give notification plugins more control over the notifications, so they should be included whenever possible. For example the bundled site_notifications plugin won't work properly if the parameters are missing."
msgstr ""

#: ../../guides/upgrading.rst:1094
msgid "Parameters:"
msgstr ""

#: ../../guides/upgrading.rst:1096
msgid "**object** The object that we are notifying about (e.g. ElggEntity or ElggAnnotation). This is needed so that notification plugins can provide a link to the object."
msgstr ""

#: ../../guides/upgrading.rst:1097
msgid "**action** String that describes the action that triggered the notification (e.g. \"create\", \"update\", etc)."
msgstr ""

#: ../../guides/upgrading.rst:1098
msgid "**summary** String that contains a summary of the notification. (It should be more informative than the notification subject but less informative than the notification body.)"
msgstr ""

#: ../../guides/upgrading.rst:1153
msgid "Adding items to the Activity listing"
msgstr ""

#: ../../guides/upgrading.rst:1168
msgid "You can also add the optional ``target_guid`` parameter which tells the target of the create action."
msgstr ""

#: ../../guides/upgrading.rst:1170
msgid "If the photo would had been added for example into a photo album, we could add it by passing in also:"
msgstr ""

#: ../../guides/upgrading.rst:1181
msgid "Entity URL handlers"
msgstr ""

#: ../../guides/upgrading.rst:1183
msgid "The ``elgg_register_entity_url_handler()`` function has been deprecated. In 1.9 you should use the ``'entity:url', 'object'`` plugin hook instead."
msgstr ""

#: ../../guides/upgrading.rst:1243
#: ../../guides/web-services.rst:2
msgid "Web services"
msgstr ""

#: ../../guides/upgrading.rst:1245
msgid "In Elgg 1.8 the web services API was included in core and methods were exposed using ``expose_function()``. To enable the same functionality for Elgg 1.9, enable the \"Web services 1.9\" plugin and replace all calls to ``expose_function()`` with  ``elgg_ws_expose_function()``."
msgstr ""

#: ../../guides/upgrading.rst:1251
msgid "From 1.7 to 1.8"
msgstr ""

#: ../../guides/upgrading.rst:1252
msgid "Elgg 1.8 is the biggest leap forward in the development of Elgg since version 1.0. As such, there is more work to update core and plugins than with previous upgrades. There were a small number of API changes and following our standard practice, the methods we deprecated have been updated to work with the new API. The biggest changes are in the standardization of plugins and in the views system."
msgstr ""

#: ../../guides/upgrading.rst:1260
msgid "Updating core"
msgstr ""

#: ../../guides/upgrading.rst:1261
msgid "Delete the following core directories (same level as _graphics and engine):"
msgstr ""

#: ../../guides/upgrading.rst:1263
msgid "_css"
msgstr ""

#: ../../guides/upgrading.rst:1264
msgid "account"
msgstr ""

#: ../../guides/upgrading.rst:1265
msgid "admin"
msgstr ""

#: ../../guides/upgrading.rst:1266
msgid "dashboard"
msgstr ""

#: ../../guides/upgrading.rst:1267
msgid "entities"
msgstr ""

#: ../../guides/upgrading.rst:1268
msgid "friends"
msgstr ""

#: ../../guides/upgrading.rst:1269
msgid "search"
msgstr ""

#: ../../guides/upgrading.rst:1270
msgid "settings"
msgstr ""

#: ../../guides/upgrading.rst:1271
msgid "simplecache"
msgstr ""

#: ../../guides/upgrading.rst:1272
msgid "views"
msgstr ""

#: ../../guides/upgrading.rst:1276
msgid "If you do not delete these directories before an upgrade, you will have problems!"
msgstr ""

#: ../../guides/upgrading.rst:1280
msgid "Updating plugins"
msgstr ""

#: ../../guides/upgrading.rst:1284
msgid "All: /page_handler/all"
msgstr ""

#: ../../guides/upgrading.rst:1285
msgid "User’s content: /page_handler/owner/:username"
msgstr ""

#: ../../guides/upgrading.rst:1286
msgid "User’s friends' content: /page_handler/friends/:username"
msgstr ""

#: ../../guides/upgrading.rst:1287
msgid "Single entity: /page_handler/view/:guid/:title"
msgstr ""

#: ../../guides/upgrading.rst:1288
msgid "Added: /page_handler/add/:container_guid"
msgstr ""

#: ../../guides/upgrading.rst:1289
msgid "Editing: /page_handler/edit/:guid"
msgstr ""

#: ../../guides/upgrading.rst:1290
msgid "Group list: /page_handler/group/:guid/all"
msgstr ""

#: ../../guides/upgrading.rst:1294
msgid "Include page handler scripts from the page handler"
msgstr ""

#: ../../guides/upgrading.rst:1295
msgid "Almost every page handler should have a page handler script. (Example: ``bookmarks/all => mod/bookmarks/pages/bookmarks/all.php``)"
msgstr ""

#: ../../guides/upgrading.rst:1298
msgid "Call ``set_input()`` for entity guids in the page handler and use ``get_input()`` in the page handler scripts."
msgstr ""

#: ../../guides/upgrading.rst:1299
msgid "Call ``gatekeeper()`` and ``admin_gatekeeper()`` in the page handler function if required."
msgstr ""

#: ../../guides/upgrading.rst:1300
msgid "The group URL should use the ``pages/:handler/owner.php`` script."
msgstr ""

#: ../../guides/upgrading.rst:1302
msgid "Update the URLs throughout the plugin. (Don't forget to remove ``/pg/``!)"
msgstr ""

#: ../../guides/upgrading.rst:1307
msgid "Store page handler scripts in ``mod/:plugin/pages/:page_handler/:page_name.php``"
msgstr ""

#: ../../guides/upgrading.rst:1308
msgid "Use the content page layout in page handler scripts:"
msgstr ""

#: ../../guides/upgrading.rst:1314
msgid "Page handler scripts should not contain HTML."
msgstr ""

#: ../../guides/upgrading.rst:1316
msgid "No need to set page owner if the URLs are in the standardized format."
msgstr ""

#: ../../guides/upgrading.rst:1317
msgid "For group content, check the container_guid by using elgg_get_page_owner_entity()."
msgstr ""

#: ../../guides/upgrading.rst:1321
msgid "The ``object/:subtype`` view"
msgstr ""

#: ../../guides/upgrading.rst:1322
msgid "Make sure there are views for ``$vars['full_view'] == true`` and ``$vars['full_view'] == false``. ``$vars['full_view']`` replaced ``$vars['full]``."
msgstr ""

#: ../../guides/upgrading.rst:1323
msgid "Check for the object in ``$vars['entity']``. Use ``elgg_instance_of()`` to make sure it's the type of entity you want."
msgstr ""

#: ../../guides/upgrading.rst:1324
msgid "Return ``true`` to short circuit the view if the entity is missing or wrong."
msgstr ""

#: ../../guides/upgrading.rst:1325
msgid "Use ``elgg_view(‘object/elements/summary’, array(‘entity’ => $entity));`` and ``elgg_view_menu(‘entity’, array(‘entity’ => $entity));`` to help format. You should use very little markup in these views."
msgstr ""

#: ../../guides/upgrading.rst:1329
msgid "Update action structure"
msgstr ""

#: ../../guides/upgrading.rst:1333
msgid "Add: ``action/:plugin/save``"
msgstr ""

#: ../../guides/upgrading.rst:1334
msgid "Edit: ``action/:plugin/save``"
msgstr ""

#: ../../guides/upgrading.rst:1335
msgid "Delete: ``action/:plugin/delete``"
msgstr ""

#: ../../guides/upgrading.rst:1337
msgid "Make the delete action accept ``action/:handler/delete?guid=:guid`` so the metadata entity menu has the correct URL by default."
msgstr ""

#: ../../guides/upgrading.rst:1341
msgid "Update deprecated functions"
msgstr ""

#: ../../guides/upgrading.rst:1342
msgid "Functions deprecated in 1.7 will produce visible errors in 1.8."
msgstr ""

#: ../../guides/upgrading.rst:1343
msgid "You can also update functions deprecated in 1.8."
msgstr ""

#: ../../guides/upgrading.rst:1345
msgid "Many registration functions simply added an ``elgg_`` prefix for consistency, and should be easy to update."
msgstr ""

#: ../../guides/upgrading.rst:1346
msgid "See ``/engine/lib/deprecated-1.8.php`` for the full list."
msgstr ""

#: ../../guides/upgrading.rst:1347
msgid "You can set the debug level to “warning” to get visual reminders of deprecated functions."
msgstr ""

#: ../../guides/upgrading.rst:1351
msgid "Update the widget views"
msgstr ""

#: ../../guides/upgrading.rst:1352
msgid "See the blog or file widgets for examples."
msgstr ""

#: ../../guides/upgrading.rst:1356
msgid "Update the group profile module"
msgstr ""

#: ../../guides/upgrading.rst:1357
msgid "Use the blog or file plugins for examples. This will help with making your plugin themeable by the new CSS framework."
msgstr ""

#: ../../guides/upgrading.rst:1361
msgid "Update forms"
msgstr ""

#: ../../guides/upgrading.rst:1362
msgid "Move form bodies to the ``forms/:action`` view to use Evan's new ``elgg_view_form``."
msgstr ""

#: ../../guides/upgrading.rst:1363
msgid "Use input views in form bodies rather than html. This helps with theming and future-proofing."
msgstr ""

#: ../../guides/upgrading.rst:1364
msgid "Add a function that prepares the form (see ``mod/file/lib/file.php`` for an example)"
msgstr ""

#: ../../guides/upgrading.rst:1365
msgid "Make your forms sticky (see the file plugin's upload action and form prepare function)."
msgstr ""

#: ../../guides/upgrading.rst:1367
msgid "The forms API is discussed in more detail in :doc:`/guides/actions`."
msgstr ""

#: ../../guides/upgrading.rst:1372
msgid "We have added many CSS patterns to the base CSS file (modules, image block, spacing primitives). We encourage you to use these patterns and classes wherever possible. Doing so should:"
msgstr ""

#: ../../guides/upgrading.rst:1374
msgid "Reduce maintenance costs, since you can delete most custom CSS."
msgstr ""

#: ../../guides/upgrading.rst:1375
msgid "Make your plugin more compatible with community themes."
msgstr ""

#: ../../guides/upgrading.rst:1377
msgid "Look for patterns that can be moved into core if you need significant CSS."
msgstr ""

#: ../../guides/upgrading.rst:1379
msgid "We use hyphens rather than underscores in classes/ids and encourage you do the same for consistency."
msgstr ""

#: ../../guides/upgrading.rst:1381
msgid "If you do need your own CSS, you should use your own namespace, rather than ``elgg-``."
msgstr ""

#: ../../guides/upgrading.rst:1385
msgid "Update manifest.xml"
msgstr ""

#: ../../guides/upgrading.rst:1386
msgid "Use http://el.gg/manifest17to18 to automate this."
msgstr ""

#: ../../guides/upgrading.rst:1387
msgid "Don't use the \"bundled\" category with your plugins. That is only for plugins distributed with Elgg."
msgstr ""

#: ../../guides/upgrading.rst:1391
msgid "Update settings and user settings views"
msgstr ""

#: ../../guides/upgrading.rst:1392
msgid "The view for settings is now ``plugins/:plugin/settings`` (previously ``settings/:plugin/edit``)."
msgstr ""

#: ../../guides/upgrading.rst:1393
msgid "The view for user settings is now ``plugins/:plugin/usersettings`` (previously ``usersettings/:plugin/edit``)."
msgstr ""

#: ../../guides/views.rst:9
msgid "Introduction"
msgstr ""

#: ../../guides/views.rst:11
msgid "Views are responsible for creating output. They handle everything from:"
msgstr ""

#: ../../guides/views.rst:13
msgid "the layout of pages"
msgstr ""

#: ../../guides/views.rst:14
msgid "chunks of presentation output (like a footer or a toolbar)"
msgstr ""

#: ../../guides/views.rst:15
msgid "individual links and form inputs."
msgstr ""

#: ../../guides/views.rst:16
msgid "the images, js, and css needed by your web page"
msgstr ""

#: ../../guides/views.rst:19
msgid "Using views"
msgstr ""

#: ../../guides/views.rst:21
msgid "At their most basic level, the default views are just PHP files with snippets of html:"
msgstr ""

#: ../../guides/views.rst:27
msgid "Assuming this view is located at ``/views/default/hello.php``, we could output it like so:"
msgstr ""

#: ../../guides/views.rst:33
msgid "For your convenience, Elgg comes with quite a lot of views by default. In order to keep things manageable, they are organized into subdirectories. Elgg handles this situation quite nicely. For example, our simple view might live in ``/views/default/hello/world.php``, in which case it would be called like so:"
msgstr ""

#: ../../guides/views.rst:42
msgid "The name of the view simply reflects the location of the view in the views directory."
msgstr ""

#: ../../guides/views.rst:45
msgid "Views as templates"
msgstr ""

#: ../../guides/views.rst:47
msgid "You can pass arbitrary data to a view via the ``$vars`` array. Our ``hello/world`` view might be modified to accept a variable like so:"
msgstr ""

#: ../../guides/views.rst:54
msgid "In this case, we can pass an arbitrary name parameter to the view like so:"
msgstr ""

#: ../../guides/views.rst:60
msgid "which would produce the following output:"
msgstr ""

#: ../../guides/views.rst:68
msgid "Views don't do any kind of automatic output sanitization by default. You are responsible for doing the correct sanitization yourself to prevent XSS attacks and the like."
msgstr ""

#: ../../guides/views.rst:73
msgid "Views as cacheable assets"
msgstr ""

#: ../../guides/views.rst:75
msgid "As mentioned before, views can contain JS, CSS, or even images."
msgstr ""

#: ../../guides/views.rst:77
msgid "Asset views must meet certain requirements:"
msgstr ""

#: ../../guides/views.rst:79
msgid "They *must not* take any ``$vars`` parameters"
msgstr ""

#: ../../guides/views.rst:80
msgid "They *must not* change their output based on global state like"
msgstr ""

#: ../../guides/views.rst:82
msgid "who is logged in"
msgstr ""

#: ../../guides/views.rst:83
msgid "the time of day"
msgstr ""

#: ../../guides/views.rst:85
msgid "They *must* contain a valid file extension"
msgstr ""

#: ../../guides/views.rst:90
msgid "For example, suppose you wanted to load some CSS on a page. You could define a view ``mystyles.css``, which would look like so:"
msgstr ""

#: ../../guides/views.rst:102
msgid "Leave off the trailing \".php\" from the filename and Elgg will automatically recognize the view as cacheable."
msgstr ""

#: ../../guides/views.rst:105
msgid "To get a URL to this file, you would use ``elgg_get_simplecache_url``:"
msgstr ""

#: ../../guides/views.rst:112
msgid "Elgg automatically adds the magic numbers you see there for cache-busting and sets long-term expires headers on the returned file."
msgstr ""

#: ../../guides/views.rst:117
msgid "Elgg may decide to change the location or structure of the returned URL in a future release for whatever reason, and the cache-busting numbers change every time you flush Elgg's caches, so the exact URL is not stable by design."
msgstr ""

#: ../../guides/views.rst:121
msgid "With that in mind, here's a couple anti-patterns to avoid:"
msgstr ""

#: ../../guides/views.rst:123
msgid "Don't rely on the exact structure/location of this URL"
msgstr ""

#: ../../guides/views.rst:124
msgid "Don't try to generate the URLs yourself"
msgstr ""

#: ../../guides/views.rst:125
msgid "Don't store the returned URLs in a database"
msgstr ""

#: ../../guides/views.rst:127
msgid "In your plugin's init function, register the css file:"
msgstr ""

#: ../../guides/views.rst:133
msgid "Then on the page you want to load the css, call:"
msgstr ""

#: ../../guides/views.rst:143
msgid "Views and third-party assets"
msgstr ""

#: ../../guides/views.rst:145
msgid "The best way to serve third-party assets is through views. However, instead of manually copy/pasting the assets into the right location in ``/views/*``, you can map the assets into the views system via the ``\"views\"`` key in your plugin's ``elgg-plugin.php`` config file."
msgstr ""

#: ../../guides/views.rst:149
msgid "The views value must be a 2 dimensional array. The first level maps a viewtype to a list of view mappings. The secondary lists map view names to file paths, either absolute or relative to the Elgg root directory."
msgstr ""

#: ../../guides/views.rst:152
msgid "If you check your assets into source control, point to them like this:"
msgstr ""

#: ../../guides/views.rst:168
msgid "To point to assets installed with ``fxp/composer-asset-plugin``, use install-root-relative paths by leaving off the leading slash:"
msgstr ""

#: ../../guides/views.rst:183
msgid "Elgg core uses this feature extensively, though the value is returned directly from ``/engine/views.php``."
msgstr ""

#: ../../guides/views.rst:187
msgid "You don't have to use Bower, Composer Asset Plugin, or any other script for managing your plugin's assets, but we highly recommend using a package manager of some kind because it makes upgrading so much easier."
msgstr ""

#: ../../guides/views.rst:192
msgid "Specifying additional views directories"
msgstr ""

#: ../../guides/views.rst:194
msgid "In ``elgg-plugin.php`` you can also specify directories to be scanned for views. Just provide a view name prefix ending with ``/`` and a directory path (like above)."
msgstr ""

#: ../../guides/views.rst:208
msgid "With the above, files found within the ``icons`` folder will be interpreted as views. E.g. the view ``file/icon/general.gif`` will be created and mapped to ``mod/file/graphics/icons/general.gif``."
msgstr ""

#: ../../guides/views.rst:213
msgid "This is a fully recursive scan. All files found will be brought into the views system."
msgstr ""

#: ../../guides/views.rst:215
msgid "Multiple paths can share the same prefix, just give an array of paths:"
msgstr ""

#: ../../guides/views.rst:232
msgid "Viewtypes"
msgstr ""

#: ../../guides/views.rst:234
msgid "You might be wondering: \"Why ``/views/default/hello/world.php`` instead of just ``/views/hello/world.php``?\"."
msgstr ""

#: ../../guides/views.rst:236
msgid "The subdirectory under ``/views`` determines the *viewtype* of the views below it. A viewtype generally corresponds to the output format of the views."
msgstr ""

#: ../../guides/views.rst:239
msgid "The default viewtype is assumed to be HTML and other static assets necessary to render a responsive web page in a desktop or mobile browser, but it could also be:"
msgstr ""

#: ../../guides/views.rst:242
msgid "RSS"
msgstr ""

#: ../../guides/views.rst:243
msgid "ATOM"
msgstr ""

#: ../../guides/views.rst:244
msgid "JSON"
msgstr ""

#: ../../guides/views.rst:245
msgid "Mobile-optimized HTML"
msgstr ""

#: ../../guides/views.rst:246
msgid "TV-optimized HTML"
msgstr ""

#: ../../guides/views.rst:247
msgid "Any number of other data formats"
msgstr ""

#: ../../guides/views.rst:249
msgid "You can force Elgg to use a particular viewtype to render the page by setting the ``view`` input variable like so: ``https://mysite.com/?view=rss``."
msgstr ""

#: ../../guides/views.rst:252
msgid "You could also write a plugin to set this automatically using the ``elgg_set_viewtype()`` function. For example, your plugin might detect that the page was accessed with an iPhone's browser string, and set the viewtype to ``iphone`` by calling:"
msgstr ""

#: ../../guides/views.rst:260
msgid "The plugin would presumably also supply a set of views optimized for those devices."
msgstr ""

#: ../../guides/views.rst:265
msgid "Altering views via plugins"
msgstr ""

#: ../../guides/views.rst:267
msgid "Without modifying Elgg's core, Elgg provides several ways to customize almost all output:"
msgstr ""

#: ../../guides/views.rst:269
msgid "You can `override a view <#overriding-views>`_, completely changing the file used to render it."
msgstr ""

#: ../../guides/views.rst:270
msgid "You can `extend a view <#extending-views>`_ by prepending or appending the output of another view to it."
msgstr ""

#: ../../guides/views.rst:271
msgid "You can `alter a view's inputs <#altering-view-input>`_ by plugin hook."
msgstr ""

#: ../../guides/views.rst:272
msgid "You can `alter a view's output <#altering-view-output>`_ by plugin hook."
msgstr ""

#: ../../guides/views.rst:275
msgid "Overriding views"
msgstr ""

#: ../../guides/views.rst:277
msgid "Views in plugin directories always override views in the core directory; however, when plugins override the views of other plugins, :ref:`later plugins take precedent <admin/plugins#plugin-order>`."
msgstr ""

#: ../../guides/views.rst:281
msgid "For example, if we wanted to customize the ``hello/world`` view to use an ``h2`` instead of an ``h1``, we could create a file at ``/mod/example/views/default/hello/world.php`` like this:"
msgstr ""

#: ../../guides/views.rst:290
msgid "When considering long-term maintenance, overriding views in the core and bundled plugins has a cost: Upgrades may bring changes in views, and if you have overridden them, you will not get those changes."
msgstr ""

#: ../../guides/views.rst:293
msgid "You may instead want to alter :ref:`the input <guides/views#altering-view-input>` or :ref:`the output <guides/views#altering-view-output>` of the view via plugin hooks."
msgstr ""

#: ../../guides/views.rst:298
msgid "Elgg caches view locations. This means that you should disable the system cache while developing with views. When you install the changes to a production environment you must flush the caches."
msgstr ""

#: ../../guides/views.rst:302
msgid "Extending views"
msgstr ""

#: ../../guides/views.rst:304
msgid "There may be other situations in which you don't want to override the whole view, you just want to prepend or append some more content to it. In Elgg this is called *extending a view*."
msgstr ""

#: ../../guides/views.rst:307
msgid "For example, instead of overriding the ``hello/world`` view, we could extend it like so:"
msgstr ""

#: ../../guides/views.rst:313
msgid "If the contents of ``/views/default/hello/greeting.php`` is:"
msgstr ""

#: ../../guides/views.rst:319
msgid "Then every time we call ``elgg_view('hello/world');``, we'll get:"
msgstr ""

#: ../../guides/views.rst:326
msgid "You can prepend views by passing a value to the 3rd parameter that is less than 500:"
msgstr ""

#: ../../guides/views.rst:336
msgid "All view extensions should be registered in your plugin's ``init,system`` event handler in ``start.php``."
msgstr ""

#: ../../guides/views.rst:341
msgid "Altering view input"
msgstr ""

#: ../../guides/views.rst:343
msgid "It may be useful to alter a view's ``$vars`` array before the view is rendered."
msgstr ""

#: ../../guides/views.rst:345
msgid "Since 1.11, before each view rendering the ``$vars`` array is filtered by the :ref:`plugin hook <guides/hooks-list#views>` ``[\"view_vars\", $view_name]``. Each registered handler function is passed these arguments:"
msgstr ""

#: ../../guides/views.rst:349
msgid "``$hook`` - the string ``\"view_vars\"``"
msgstr ""

#: ../../guides/views.rst:350
#: ../../guides/views.rst:385
msgid "``$view_name`` - the view name being rendered (the first argument passed to ``elgg_view()``)"
msgstr ""

#: ../../guides/views.rst:351
msgid "``$returnvalue`` - the modified ``$vars`` array"
msgstr ""

#: ../../guides/views.rst:352
#: ../../guides/views.rst:387
msgid "``$params`` - an array containing:"
msgstr ""

#: ../../guides/views.rst:354
msgid "``vars`` - the original ``$vars`` array, unaltered"
msgstr ""

#: ../../guides/views.rst:355
msgid "``view`` - the view name"
msgstr ""

#: ../../guides/views.rst:356
#: ../../guides/views.rst:389
msgid "``viewtype`` - The :ref:`viewtype <guides/views#viewtypes>` being rendered"
msgstr ""

#: ../../guides/views.rst:359
msgid "Altering view input example"
msgstr ""

#: ../../guides/views.rst:361
msgid "Here we'll alter the default pagination limit for the comments view:"
msgstr ""

#: ../../guides/views.rst:376
msgid "Altering view output"
msgstr ""

#: ../../guides/views.rst:378
msgid "Sometimes it is preferable to alter the output of a view instead of overriding it."
msgstr ""

#: ../../guides/views.rst:380
msgid "The output of each view is run through the :ref:`plugin hook <guides/hooks-list#views>` ``[\"view\", $view_name]`` before being returned by ``elgg_view()``. Each registered handler function is passed these arguments:"
msgstr ""

#: ../../guides/views.rst:384
msgid "``$hook`` - the string ``\"view\"``"
msgstr ""

#: ../../guides/views.rst:386
msgid "``$result`` - the modified output of the view"
msgstr ""

#: ../../guides/views.rst:391
msgid "To alter the view output, the handler just needs to alter ``$returnvalue`` and return a new string."
msgstr ""

#: ../../guides/views.rst:394
msgid "Altering view output example"
msgstr ""

#: ../../guides/views.rst:396
msgid "Here we'll eliminate breadcrumbs that don't have at least one link."
msgstr ""

#: ../../guides/views.rst:417
msgid "Replacing view output completely"
msgstr ""

#: ../../guides/views.rst:419
msgid "You can pre-set the view output by setting ``$vars['__view_output']``. The value will be returned as a string. View extensions will not be used and the ``view`` hook will not be triggered."
msgstr ""

#: ../../guides/views.rst:435
msgid "If you don't know what an entity is, :doc:`check this page out first </design/database>`."
msgstr ""

#: ../../guides/views.rst:437
msgid "The following code will automatically display the entity in ``$entity``:"
msgstr ""

#: ../../guides/views.rst:443
msgid "As you'll know from the data model introduction, all entities have a *type* (object, site, user or group), and optionally a subtype (which could be anything - 'blog', 'forumpost', 'banana')."
msgstr ""

#: ../../guides/views.rst:447
msgid "``elgg_view_entity`` will automatically look for a view called ``type/subtype``; if there's no subtype, it will look for ``type/type``. Failing that, before it gives up completely it tries ``type/default``."
msgstr ""

#: ../../guides/views.rst:451
msgid "RSS feeds in Elgg generally work by outputting the ``object/default`` view in the 'rss' viewtype."
msgstr ""

#: ../../guides/views.rst:453
msgid "For example, the view to display a blog post might be ``object/blog``. The view to display a user is ``user/default``."
msgstr ""

#: ../../guides/views.rst:457
msgid "Full and partial entity views"
msgstr ""

#: ../../guides/views.rst:459
msgid "``elgg_view_entity`` actually has a number of parameters, although only the very first one is required. The first three are:"
msgstr ""

#: ../../guides/views.rst:462
msgid "``$entity`` - The entity to display"
msgstr ""

#: ../../guides/views.rst:463
msgid "``$viewtype`` - The viewtype to display in (defaults to the one we're currently in, but it can be forced - eg to display a snippet of RSS within an HTML page)"
msgstr ""

#: ../../guides/views.rst:465
msgid "``$full_view`` - Whether to display a *full* version of the entity. (Defaults to false.)"
msgstr ""

#: ../../guides/views.rst:467
msgid "This last parameter is passed to the view as ``$vars['full_view']``. It's up to you what you do with it; the usual behaviour is to only display comments and similar information if this is set to true."
msgstr ""

#: ../../guides/views.rst:474
msgid "Listing entities"
msgstr ""

#: ../../guides/views.rst:476
msgid "This is then used in the provided listing functions. To automatically display a list of blog posts (:doc:`see the full tutorial </tutorials/blog>`), you can call:"
msgstr ""

#: ../../guides/views.rst:486
msgid "This function checks to see if there are any entities; if there are, it first displays the ``navigation/pagination`` view in order to display a way to move from page to page. It then repeatedly calls ``elgg_view_entity`` on each entity before returning the result."
msgstr ""

#: ../../guides/views.rst:491
msgid "Note that ``elgg_list_entities`` allows the URL to set its ``limit`` and ``offset`` options, so set those explicitly if you need particular values (e.g. if you're not using it for pagination)."
msgstr ""

#: ../../guides/views.rst:494
msgid "Elgg knows that it can automatically supply an RSS feed on pages that use ``elgg_list_entities``. It initializes the ``[\"head\",\"page\"]`` plugin hook (which is used by the header) in order to provide RSS autodiscovery, which is why you can see the orange RSS icon on those pages in some browsers."
msgstr ""

#: ../../guides/views.rst:499
msgid "If your entity list will display the entity owners, you can improve performance a bit by preloading all owner entities:"
msgstr ""

#: ../../guides/views.rst:512
msgid "See also :doc:`this background information on Elgg's database </design/database>`."
msgstr ""

#: ../../guides/views.rst:514
msgid "If you want to show a message when the list does not contain items to list, you can pass a ``no_results`` message. If you want even more controle over the ``no_results`` message you can also pass a Closure (an anonymous function)."
msgstr ""

#: ../../guides/views.rst:528
msgid "Rendering a list with an alternate view"
msgstr ""

#: ../../guides/views.rst:530
msgid "Since 1.11, you can define an alternative view to render list items using ``'item_view'`` parameter."
msgstr ""

#: ../../guides/views.rst:532
msgid "In some cases, default entity views may be unsuitable for your needs. Using ``item_view`` allows you to customize the look, while preserving pagination, list's HTML markup etc."
msgstr ""

#: ../../guides/views.rst:535
msgid "Consider these two examples:"
msgstr ""

#: ../../guides/views.rst:557
msgid "In the first example, we are displaying a list of groups a user is a member of using the default group view. In the second example, we want to display a list of groups the user was invited to."
msgstr ""

#: ../../guides/views.rst:560
msgid "Since invitations are not entities, they do not have their own views and can not be listed using ``elgg_list_*``. We are providing an alternative item view, that will use the group entity to display an invitation that contains a group name and buttons to access or reject the invitation."
msgstr ""

#: ../../guides/views.rst:565
msgid "Rendering a list as a table"
msgstr ""

#: ../../guides/views.rst:567
msgid "Since 2.3 you can render lists as tables. Set ``$options['list_type'] = 'table'`` and provide an array of TableColumn objects as ``$options['columns']``. The service ``elgg()->table_columns`` provides several methods to create column objects based around existing views (like ``page/components/column/*``), properties, or methods."
msgstr ""

#: ../../guides/views.rst:572
msgid "In this example, we list the latest ``my_plugin`` objects in a table of 3 columns: entity icon, the display name, and a friendly format of the time."
msgstr ""

#: ../../guides/views.rst:591
msgid "See the ``Elgg\\Views\\TableColumn\\ColumnFactory`` class for more details on how columns are specified and rendered. You can add or override methods of ``elgg()->table_columns`` in a variety of ways, based on views, properties/methods on the items, or given functions."
msgstr ""

#: ../../guides/views/foot-vs-footer.rst:2
msgid "Page/elements/foot vs footer"
msgstr ""

#: ../../guides/views/foot-vs-footer.rst:4
msgid "``page/elements/footer`` is the content that goes inside this part of the page:"
msgstr ""

#: ../../guides/views/foot-vs-footer.rst:14
msgid "It's content is visible to end users and usually where you would put a sitemap or other secondary global navigation, copyright info, powered by elgg, etc."
msgstr ""

#: ../../guides/views/foot-vs-footer.rst:16
msgid "``page/elements/foot`` is inserted just before the ending ``</body>`` tag and is mostly meant as a place to insert scripts that don't already work with ``elgg_register_js(array('location' => 'footer'));`` or ``elgg_require_js('amd/module');``. In other words, you should never override this view and probably don't need to extend it either. Just use the ``elgg_*_js`` functions instead"
msgstr ""

#: ../../guides/views/page-structure.rst:2
msgid "Page structure best practice"
msgstr ""

#: ../../guides/views/page-structure.rst:4
msgid "Elgg pages have an overall pageshell and a main content area. In Elgg 1.0+, we've marked out a space \\\"the canvas\\\" for items to write to the page. This means the user always has a very consistent experience, while giving maximum flexibility to plugin authors for laying out their functionality."
msgstr ""

#: ../../guides/views/page-structure.rst:6
msgid "Think of the canvas area as a big rectangle that you can do what you like in. We've created a couple of standard canvases for you:"
msgstr ""

#: ../../guides/views/page-structure.rst:8
msgid "one column"
msgstr ""

#: ../../guides/views/page-structure.rst:9
msgid "two column"
msgstr ""

#: ../../guides/views/page-structure.rst:10
msgid "content"
msgstr ""

#: ../../guides/views/page-structure.rst:11
msgid "widgets"
msgstr ""

#: ../../guides/views/page-structure.rst:13
msgid "are the main ones. You can access these with the function:"
msgstr ""

#: ../../guides/views/page-structure.rst:22
msgid "The content sections are passed as an ``array`` in the second parameter. The array keys correspond to sections in the layout, the choice of layout will determine which sections to pass. The array values contain the html that should be displayed in those areas. Examples of two common layouts:"
msgstr ""

#: ../../guides/views/page-structure.rst:37
msgid "You can then, ultimately, pass this into the ``elgg_view_page`` function:"
msgstr ""

#: ../../guides/views/page-structure.rst:43
msgid "You may also have noticed that we've started including a standard title area at the top of each plugin page (or at least, most plugin pages). This is created using the following wrapper function, and should usually be included at the top of the plugin content:"
msgstr ""

#: ../../guides/views/page-structure.rst:49
msgid "This will also display any submenu items that exist (unless you set the second, optional parameter to false). So how do you add submenu items?"
msgstr ""

#: ../../guides/views/page-structure.rst:51
msgid "In your plugin_init function, include the following call:"
msgstr ""

#: ../../guides/views/page-structure.rst:61
msgid "The submenu will then automatically display when your page is rendered. The 'identifier' is a machine name for the link, it should be unique per menu."
msgstr ""

#: ../../guides/views/simplecache.rst:2
msgid "Simplecache"
msgstr ""

#: ../../guides/views/simplecache.rst:6
msgid ":doc:`/admin/performance`"
msgstr ""

#: ../../guides/views/simplecache.rst:7
msgid ":doc:`/guides/views`"
msgstr ""

#: ../../guides/views/simplecache.rst:9
msgid "The Simplecache is a mechanism designed to alleviate the need for certain views to be regenerated dynamically. Instead, they are generated once, saved as a static file, and served in a way that entirely bypasses the Elgg engine."
msgstr ""

#: ../../guides/views/simplecache.rst:12
msgid "If Simplecache is turned off (which can be done from the administration panel), these views will be served as normal, with the exception of site CSS."
msgstr ""

#: ../../guides/views/simplecache.rst:15
msgid "The criteria for whether a view is suitable for the Simplecache is as follows:"
msgstr ""

#: ../../guides/views/simplecache.rst:17
msgid "The view must not change depending on who or when it is being looked at"
msgstr ""

#: ../../guides/views/simplecache.rst:18
msgid "The view must not depend on variables fed to it (except for global variables like site URL that never change)"
msgstr ""

#: ../../guides/views/simplecache.rst:21
msgid "Regenerating the Simplecache"
msgstr ""

#: ../../guides/views/simplecache.rst:23
msgid "You can regenerate the Simplecache at any time by:"
msgstr ""

#: ../../guides/views/simplecache.rst:25
msgid "Loading ``/upgrade.php``, even if you have nothing to upgrade"
msgstr ""

#: ../../guides/views/simplecache.rst:26
msgid "In the admin panel click on 'Flush the caches'"
msgstr ""

#: ../../guides/views/simplecache.rst:27
msgid "Enabling or disabling a plugin"
msgstr ""

#: ../../guides/views/simplecache.rst:28
msgid "Reordering your plugins"
msgstr ""

#: ../../guides/views/simplecache.rst:31
msgid "Using the Simplecache in your plugins"
msgstr ""

#: ../../guides/views/simplecache.rst:33
msgid "**Registering views with the Simplecache**"
msgstr ""

#: ../../guides/views/simplecache.rst:35
msgid "You can register a view with the Simplecache with the following function at init-time:"
msgstr ""

#: ../../guides/views/simplecache.rst:41
msgid "**Accessing the cached view**"
msgstr ""

#: ../../guides/views/simplecache.rst:43
msgid "If you registered a JavaScript or CSS file with Simplecache and put in the view folder as ``your_view.js`` or ``your_view.css`` you can very easily get the url to this cached view by calling ``elgg_get_simplecache_url($view)``. For example:"
msgstr ""

#: ../../guides/walled-garden.rst:2
msgid "Walled Garden"
msgstr ""

#: ../../guides/walled-garden.rst:4
msgid "Elgg supports a \"Walled Garden\" mode. In this mode, almost all pages are restricted to logged in users. This is useful for sites that don't allow public registration."
msgstr ""

#: ../../guides/walled-garden.rst:7
msgid "Activating Walled Garden mode"
msgstr ""

#: ../../guides/walled-garden.rst:9
msgid "To activate Walled Garden mode in Elgg 1.8, go to the Administration section. On the right sidebar menu, under the \"Configure\" section, expand \"Settings,\" then click on \"Advanced.\""
msgstr ""

#: ../../guides/walled-garden.rst:11
msgid "From the Advanced Settings page, find the option labelled \"Restrict pages to logged-in users.\" Enable this option, then click \"Save\" to switch your site into Walled Garden mode."
msgstr ""

#: ../../guides/walled-garden.rst:14
msgid "Exposing pages through Walled Gardens"
msgstr ""

#: ../../guides/walled-garden.rst:16
msgid "Many plugins extend Elgg by adding pages. Walled Garden mode will prevent these pages from being viewed by logged out users. Elgg uses :ref:`plugin hook <design/events#plugin-hooks>` to manage which pages are visible through the Walled Garden."
msgstr ""

#: ../../guides/walled-garden.rst:18
msgid "Plugin authors must register pages as public if they should be viewable through Walled Gardens by responding to the ``public_pages``, ``walled_garden`` plugin hook."
msgstr ""

#: ../../guides/walled-garden.rst:20
msgid "The returned value is an array of regexp expressions for public pages."
msgstr ""

#: ../../guides/walled-garden.rst:22
msgid "The following code shows how to expose http://example.org/my_plugin/public_page through a Walled Garden. This assumes the plugin has registered a :doc:`pagehandler` for ``my_plugin``."
msgstr ""

#: ../../guides/web-services.rst:4
msgid "Build an HTTP API for your site."
msgstr ""

#: ../../guides/web-services.rst:6
msgid "Elgg provides a powerful framework for building web services. This allows developers to expose functionality to other web sites and desktop applications along with doing integrations with third-party web applications. While we call the API RESTful, it is actually a REST/RPC hybrid similar to the APIs provided by sites like Flickr and Twitter."
msgstr ""

#: ../../guides/web-services.rst:12
msgid "To create an API for your Elgg site, you need to do 4 things:"
msgstr ""

#: ../../guides/web-services.rst:14
msgid "enable the web services plugin"
msgstr ""

#: ../../guides/web-services.rst:15
msgid "expose methods"
msgstr ""

#: ../../guides/web-services.rst:16
msgid "setup API authentication"
msgstr ""

#: ../../guides/web-services.rst:17
msgid "setup user authentication"
msgstr ""

#: ../../guides/web-services.rst:19
msgid "Additionally, you may want to control what types of authentication are available on your site. This will also be covered."
msgstr ""

#: ../../guides/web-services.rst:29
msgid "It is crucial that the web services are consumed via secure protocols. Do not enable web services if your site is not served via HTTPs. This is especially important if you allow API key only authentication."
msgstr ""

#: ../../guides/web-services.rst:33
msgid "If you are using third-party tools that expose API methods, make sure to carry out a thorough security audit. You may want to make sure that API authentication is required for ALL methods, even if they require user authentication. Methods that do not require API authentication can be easily abused to spam your site."
msgstr ""

#: ../../guides/web-services.rst:38
msgid "Ensure that the validity of API keys is limited and provide mechanisms for your API clients to renew their keys."
msgstr ""

#: ../../guides/web-services.rst:42
msgid "Exposing methods"
msgstr ""

#: ../../guides/web-services.rst:44
msgid "The function to use to expose a method is ``elgg_ws_expose_function()``. As an example, let's assume you want to expose a function that echos text back to the calling application. The function could look like this"
msgstr ""

#: ../../guides/web-services.rst:54
msgid "Since we are providing this function to allow developers to test their API clients, we will require neither API authentication nor user authentication. This call registers the function with the web services API framework:"
msgstr ""

#: ../../guides/web-services.rst:75
msgid "If you add this code to a plugin and then go to http://yoursite.com/services/api/rest/json/?method=system.api.list, you should now see your test.echo method listed as an API call. Further, to test the exposed method from a web browser, you could hit the url: http://yoursite.com/services/api/rest/json/?method=test.echo&string=testing and you should see JSON data like this:"
msgstr ""

#: ../../guides/web-services.rst:86
msgid "Plugins can filter the output of individual API methods by registering a handler for ``'rest:output',$method`` plugin hook."
msgstr ""

#: ../../guides/web-services.rst:90
msgid "Response formats"
msgstr ""

#: ../../guides/web-services.rst:92
msgid "JSON is the default format, however XML and serialized PHP can be fetched by enabling the ``data_views`` plugin and substituting ``xml`` or ``php`` in place of ``json`` in the above URLs."
msgstr ""

#: ../../guides/web-services.rst:95
msgid "You can also add additional response formats by defining new viewtypes."
msgstr ""

#: ../../guides/web-services.rst:98
msgid "Parameters"
msgstr ""

#: ../../guides/web-services.rst:100
msgid "Parameters expected by each method should be listed as an associative array, where the key represents the parameter name, and the value contains an array with ``type``, ``default`` and ``required`` fields."
msgstr ""

#: ../../guides/web-services.rst:102
msgid "Values submitted with the API request for each parameter should match the declared type. API will throw on exception if validation fails."
msgstr ""

#: ../../guides/web-services.rst:104
msgid "Recognized parameter types are:"
msgstr ""

#: ../../guides/web-services.rst:106
msgid "``integer`` (or ``int``)"
msgstr ""

#: ../../guides/web-services.rst:107
msgid "``boolean`` (or ``bool``)"
msgstr ""

#: ../../guides/web-services.rst:108
msgid "``string``"
msgstr ""

#: ../../guides/web-services.rst:109
msgid "``float``"
msgstr ""

#: ../../guides/web-services.rst:110
msgid "``array``"
msgstr ""

#: ../../guides/web-services.rst:112
msgid "Unrecognized types will throw an API exception."
msgstr ""

#: ../../guides/web-services.rst:114
msgid "You can use additional fields to describe your parameter, e.g. ``description``."
msgstr ""

#: ../../guides/web-services.rst:142
msgid "If a missing parameter has no default value, the argument will be ``null``. Before 2.1, a bug caused later arguments to be shifted left in this case."
msgstr ""

#: ../../guides/web-services.rst:146
msgid "Receive parameters as associative array"
msgstr ""

#: ../../guides/web-services.rst:148
msgid "If you have a large number of method parameters, you can force the execution script to invoke the callback function with a single argument that contains an associative array of parameter => input pairs (instead of each parameter being a separate argument). To do that, set ``$assoc`` to ``true`` in ``elgg_ws_expose_function()``."
msgstr ""

#: ../../guides/web-services.rst:181
msgid "If a missing parameter has no default value, ``null`` will be used."
msgstr ""

#: ../../guides/web-services.rst:184
msgid "API authentication"
msgstr ""

#: ../../guides/web-services.rst:186
msgid "You may want to control access to some of the functions that you expose. Perhaps you are exposing functions in order to integrate Elgg with another open source platform on the same server. In that case, you only want to allow that other application access to these methods. Another possibility is that you want to limit what external developers have access to your API. Or maybe you want to limit how many calls a developer can make against your API in a single day."
msgstr ""

#: ../../guides/web-services.rst:194
msgid "In all of these cases, you can use Elgg's API authentication functions to control access. Elgg provides two built-in methods to perform API authentication: key based and HMAC signature based. You can also add your own authentication methods. The key based approach is very similar to what Google, Flickr, or Twitter. Developers can request a key (a random string) and pass that key with all calls that require API authentication. The keys are stored in the database and if an API call is made without a key or a bad key, the call is denied and an error message is returned."
msgstr ""

#: ../../guides/web-services.rst:205
msgid "Key-based authentication"
msgstr ""

#: ../../guides/web-services.rst:207
msgid "As an example, let's write a function that returns the number of users that have viewed the site in the last x minutes."
msgstr ""

#: ../../guides/web-services.rst:218
msgid "Now, let's expose it and make the number of minutes an optional parameter:"
msgstr ""

#: ../../guides/web-services.rst:238
msgid "This function is now available and if you check ``system.api.list``, you will see that it requires API authentication. If you hit the method with a web browser, it will return an error message about failing the API authentication. To test this method, you need an API key. Fortunately, there is a plugin called apiadmin that creates keys for you. It is available in the Elgg plugin repository. It will return a public and private key and you will use the public key for this kind of API authentication. Grab a key and then do a GET request with your browser on this API method passing in the key string as the parameter ``api_key``. It might look something like this: http://yoursite.com/services/api/rest/xml/?method=users.active&api_key=1140321cb56c71710c38feefdf72bc462938f59f."
msgstr ""

#: ../../guides/web-services.rst:251
msgid "Signature-based authentication"
msgstr ""

#: ../../guides/web-services.rst:253
msgid "The :doc:`web-services/hmac` is similar to what is used with OAuth or Amazon's S3 service. This involves both the public and private key. If you want to be very sure that the API calls are coming from the developer you think they are coming from and you want to make sure the data is not being tampered with during transmission, you would use this authentication method. Be aware that it is much more involved and could turn off developers when there are other sites out there with key-based authentication."
msgstr ""

#: ../../guides/web-services.rst:263
msgid "OAuth"
msgstr ""

#: ../../guides/web-services.rst:265
msgid "With the addition of the OAuth plugin, Elgg also fully supports the OAuth 1.0a authorization standard. Clients can then use standard OAuth libraries to make any API calls to the site."
msgstr ""

#: ../../guides/web-services.rst:270
msgid "User authentication"
msgstr ""

#: ../../guides/web-services.rst:272
msgid "So far you have been allowing developers to pull data out of your Elgg site. Now we'll move on to pushing data into Elgg. In this case, it is going to be done by a user. Maybe you have created a desktop application that allows your Users to post to the wire without going to the site. You need to expose a method for posting to the wire and you need to make sure that a user cannot post using someone else's account. Elgg provides a token-based approach for user authentication. It allows a user to submit their username and password in exchange for a token using the method ``auth.gettoken``. This token can then be used for some amount of time to authenticate all calls to the API before it expires by passing it as the parameter ``auth_token``. If you do not want to have your users trusting their passwords to 3rd-party applications, you can also extend the current capability to use an approach like OAuth."
msgstr ""

#: ../../guides/web-services.rst:286
msgid "Let's write our wire posting function:"
msgstr ""

#: ../../guides/web-services.rst:300
msgid "Exposing this function is the same as the previous except we require user authentication and we're going to make this use POST rather than GET HTTP requests."
msgstr ""

#: ../../guides/web-services.rst:320
msgid "Please note that you will not be able to test this using a web browser as you did with the other methods. You need to write some client code to do this. There is some example client code in ``/engine/lib/api.php``. Take a look at `send\\_api\\_post\\_call()`_. You can also do a search for clients that have been written for the APIs of Flickr or Twitter or any other similar API. You will find a wide variety written in almost any language you can think of."
msgstr ""

#: ../../guides/web-services.rst:329
msgid "Building out your API"
msgstr ""

#: ../../guides/web-services.rst:331
msgid "As soon as you feel comfortable with Elgg's web services API framework, you will want to step back and design your API. What sort of data are you trying to expose? Who or what will be API users? How do you want them to get access to authentication keys? How are you going to document your API? Be sure to take a look at the APIs created by popular Web 2.0 sites for inspiration. If you are looking for 3rd party developers to build applications using your API, you will probably want to provide one or more language-specific clients."
msgstr ""

#: ../../guides/web-services.rst:343
msgid "Determining the authentication available"
msgstr ""

#: ../../guides/web-services.rst:345
msgid "Elgg's web services API uses a type of `pluggable authentication module (PAM)`_ architecture to manage how users and developers are authenticated. This provides you the flexibility to add and remove authentication modules. Do you want to not use the default user authentication PAM but would prefer using OAuth? You can do this."
msgstr ""

#: ../../guides/web-services.rst:351
msgid "The first step is registering a callback function for the *rest, init* plugin hook:"
msgstr ""

#: ../../guides/web-services.rst:358
msgid "Then in the callback function, you register the PAMs that you want to use:"
msgstr ""

#: ../../guides/web-services.rst:374
msgid "When testing, you may find it useful to register the ``pam_auth_session`` PAM so that you can easily test your methods from the browser. Be careful not to use this PAM on a production site because it could open up your users to a `CSRF attack`_."
msgstr ""

#: ../../guides/web-services.rst:379
msgid "Right now, the only other PAMs publicly available besides those provided by the Elgg core are the OAuth PAMs. See `Justin Richer's OAuth plugin`_ for more detail."
msgstr ""

#: ../../guides/web-services/hmac.rst:2
msgid "HMAC Authentication"
msgstr ""

#: ../../guides/web-services/hmac.rst:4
msgid "Elgg's RESTful API framework provides functions to support a `HMAC`_ signature scheme for API authentication. The client must send the HMAC signature together with a set of special HTTP headers when making a call that requires API authentication. This ensures that the API call is being made from the stated client and that the data has not been tampered with."
msgstr ""

#: ../../guides/web-services/hmac.rst:8
msgid "The HMAC must be constructed over the following data:"
msgstr ""

#: ../../guides/web-services/hmac.rst:10
msgid "The public API key identifying you to the Elgg api server as provided by the APIAdmin plugin"
msgstr ""

#: ../../guides/web-services/hmac.rst:11
msgid "The private API Key provided by Elgg (that is companion to the public key)"
msgstr ""

#: ../../guides/web-services/hmac.rst:12
msgid "The current unix time in seconds"
msgstr ""

#: ../../guides/web-services/hmac.rst:13
msgid "A nonce to guarantee two requests the same second have different signatures"
msgstr ""

#: ../../guides/web-services/hmac.rst:14
msgid "URL encoded string representation of any GET variable parameters, eg ``method=test.test&foo=bar``"
msgstr ""

#: ../../guides/web-services/hmac.rst:15
msgid "If you are sending post data, the hash of this data"
msgstr ""

#: ../../guides/web-services/hmac.rst:17
msgid "Some extra information must be added to the HTTP header in order for this data to be correctly processed:"
msgstr ""

#: ../../guides/web-services/hmac.rst:19
msgid "**X-Elgg-apikey** - The public API key"
msgstr ""

#: ../../guides/web-services/hmac.rst:20
msgid "**X-Elgg-time** - Unix time used in the HMAC calculation"
msgstr ""

#: ../../guides/web-services/hmac.rst:21
msgid "**X-Elgg-none** - a random string"
msgstr ""

#: ../../guides/web-services/hmac.rst:22
msgid "**X-Elgg-hmac** - The HMAC as base64 encoded"
msgstr ""

#: ../../guides/web-services/hmac.rst:23
msgid "**X-Elgg-hmac-algo** - The algorithm used in the HMAC calculation - eg, sha1, md5 etc."
msgstr ""

#: ../../guides/web-services/hmac.rst:25
msgid "If you are sending POST data you must also send:"
msgstr ""

#: ../../guides/web-services/hmac.rst:27
msgid "**X-Elgg-posthash** - The hash of the POST data"
msgstr ""

#: ../../guides/web-services/hmac.rst:28
msgid "**X-Elgg-posthash-algo** - The algorithm used to produce the POST data hash - eg, md5"
msgstr ""

#: ../../guides/web-services/hmac.rst:29
msgid "**Content-type** - The content type of the data you are sending (if in doubt use application/octet-stream)"
msgstr ""

#: ../../guides/web-services/hmac.rst:30
msgid "**Content-Length** - The length in bytes of your POST data"
msgstr ""

#: ../../guides/web-services/hmac.rst:32
msgid "Elgg provides a sample API client that implements this HMAC signature: send_api_call(). It serves as a good reference on how to implement it."
msgstr ""

#: ../../guides/widgets.rst:2
msgid "Widgets"
msgstr ""

#: ../../guides/widgets.rst:4
msgid "Widgets are content areas that users can drag around their page to customize the layout. They can typically be customized by their owner to show more/less content and determine who sees the widget. By default Elgg provides plugins for customizing the profile page and dashboard via widgets."
msgstr ""

#: ../../guides/widgets.rst:6
msgid "TODO: Screenshot"
msgstr ""

#: ../../guides/widgets.rst:13
msgid "Structure"
msgstr ""

#: ../../guides/widgets.rst:15
msgid "To create a widget, create two views:"
msgstr ""

#: ../../guides/widgets.rst:17
msgid "``widgets/widget/edit``"
msgstr ""

#: ../../guides/widgets.rst:18
msgid "``widgets/widget/content``"
msgstr ""

#: ../../guides/widgets.rst:20
msgid "``content.php`` is responsible for all the content that will output within the widget. The ``edit.php`` file contains any extra edit functions you wish to present to the user. You do not need to add access level as this comes as part of the widget framework."
msgstr ""

#: ../../guides/widgets.rst:24
msgid "Using HTML checkboxes to set widget flags is problematic because if unchecked, the checkbox input is omitted from form submission. The effect is that you can only set and not clear flags. The \"input/checkboxes\" view will not work properly in a widget's edit panel."
msgstr ""

#: ../../guides/widgets.rst:30
msgid "Register the widget"
msgstr ""

#: ../../guides/widgets.rst:32
msgid "Once you have created your edit and view pages, you need to initialize the plugin widget. This is done within the plugins ``init()`` function."
msgstr ""

#: ../../guides/widgets.rst:45
msgid "The only required attribute is the ``id``."
msgstr ""

#: ../../guides/widgets.rst:48
msgid "Multiple widgets"
msgstr ""

#: ../../guides/widgets.rst:50
msgid "It is possible to add multiple widgets for a plugin. You just initialize as many widget directories as you need."
msgstr ""

#: ../../guides/widgets.rst:75
msgid "Make sure you have the corresponding directories within your plugin views structure:"
msgstr ""

#: ../../guides/widgets.rst:95
msgid "Magic widget name and description"
msgstr ""

#: ../../guides/widgets.rst:96
msgid "When registering a widget you can omit providing a name and a description. If a translation in the following format is provided, they will be used. For the name: ``widgets:<widget_id>:name`` and for the description ``widgets:<widget_id>:description``. If you make sure these translation are available in a translation file, you have very little work registering the widget."
msgstr ""

#: ../../guides/widgets.rst:103
msgid "How to restrict where widgets can be used"
msgstr ""

#: ../../guides/widgets.rst:104
msgid "The widget can specify the context that it can be used in (all, just profile, just dashboard, etc.). If you do not specify a context they will be available for all contexts."
msgstr ""

#: ../../guides/widgets.rst:114
msgid "Allow multiple widgets on the same page"
msgstr ""

#: ../../guides/widgets.rst:115
msgid "By default you can only add one widget of the same type on the page. If you want more of the same widget on the page, you can specify this when registering the widget:"
msgstr ""

#: ../../guides/widgets.rst:126
msgid "Register widgets in a hook"
msgstr ""

#: ../../guides/widgets.rst:127
msgid "If, for example, you wish to conditionally register widgets you can also use a hook to register widgets."
msgstr ""

#: ../../guides/widgets.rst:148
msgid "Modify widget properties of existing widget registration"
msgstr ""

#: ../../guides/widgets.rst:149
msgid "If, for example, you wish to change the allowed contexts of an already registered widget you can do so by re-registering the widget with ``elgg_register_widget_type`` as it will override an already existing widget definition. If you want even more control you can also use the ``handlers, widgets`` hook to change the widget definition."
msgstr ""

#: ../../guides/widgets.rst:168
msgid "Default widgets"
msgstr ""

#: ../../guides/widgets.rst:170
msgid "If your plugin uses the widget canvas, you can register default widget support with Elgg core, which will handle everything else."
msgstr ""

#: ../../guides/widgets.rst:172
msgid "To announce default widget support in your plugin, register for the ``get_list, default_widgets`` plugin hook:"
msgstr ""

#: ../../guides/widgets.rst:178
msgid "In the plugin hook handler, push an array into the return value defining your default widget support and when to create default widgets. Arrays require the following keys to be defined:"
msgstr ""

#: ../../guides/widgets.rst:180
msgid "name - The name of the widgets page. This is displayed on the tab in the admin interface."
msgstr ""

#: ../../guides/widgets.rst:181
msgid "widget\\_context - The context the widgets page is called from. (If not explicitly set, this is your plugin's id.)"
msgstr ""

#: ../../guides/widgets.rst:182
msgid "widget\\_columns - How many columns the widgets page will use."
msgstr ""

#: ../../guides/widgets.rst:183
msgid "event - The Elgg event to create new widgets for. This is usually ``create``."
msgstr ""

#: ../../guides/widgets.rst:184
msgid "entity\\_type - The entity type to create new widgets for."
msgstr ""

#: ../../guides/widgets.rst:185
msgid "entity\\_subtype - The entity subtype to create new widgets for. The can be ELGG\\_ENTITIES\\_ANY\\_VALUE to create for all entity types."
msgstr ""

#: ../../guides/widgets.rst:187
msgid "When an object triggers an event that matches the event, entity\\_type, and entity\\_subtype parameters passed, Elgg core will look for default widgets that match the widget\\_context and will copy them to that object's owner\\_guid and container\\_guid. All widget settings will also be copied."
msgstr ""

