<?xml version="1.0"?>
<ruleset name="Elgg">
	<description>Elgg coding standards</description>

	<arg name="tab-width" value="4"/>
	<arg name="warning-severity" value="0"/>
	<arg name="ignore" value="*/tests/*,*/upgrades/*,*/deprecated*"/>
	<arg name="ignore" value="*/tests/*,*/upgrades/*,*/deprecated*"/>

	<!-- ELGG STANDARDS -->

	<rule ref="./Elgg/Sniffs"/>

	<!-- Code MUST use an indent of 4 spaces, and MUST use tabs for indenting. -->
	<rule ref="Generic.WhiteSpace.ScopeIndent">
		<properties>
			<property name="indent" value="4"/>
			<property name="tabIndent" value="true"/>
			<property name="exact" value="false"/>
			<property name="ignoreIndentationTokens" type="array" value="T_COMMENT,T_DOC_COMMENT_OPEN_TAG"/>
		</properties>
	</rule>
	<rule ref="Generic.WhiteSpace.DisallowSpaceIndent"/>

	<rule ref="Squiz.PHP.LowercasePHPFunctions"/>

	<rule ref="Generic.Functions.OpeningFunctionBraceKernighanRitchie"/>

	<rule ref="Generic.Formatting.SpaceAfterCast">
		<severity>0</severity>
	</rule>

	<rule ref="Squiz.WhiteSpace.CastSpacing">
		<severity>0</severity>
	</rule>

	<rule ref="Generic.Arrays.DisallowLongArraySyntax">
		<severity>0</severity>
	</rule>

	<rule rel="Squiz.Operators.ValidLogicalOperators"/>

	
	<!-- PSR1/PSR2 STANDARDS -->

	<!-- PHP code MUST use the long <?php ?> tags or the short-echo <?= ?> tags; it MUST NOT use the other tag variations. -->
	<rule ref="Generic.PHP.DisallowShortOpenTag.EchoFound">
		<severity>0</severity>
	</rule>
 
	<!-- PHP code MUST use only UTF-8 without BOM. -->
	<rule ref="Generic.Files.ByteOrderMark"/>

	<!-- Class names MUST be declared in StudlyCaps. -->
	<rule ref="Squiz.Classes.ValidClassName"/>

	<!-- Class constants MUST be declared in all upper case with underscore separators. -->
	<rule ref="Generic.NamingConventions.UpperCaseConstantName"/>

	<!-- All PHP files MUST use the Unix LF (linefeed) line ending. -->
	<rule ref="Generic.Files.LineEndings">
		<properties>
			<property name="eolChar" value="\n"/>
		</properties>
	</rule>

	<!-- The soft limit on line length MUST be 120 characters; automated style checkers MUST warn but MUST NOT error at the soft limit. -->
	<rule ref="Generic.Files.LineLength">
		<properties>
			<property name="lineLimit" value="120"/>
			<property name="absoluteLineLimit" value="0"/>
		</properties>
	</rule>
 
	<!-- There MUST NOT be trailing whitespace at the end of non-blank lines. -->
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
		<properties>
			<property name="ignoreBlankLines" value="true"/>
		</properties>
	</rule>
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.StartFile">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
		<severity>0</severity>
	</rule>

	<!-- There MUST NOT be more than one statement per line. -->
	<rule ref="Generic.Formatting.DisallowMultipleStatements"/>

	<!-- PHP keywords MUST be in lower case. -->
	<rule ref="Generic.PHP.LowerCaseKeyword"/>

	<!-- The PHP constants true, false, and null MUST be in lower case. -->
	<rule ref="Generic.PHP.LowerCaseConstant"/>

	<!-- Method names MUST NOT be declared with a space after the method name. The opening brace MUST go on its own line, and the closing brace MUST go on the next line following the body. There MUST NOT be a space after the opening parenthesis, and there MUST NOT be a space before the closing parenthesis. -->
	<!-- checked in Methods/FunctionClosingBraceSniff -->
	<rule ref="Squiz.Functions.FunctionDeclaration"/>
	<rule ref="Squiz.Functions.LowercaseFunctionKeywords"/>

	<!-- In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma. -->
	<rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
		<properties>
			<property name="equalsSpacing" value="1"/>
		</properties>
	</rule>
	<rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterHint">
		<severity>0</severity>
	</rule>

	<!-- Method arguments with default values MUST go at the end of the argument list. -->
	<rule ref="PEAR.Functions.ValidDefaultValue"/>

	<!-- The general style rules for control structures are as follows:
	There MUST be one space after the control structure keyword
	There MUST NOT be a space after the opening parenthesis
	There MUST NOT be a space before the closing parenthesis
	There MUST be one space between the closing parenthesis and the opening brace
	The structure body MUST be indented once
	The closing brace MUST be on the next line after the body -->
	<rule ref="Squiz.ControlStructures.ControlSignature"/>
	<rule ref="Squiz.WhiteSpace.ControlStructureSpacing" />
	<!--
	   When 3.0 is released, change this to:
	   <rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpacingAfterOpen" />
	   <rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpacingBeforeClose" />
	-->
	<rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpacingAfterOpenBrace">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpaceBeforeCloseBrace">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.WhiteSpace.ControlStructureSpacing.LineAfterClose">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.WhiteSpace.ControlStructureSpacing.NoLineAfterClose">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.WhiteSpace.ScopeClosingBrace"/>
	<rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
	<rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
	<rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>
	<!-- checked in ControlStructures/ControlStructureSpacingSniff -->



	<!-- PEAR STANDARDS -->

	<!-- Include some additional sniffs from the Generic standard -->
	<rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
	<rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
	<rule ref="Generic.PHP.LowerCaseConstant"/>
	<rule ref="Generic.PHP.DisallowShortOpenTag"/>

	<!-- This message is not required as spaces are allowed for alignment -->
	<rule ref="Generic.Functions.FunctionCallArgumentSpacing.TooMuchSpaceAfterComma">
		<severity>0</severity>
	</rule>

	<!-- Use warnings for inline control structures -->
	<rule ref="Generic.ControlStructures.InlineControlStructure">
		<properties>
			<property name="error" value="false"/>
		</properties>
	</rule>

</ruleset>
