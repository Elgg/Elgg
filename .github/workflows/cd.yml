name: Pre-Deploy To Recette

on:
  workflow_dispatch:
  pull_request:
    branches: [recette]
  push:
    branches: [recette]

permissions:
  contents: read
  actions: write
  pull-requests: write
  issues: write
  id-token: write

env:
  RECETTE_IP: "34.22.137.184"
  CACHE_KEY: ${{ github.sha }}

jobs:
  docker-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.set-output.outputs.image-tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/elgg-app:v6
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/elgg-app:v6
          cache-to: type=inline

      - name: Set image tag output
        id: set-output
        run: |
          echo "image-tag=${{ secrets.DOCKERHUB_USERNAME }}/elgg-app:v6" >> $GITHUB_OUTPUT

  pre-deploy:
    needs: docker-build
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GKE_PROJECT }}

      - name: Deploy to test namespace
        run: |
          kubectl apply -f k8s/ -n test
          kubectl rollout status deployment/elgg-app -n test

      - name: Get test URL
        id: get-test-url
        run: |
          IP=$(kubectl get svc elgg-app -n test -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "TEST_URL=http://$IP" >> $GITHUB_ENV
          echo "TEST_URL=http://$IP" >> $GITHUB_OUTPUT

  pr-scan:
    needs: pre-deploy
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Run security scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: ${{ needs.pre-deploy.outputs.TEST_URL }}
          cmd_options: '-T 5'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    needs:
      - docker-build
      - pr-scan
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    environment:
      name: recette
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GKE_PROJECT }}

      - name: Deploy to production
        run: |
          kubectl apply -f k8s/mariadb.yml -n recette
          kubectl apply -f k8s/pvc.yml -n recette
          kubectl apply -f k8s/elgg-app.yml -n recette
          kubectl apply -f k8s/phpMyAdmin.yml -n recette
          kubectl apply -f k8s/elgg-env.yml -n recette

          kubectl rollout status deployment/elgg-app -n recette
          kubectl get all -n recette

      - name: Wait for service to be ready
        run: |
          echo "Waiting for application to be ready..."
          sleep 30
          for i in {1..10}; do
            if curl -f -s "http://${{ env.RECETTE_IP }}" > /dev/null; then
              echo "Application is ready!"
              break
            fi
            echo "Attempt $i: Application not ready yet, waiting..."
            sleep 10
          done

  cleanup-test:
    needs: deploy
    if: always() && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup test deployment
        run: |
          kubectl delete -f k8s/elgg-app.yml -n test --ignore-not-found
          kubectl delete -f k8s/mariadb.yml -n test --ignore-not-found

  security-scan:
    needs: deploy
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Run production scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: 'http://${{ env.RECETTE_IP }}'
          cmd_options: '-T 5'

      - name: Upload scan report
        uses: actions/upload-artifact@v4
        with:
          name: prod-scan-report
          path: report_html.html

  quality-gate:
    needs:
      - docker-build
      - deploy
      - security-scan
    runs-on: ubuntu-latest
    steps:
      - name: Download scan results
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.event_name == 'pull_request' && 'pr-scan-report' || 'prod-scan-report' }}

      - name: Check risks
        id: risk-check
        run: |
          HIGH=$(jq '[.site[0].alerts[] | select(.riskcode == "3")] | length' report_json.json || echo 0)
          MEDIUM=$(jq '[.site[0].alerts[] | select(.riskcode == "2")] | length' report_json.json || echo 0)
          echo "high=$HIGH" >> $GITHUB_OUTPUT
          echo "medium=$MEDIUM" >> $GITHUB_OUTPUT

      - name: Evaluate gate
        run: |
          if [ ${{ steps.risk-check.outputs.high }} -gt 0 ]; then
            echo "❌ BLOCKED: High-risk vulnerabilities detected"
            exit 1
          elif [ ${{ steps.risk-check.outputs.medium }} -gt 3 ]; then
            echo "⚠️ WARNING: Too many medium-risk issues"
            exit 1
          else
            echo "✅ Quality gate passed"
          fi

  deployment-summary:
    needs: [docker-build, deploy, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Deployment Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** ${{ needs.docker-build.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** http://${{ env.RECETTE_IP }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan:** Completed - Check artifacts for details" >> $GITHUB_STEP_SUMMARY