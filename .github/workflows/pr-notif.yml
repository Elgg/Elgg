name: PR Quality Reporter
on:
  pull_request:
    types: [closed]

jobs:
  report:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      checks: read
      pull-requests: write
    steps:
      - name: Get required checks
        id: get-checks
        uses: actions/github-script@v6
        with:
          script: |
            try {
              // 1. Get branch protection rules
              const { data: protection } = await github.rest.repos.getBranchProtection({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: context.payload.pull_request.base.ref
              });
              
              // 2. Get all check runs
              const { data: checks } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.payload.pull_request.head.sha
              });
              
              // 3. Filter only required checks
              const requiredChecks = checks.check_runs.filter(check => 
                protection.required_status_checks.contexts.includes(check.name)
              
              // 4. Generate report
              const passed = requiredChecks.filter(c => c.conclusion === 'success');
              const failed = requiredChecks.filter(c => c.conclusion === 'failure');
              
              let message = `## PR Quality Report (Required Checks Only)\n\n`;
              message += `### Required Checks:\n`;
              message += requiredChecks.map(c => `- ${c.name} ${c.conclusion === 'success' ? '✅ Passed' : '❌ Failed'}`).join('\n');
              message += `\n\n✅ Passed: ${passed.length}/${requiredChecks.length} checks\n`;
              message += `${failed.length ? '❌ Some checks failed' : '🎉 All required checks passed!'}`;
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
              
              core.setOutput('status', 'success');
            } catch (error) {
              core.setFailed(`Error: ${error.message}`);
            }