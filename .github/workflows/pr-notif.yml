name: PR Quality Reporter
on:
  pull_request:
    types: [closed]

jobs:
  report:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      checks: read
      pull-requests: write
      contents: read  # Needed for branch protection
    steps:
      - name: Debug PR Info
        run: |
          echo "PR Number: ${{ github.event.pull_request.number }}"
          echo "Base Ref: ${{ github.event.pull_request.base.ref }}"
          echo "Head SHA: ${{ github.event.pull_request.head.sha }}"
          echo "Merged: ${{ github.event.pull_request.merged }}"

      - name: Get and report checks
        id: report-checks
        uses: actions/github-script@v6
        with:
          script: |
            try {
              // Debug output
              console.log('Fetching branch protection...');
              const protection = await github.rest.repos.getBranchProtection({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: context.payload.pull_request.base.ref
              }).catch(e => {
                console.log('Protection error:', e);
                throw e;
              });
              
              console.log('Required contexts:', protection.data.required_status_checks?.contexts || []);

              const checks = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.payload.pull_request.head.sha
              });

              console.log('All checks:', checks.data.check_runs.map(c => c.name));

              const requiredChecks = checks.data.check_runs.filter(check => 
                protection.data.required_status_checks?.contexts?.includes(check.name)
              );

              console.log('Filtered checks:', requiredChecks.map(c => c.name));

              if (requiredChecks.length === 0) {
                core.info('No required checks found');
                return;
              }

              const message = [
                '## PR Quality Report (Required Checks)',
                '### Required Checks:',
                ...requiredChecks.map(c => `- ${c.name} ${c.conclusion === 'success' ? '✅ Passed' : '❌ Failed'}`),
                '',
                `✅ Passed: ${requiredChecks.filter(c => c.conclusion === 'success').length}/${requiredChecks.length} checks`,
                requiredChecks.some(c => c.conclusion === 'failure') ? '❌ Some checks failed' : '🎉 All required checks passed!'
              ].join('\n');

              console.log('Posting comment:', message);
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });

            } catch (error) {
              core.error('Failed to create report: ' + error.message);
              // Don't fail the workflow - we want to see debug output
            }

      - name: Force success
        run: exit 0  # Ensure workflow shows success even if reporting fails