name: Build, Deploy and Scan to Recette

on:
  workflow_dispatch:
  #push:
    #branches: [dev]

# Add workflow-level permissions
permissions:
  contents: read
  actions: write
  pull-requests: write
  issues: write
  id-token: write

env:
  RECETTE_IP: "34.22.137.184"
  # Add a unique cache key based on commit SHA
  CACHE_KEY: ${{ github.sha }}

jobs:
  # docker-build:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write
  #   outputs:
  #     image-tag: ${{ steps.set-output.outputs.image-tag }}
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to DockerHub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Build and push Docker image
  #       id: build
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         file: ./Dockerfile
  #         push: true
  #         tags: ${{ secrets.DOCKERHUB_USERNAME }}/elgg-app:v6
  #         cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/elgg-app:v6
  #         cache-to: type=inline

  #     - name: Set image tag output
  #       id: set-output
  #       run: |
  #         echo "image-tag=${{ secrets.DOCKERHUB_USERNAME }}/elgg-app:v6" >> $GITHUB_OUTPUT

  # deploy:
  #   needs: docker-build
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #   environment:
  #     name: recette
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Authenticate to Google Cloud
  #       uses: google-github-actions/auth@v2
  #       with:
  #         credentials_json: ${{ secrets.GKE_SA_KEY }}

  #     - name: Set up gcloud CLI and kubectl
  #       uses: google-github-actions/setup-gcloud@v2
  #       with:
  #         project_id: ${{ secrets.GKE_PROJECT }}
  #         #install_kubectl: true
  #         install_components: 'gcloud,kubectl'

  #     - name: Install GKE Auth Plugin
  #       run: |
  #         gcloud components install gke-gcloud-auth-plugin -q
  #         gcloud config set container/use_application_default_credentials true

  #     - name: Get GKE credentials
  #       run: |
  #         gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} \
  #           --region ${{ secrets.GKE_REGION }} \
  #           --project ${{ secrets.GKE_PROJECT }}

  #     - name: Check if deployment is needed
  #       id: check-deploy
  #       run: |
  #         # Check if the current image matches what's deployed
  #         CURRENT_IMAGE=$(kubectl get deployment elgg-app -n recette -o jsonpath='{.spec.template.spec.containers[0].image}' 2>/dev/null || echo "none")
  #         DESIRED_IMAGE="${{ needs.docker-build.outputs.image-tag }}"
  #         if [ "$CURRENT_IMAGE" = "$DESIRED_IMAGE" ]; then
  #           echo "skip=true" >> $GITHUB_OUTPUT
  #           echo "Deployment not needed - image already matches"
  #         else
  #           echo "skip=false" >> $GITHUB_OUTPUT
  #           echo "Deployment needed - image differs"
  #         fi

  #     - name: Deploy to GKE
  #       if: steps.check-deploy.outputs.skip != 'true'
  #       run: |
  #         kubectl apply -f k8s/mariadb.yml -n recette
  #         kubectl apply -f k8s/pvc.yml -n recette
  #         kubectl apply -f k8s/elgg-app.yml -n recette
  #         kubectl apply -f k8s/phpMyAdmin.yml -n recette
  #         kubectl apply -f k8s/elgg-env.yml -n recette

  #         kubectl rollout status deployment/elgg-app -n recette
  #         kubectl rollout status deployment/elgg-phpmyadmin -n recette
  #         kubectl get all -n recette

  #     - name: Wait for service to be ready
  #       run: |
  #         echo "Waiting for application to be ready..."
  #         sleep 30
  #         for i in {1..10}; do
  #           if curl -f -s "http://${{ env.RECETTE_IP }}" > /dev/null; then
  #             echo "Application is ready!"
  #             break
  #           fi
  #           echo "Attempt $i: Application not ready yet, waiting..."
  #           sleep 10
  #         done

  # security-scan:
  #   needs: deploy
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     actions: write
  #     security-events: write
  #   steps:

  #     - name: Create ZAP working directory
  #       run: mkdir -p zap_work_dir && chmod 777 zap_work_dir

  #     # - name: Prepare ZAP workspace
  #     #   run: |
  #     #     mkdir -p reports
  #     #     chmod 777 reports

  #     - name: Run Quick Security Scan
  #       uses: zaproxy/action-baseline@v0.14.0
  #       with:
  #         target: 'http://${{ env.RECETTE_IP }}'
  #         cmd_options: '-T 5 -z "-config api.disablekey=true" -J report_json.json -w report_md.md -r report_html.html'
  #         fail_action: false
  #         allow_issue_writing: false
  #         #artifact_name: 'zapscan'
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         ZAP_LOG_LEVEL: DEBUG

  #     # - name: Verify reports exist
  #     #   run: |
  #     #     ls -la /github/workspace/reports/
  #     #     [ -f /github/workspace/reports/report_html.html ] || echo "HTML report missing"
  #     #     [ -f /github/workspace/reports/report_md.md ] || echo "MD report missing"
  #     #     [ -f /github/workspace/reports/report_json.json ] || echo "JSON report missing"

  #     - name: Upload Scan Report
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: security-scan-report
  #         path: |
  #           report_html.html
  #           report_json.json
  #           report_md.md
  #         if-no-files-found: warn
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-scan:
    # needs: deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
      security-events: write
    steps:
      # Create working directory
      # - name: Prepare workspace
      #   run: |
      #     mkdir -p reports
      #     chmod 777 reports

      # Run ZAP scan (using relative paths)
      - name: Run Quick Security Scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: 'http://${{ env.RECETTE_IP }}'
          cmd_options: '-T 5 -z "-config api.disablekey=true"'
          fail_action: false
          allow_issue_writing: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ZAP_LOG_LEVEL: DEBUG

      # Verify reports were created
      # - name: Check reports
      #   run: |
      #     ls -la reports/
      #     [ -f reports/report_html.html ] || echo "HTML report missing"
      #     [ -f reports/report_md.md ] || echo "MD report missing"
      #     [ -f reports/report_json.json ] || echo "JSON report missing"

      # Upload the reports
      - name: Upload Scan Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-report
          path: |
            report_html.html
            report_json.json
            report_md.md
          if-no-files-found: error

  # quality-gate:
  #   needs: [docker-build, deploy, security-scan]
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'pull_request'
  #   permissions:
  #     contents: read
  #     pull-requests: write
  #     issues: write
  #   steps:
  #     - name: Download security scan report
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: security-scan-report-${{ github.run_number }}
  #         path: ./security-reports

  #     - name: Parse security scan results
  #       id: parse-results
  #       run: |
  #         if [ -f "./security-reports/report_json.json" ]; then
  #           HIGH_ALERTS=$(jq '.site[0].alerts[] | select(.riskdesc | contains("High"))' ./security-reports/report_json.json | jq -s 'length')
  #           MEDIUM_ALERTS=$(jq '.site[0].alerts[] | select(.riskdesc | contains("Medium"))' ./security-reports/report_json.json | jq -s 'length')
  #           echo "high-alerts=$HIGH_ALERTS" >> $GITHUB_OUTPUT
  #           echo "medium-alerts=$MEDIUM_ALERTS" >> $GITHUB_OUTPUT
  #         else
  #           echo "high-alerts=0" >> $GITHUB_OUTPUT
  #           echo "medium-alerts=0" >> $GITHUB_OUTPUT
  #         fi

  #     - name: Create Deployment Notification
  #       uses: actions/github-script@v7
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: |
  #           const commitHash = context.sha.substring(0, 7);
  #           const highAlerts = parseInt('${{ steps.parse-results.outputs.high-alerts }}') || 0;
  #           const mediumAlerts = parseInt('${{ steps.parse-results.outputs.medium-alerts }}') || 0;

  #           const securityStatus = highAlerts > 0 ? ' High Risk Issues Found':
  #                                 mediumAlerts > 0 ? ' Medium Risk Issues Found' : ' No High/Medium Risk Issues';

  #           const imageTag = '${{ needs.docker-build.outputs.image-tag }}';
  #           const environment = 'http://${{ env.RECETTE_IP }}';
  #           const runId = '${{ github.run_id }}';
  #           const repository = '${{ github.repository }}';

  #           const body = '## UAT Deployment Ready for Review\n\n' +
  #                       '**Application Details:**\n' +
  #                       '```yaml\n' +
  #                       'image: ' + imageTag + '\n' +
  #                       'environment: ' + environment + '\n' +
  #                       'commit: ' + commitHash + '\n' +
  #                       '```\n\n' +
  #                       '**Security Scan Results:** ' + securityStatus + '\n' +
  #                       '- High Risk: ' + highAlerts + ' issues\n' +
  #                       '- Medium Risk: ' + mediumAlerts + ' issues\n\n' +
  #                       ' **Reports:** [View Security Scan](https://github.com/' + repository + '/actions/runs/' + runId + ')\n\n' +
  #                       '---\n' +
  #                       'To approve this deployment, comment with: `/approve-recette`';

  #           if (context.payload.pull_request) {
  #             await github.rest.issues.createComment({
  #               issue_number: context.payload.pull_request.number,
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               body: body
  #             });
  #           }

  # deployment-summary:
  #   needs: [docker-build, deploy, security-scan]
  #   runs-on: ubuntu-latest
  #   if: github.event_name != 'pull_request'
  #   permissions:
  #     contents: read
  #   steps:
  #     - name: Deployment Summary
  #       run: |
  #         echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
  #         echo "- **Image:** ${{ needs.docker-build.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
  #         echo "- **Environment:** http://${{ env.RECETTE_IP }}" >> $GITHUB_STEP_SUMMARY
  #         echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
  #         echo "- **Security Scan:** Completed - Check artifacts for details" >> $GITHUB_STEP_SUMMARY
