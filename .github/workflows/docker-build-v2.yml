name: Build, Scan, Pre-Deploy and Deploy

on:
  workflow_dispatch:
  #pull_request:
    #branches: [ recette ]
  #push:
    #branches: [dev]

permissions:
  contents: read
  actions: write
  pull-requests: write
  issues: write
  id-token: write
  security-events: write
  packages: write

env:
  RECETTE_IP: "34.22.137.184"
  CACHE_KEY: ${{ github.sha }}

jobs:

  docker-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.set-output.outputs.image-tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/elgg-app:v6
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/elgg-app:v6
          cache-to: type=inline

      - name: Set image tag output
        id: set-output
        run: |
          echo "image-tag=${{ secrets.DOCKERHUB_USERNAME }}/elgg-app:v6" >> $GITHUB_OUTPUT

  codeql-scan:
    name: CodeQL Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript,php

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  pre-deploy-test:
    name: Pre-Deployment to test namespace
    needs: [docker-build, codeql-scan]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      - name: Set up gcloud CLI and kubectl
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GKE_PROJECT }}
          install_components: 'gcloud,kubectl'

      - name: Install GKE Auth Plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin -q
          gcloud config set container/use_application_default_credentials true

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} \
            --region ${{ secrets.GKE_REGION }} \
            --project ${{ secrets.GKE_PROJECT }}

      - name: Deploy to test namespace
        run: |
          kubectl apply -f k8s/mariadb.yml -n test
          kubectl apply -f k8s/pvc.yml -n test
          kubectl apply -f k8s/elgg-app.yml -n test
          kubectl apply -f k8s/phpMyAdmin.yml -n test
          kubectl apply -f k8s/elgg-env.yml -n test

          kubectl rollout status deployment/elgg-app -n test
          kubectl rollout status deployment/elgg-phpmyadmin -n test
          kubectl get all -n test

  security-scan:
    needs: pre-deploy-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
      security-events: write
    steps:
      - name: Run Quick Security Scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: 'http://${{ env.RECETTE_IP }}'
          cmd_options: '-T 5 -z "-config api.disablekey=true"'
          fail_action: false
          allow_issue_writing: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ZAP_LOG_LEVEL: DEBUG

      - name: Upload Scan Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-report
          path: |
            report_html.html
            report_json.json
            report_md.md
          if-no-files-found: error

  quality-gate:
    needs: [docker-build, security-scan]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    outputs:
      gate-passed: ${{ steps.evaluate.outputs.gate-passed }}

    steps:
      - name: Download security scan report
        uses: actions/download-artifact@v4
        with:
          name: security-scan-report

      - name: Check risks
        id: risk-check
        run: |
          HIGH=$(jq '[.site[0].alerts[] | select(.riskcode == "3")] | length' report_json.json || echo 0)
          MEDIUM=$(jq '[.site[0].alerts[] | select(.riskcode == "2")] | length' report_json.json || echo 0)
          echo "high=$HIGH" >> $GITHUB_OUTPUT
          echo "medium=$MEDIUM" >> $GITHUB_OUTPUT

      - name: Evaluate gate
        id: evaluate
        run: |
          if [ ${{ steps.risk-check.outputs.high }} -gt 0 ]; then
            echo "❌ BLOCKED: High-risk vulnerabilities detected"
            echo "gate-passed=false" >> $GITHUB_OUTPUT
            exit 1
          elif [ ${{ steps.risk-check.outputs.medium }} -gt 3 ]; then
            echo "⚠️ WARNING: Too many medium-risk issues"
            echo "gate-passed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ Quality gate passed"
            echo "gate-passed=true" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: [quality-gate]
    if: needs.quality-gate.outputs.gate-passed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    environment:
      name: recette
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      - name: Set up gcloud CLI and kubectl
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GKE_PROJECT }}
          install_components: 'gcloud,kubectl'

      - name: Install GKE Auth Plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin -q
          gcloud config set container/use_application_default_credentials true

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} \
            --region ${{ secrets.GKE_REGION }} \
            --project ${{ secrets.GKE_PROJECT }}

      - name: Check if deployment is needed
        id: check-deploy
        run: |
          CURRENT_IMAGE=$(kubectl get deployment elgg-app -n recette -o jsonpath='{.spec.template.spec.containers[0].image}' 2>/dev/null || echo "none")
          DESIRED_IMAGE="${{ needs.docker-build.outputs.image-tag }}"
          if [ "$CURRENT_IMAGE" = "$DESIRED_IMAGE" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "Deployment not needed - image already matches"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "Deployment needed - image differs"
          fi

      - name: Deploy to recette namespace
        if: steps.check-deploy.outputs.skip != 'true'
        run: |
          kubectl apply -f k8s/mariadb.yml -n recette
          kubectl apply -f k8s/pvc.yml -n recette
          kubectl apply -f k8s/elgg-app.yml -n recette
          kubectl apply -f k8s/phpMyAdmin.yml -n recette
          kubectl apply -f k8s/elgg-env.yml -n recette

          kubectl rollout status deployment/elgg-app -n recette
          kubectl rollout status deployment/elgg-phpmyadmin -n recette
          kubectl get all -n recette

      - name: Wait for service to be ready
        run: |
          echo "Waiting for application to be ready..."
          sleep 30
          for i in {1..10}; do
            if curl -f -s "http://${{ env.RECETTE_IP }}" > /dev/null; then
              echo "Application is ready!"
              break
            fi
            echo "Attempt $i: Application not ready yet, waiting..."
            sleep 10
          done

  deployment-summary:
    needs: [docker-build, deploy, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
    steps:
      - name: Deployment Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** ${{ needs.docker-build.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** http://${{ env.RECETTE_IP }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan:** Completed - Check artifacts for details" >> $GITHUB_STEP_SUMMARY
